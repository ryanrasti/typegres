import * as kysely from 'kysely';
import { RawBuilder, Kysely } from 'kysely';
import { Pool, PoolConfig } from 'pg';

declare class QueryAlias {
    name: string;
    constructor(name: string);
}
declare class Context {
    namespace: Map<QueryAlias, string>;
    usedAliases: Set<string>;
    private constructor();
    static new(): Context;
    withReference(ref: string): Context;
    withAliases(aliases: QueryAlias[]): Context;
    getAlias(alias: QueryAlias): string;
}
declare abstract class Expression {
    abstract compile(ctx: Context): RawBuilder<unknown>;
}
declare class LiteralExpression extends Expression {
    value: unknown | null;
    type: string;
    constructor(value: unknown | null, type: string);
    compile(): RawBuilder<unknown>;
}
declare class LiteralUnknownExpression extends Expression {
    value: unknown | null;
    constructor(value: unknown | null);
    compile(): RawBuilder<unknown>;
}
declare class FunctionExpression extends Expression {
    name: string;
    args: Expression[];
    constructor(name: string, args: Expression[]);
    compile(ctx: Context): RawBuilder<unknown>;
}
declare class BinaryOperatorExpression extends Expression {
    operator: string;
    args: [Expression, Expression];
    constructor(operator: string, args: [Expression, Expression]);
    compile(ctx: Context): RawBuilder<unknown>;
}

declare class export_default$1n{
    static parse(v: string): unknown;
    static typeString(): string | undefined;
    anyValue<T extends Any>(this: T): T;
    anyValueTransfn<T extends Any>(this: T, a1: T | Input<T>): T;
    anyValueTransfn<T extends Any>(this: T, a1: T | Input<T>): T;
    anyValueTransfn<T extends Any>(this: T, a1: T | Input<T>): T;
    arrayFill<T extends Any>(this: T, a1: Array$1<1, export_default$10<0 | 1>>): Array$1<1, T>;
    arrayFill<T extends Any>(this: T, a1: Array$1<0 | 1, export_default$10<0 | 1>>): Array$1<0 | 1, T>;
    arrayFill<T extends Any>(this: T, a1: Array$1<number, export_default$10<0 | 1>>): Array$1<0 | 1, T>;
    arrayFill<T extends Any>(this: T, a1: Array$1<1, export_default$10<0 | 1>>, a2: Array$1<1, export_default$10<0 | 1>>): Array$1<1, T>;
    arrayFill<T extends Any>(this: T, a1: Array$1<0 | 1, export_default$10<0 | 1>>, a2: Array$1<0 | 1, export_default$10<0 | 1>>): Array$1<0 | 1, T>;
    arrayFill<T extends Any>(this: T, a1: Array$1<number, export_default$10<0 | 1>>, a2: Array$1<number, export_default$10<0 | 1>>): Array$1<0 | 1, T>;
    arrayPrepend<T extends Any>(this: T, a1: Array$1<1, T>): Array$1<1, T>;
    arrayPrepend<T extends Any>(this: T, a1: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
    arrayPrepend<T extends Any>(this: T, a1: Array$1<number, T>): Array$1<0 | 1, T>;
    concat<T extends Any>(this: T): export_default$l<1>;
    concat<T extends Any>(this: T): export_default$l<0 | 1>;
    concat<T extends Any>(this: T): export_default$l<0 | 1>;
    count<T extends Any>(this: T): export_default$Z<1>;
    cumeDist<T extends Any>(this: T): export_default$14<0 | 1>;
    denseRank<T extends Any>(this: T): export_default$Z<0 | 1>;
    elemContainedByMultirange<T extends Any>(this: T, a1: export_default$1k<1, T>): export_default$1g<1>;
    elemContainedByMultirange<T extends Any>(this: T, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    elemContainedByMultirange<T extends Any>(this: T, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    elemContainedByRange<T extends Any>(this: T, a1: export_default$1i<1, T>): export_default$1g<1>;
    elemContainedByRange<T extends Any>(this: T, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    elemContainedByRange<T extends Any>(this: T, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    firstValue<T extends Any>(this: T): T;
    firstValue<T extends Any>(this: T): T;
    firstValue<T extends Any>(this: T): T;
    jsonAgg<T extends Any>(this: T): export_default$V<0 | 1>;
    jsonAggStrict<T extends Any>(this: T): export_default$V<0 | 1>;
    jsonBuildArray<T extends Any>(this: T): export_default$V<1>;
    jsonBuildArray<T extends Any>(this: T): export_default$V<0 | 1>;
    jsonBuildArray<T extends Any>(this: T): export_default$V<0 | 1>;
    jsonBuildObject<T extends Any>(this: T): export_default$V<1>;
    jsonBuildObject<T extends Any>(this: T): export_default$V<0 | 1>;
    jsonBuildObject<T extends Any>(this: T): export_default$V<0 | 1>;
    jsonObjectAgg<T extends Any>(this: T, a1: Any<number>): export_default$V<0 | 1>;
    jsonObjectAggStrict<T extends Any>(this: T, a1: Any<number>): export_default$V<0 | 1>;
    jsonObjectAggUnique<T extends Any>(this: T, a1: Any<number>): export_default$V<0 | 1>;
    jsonObjectAggUniqueStrict<T extends Any>(this: T, a1: Any<number>): export_default$V<0 | 1>;
    jsonPopulateRecord<T extends Any>(this: T, a1: export_default$V<1>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): T;
    jsonPopulateRecord<T extends Any>(this: T, a1: export_default$V<0 | 1>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): T;
    jsonPopulateRecord<T extends Any>(this: T, a1: export_default$V<number>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): T;
    jsonPopulateRecordset<T extends Any>(this: T, a1: export_default$V<1>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    jsonPopulateRecordset<T extends Any>(this: T, a1: export_default$V<0 | 1>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    jsonPopulateRecordset<T extends Any>(this: T, a1: export_default$V<number>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    jsonbAgg<T extends Any>(this: T): export_default$U<0 | 1>;
    jsonbAggStrict<T extends Any>(this: T): export_default$U<0 | 1>;
    jsonbBuildArray<T extends Any>(this: T): export_default$U<1>;
    jsonbBuildArray<T extends Any>(this: T): export_default$U<0 | 1>;
    jsonbBuildArray<T extends Any>(this: T): export_default$U<0 | 1>;
    jsonbBuildObject<T extends Any>(this: T): export_default$U<1>;
    jsonbBuildObject<T extends Any>(this: T): export_default$U<0 | 1>;
    jsonbBuildObject<T extends Any>(this: T): export_default$U<0 | 1>;
    jsonbObjectAgg<T extends Any>(this: T, a1: Any<number>): export_default$U<0 | 1>;
    jsonbObjectAggStrict<T extends Any>(this: T, a1: Any<number>): export_default$U<0 | 1>;
    jsonbObjectAggUnique<T extends Any>(this: T, a1: Any<number>): export_default$U<0 | 1>;
    jsonbObjectAggUniqueStrict<T extends Any>(this: T, a1: Any<number>): export_default$U<0 | 1>;
    jsonbPopulateRecord<T extends Any>(this: T, a1: export_default$U<1>): T;
    jsonbPopulateRecord<T extends Any>(this: T, a1: export_default$U<0 | 1>): T;
    jsonbPopulateRecord<T extends Any>(this: T, a1: export_default$U<number>): T;
    jsonbPopulateRecordValid<T extends Any>(this: T, a1: export_default$U<1>): export_default$1g<1>;
    jsonbPopulateRecordValid<T extends Any>(this: T, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    jsonbPopulateRecordValid<T extends Any>(this: T, a1: export_default$U<number>): export_default$1g<0 | 1>;
    jsonbPopulateRecordset<T extends Any>(this: T, a1: export_default$U<1>): Setof<{
        from: {};
    }>;
    jsonbPopulateRecordset<T extends Any>(this: T, a1: export_default$U<0 | 1>): Setof<{
        from: {};
    }>;
    jsonbPopulateRecordset<T extends Any>(this: T, a1: export_default$U<number>): Setof<{
        from: {};
    }>;
    lag<T extends Any>(this: T, a1: export_default$10<1>, a2: T): T;
    lag<T extends Any>(this: T, a1: export_default$10<0 | 1>, a2: T): T;
    lag<T extends Any>(this: T, a1: export_default$10<number>, a2: T): T;
    lag<T extends Any>(this: T): T;
    lag<T extends Any>(this: T): T;
    lag<T extends Any>(this: T): T;
    lag<T extends Any>(this: T, a1: export_default$10<1>): T;
    lag<T extends Any>(this: T, a1: export_default$10<0 | 1>): T;
    lag<T extends Any>(this: T, a1: export_default$10<number>): T;
    lastValue<T extends Any>(this: T): T;
    lastValue<T extends Any>(this: T): T;
    lastValue<T extends Any>(this: T): T;
    lead<T extends Any>(this: T, a1: export_default$10<1>, a2: T): T;
    lead<T extends Any>(this: T, a1: export_default$10<0 | 1>, a2: T): T;
    lead<T extends Any>(this: T, a1: export_default$10<number>, a2: T): T;
    lead<T extends Any>(this: T): T;
    lead<T extends Any>(this: T): T;
    lead<T extends Any>(this: T): T;
    lead<T extends Any>(this: T, a1: export_default$10<1>): T;
    lead<T extends Any>(this: T, a1: export_default$10<0 | 1>): T;
    lead<T extends Any>(this: T, a1: export_default$10<number>): T;
    mode<T extends Any>(this: T): T;
    nthValue<T extends Any>(this: T, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): T;
    nthValue<T extends Any>(this: T, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): T;
    nthValue<T extends Any>(this: T, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): T;
    numNonnulls<T extends Any>(this: T): export_default$10<1>;
    numNonnulls<T extends Any>(this: T): export_default$10<0 | 1>;
    numNonnulls<T extends Any>(this: T): export_default$10<0 | 1>;
    numNulls<T extends Any>(this: T): export_default$10<1>;
    numNulls<T extends Any>(this: T): export_default$10<0 | 1>;
    numNulls<T extends Any>(this: T): export_default$10<0 | 1>;
    percentRank<T extends Any>(this: T): export_default$14<0 | 1>;
    pgCollationFor<T extends Any>(this: T): export_default$l<1>;
    pgCollationFor<T extends Any>(this: T): export_default$l<0 | 1>;
    pgCollationFor<T extends Any>(this: T): export_default$l<0 | 1>;
    pgColumnCompression<T extends Any>(this: T): export_default$l<1>;
    pgColumnCompression<T extends Any>(this: T): export_default$l<0 | 1>;
    pgColumnCompression<T extends Any>(this: T): export_default$l<0 | 1>;
    pgColumnSize<T extends Any>(this: T): export_default$10<1>;
    pgColumnSize<T extends Any>(this: T): export_default$10<0 | 1>;
    pgColumnSize<T extends Any>(this: T): export_default$10<0 | 1>;
    pgColumnToastChunkId<T extends Any>(this: T): export_default$I<1>;
    pgColumnToastChunkId<T extends Any>(this: T): export_default$I<0 | 1>;
    pgColumnToastChunkId<T extends Any>(this: T): export_default$I<0 | 1>;
    pgTypeof<T extends Any>(this: T): export_default$m<1>;
    pgTypeof<T extends Any>(this: T): export_default$m<0 | 1>;
    pgTypeof<T extends Any>(this: T): export_default$m<0 | 1>;
    quoteLiteral<T extends Any>(this: T): export_default$l<1>;
    quoteLiteral<T extends Any>(this: T): export_default$l<0 | 1>;
    quoteLiteral<T extends Any>(this: T): export_default$l<0 | 1>;
    quoteNullable<T extends Any>(this: T): export_default$l<1>;
    quoteNullable<T extends Any>(this: T): export_default$l<0 | 1>;
    quoteNullable<T extends Any>(this: T): export_default$l<0 | 1>;
    rank<T extends Any>(this: T): export_default$Z<0 | 1>;
    toJson<T extends Any>(this: T): export_default$V<1>;
    toJson<T extends Any>(this: T): export_default$V<0 | 1>;
    toJson<T extends Any>(this: T): export_default$V<0 | 1>;
    toJsonb<T extends Any>(this: T): export_default$U<1>;
    toJsonb<T extends Any>(this: T): export_default$U<0 | 1>;
    toJsonb<T extends Any>(this: T): export_default$U<0 | 1>;
    widthBucket<T extends Any>(this: T, a1: Array$1<1, T>): export_default$10<1>;
    widthBucket<T extends Any>(this: T, a1: Array$1<0 | 1, T>): export_default$10<0 | 1>;
    widthBucket<T extends Any>(this: T, a1: Array$1<number, T>): export_default$10<0 | 1>;
    ["||"]<T extends Any>(this: T, a1: Array$1<1, T>): Array$1<1, T>;
    ["||"]<T extends Any>(this: T, a1: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
    ["||"]<T extends Any>(this: T, a1: Array$1<number, T>): Array$1<0 | 1, T>;
    ["<@"]<T extends Any>(this: T, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["<@"]<T extends Any>(this: T, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["<@"]<T extends Any>(this: T, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["<@"]<T extends Any>(this: T, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["<@"]<T extends Any>(this: T, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["<@"]<T extends Any>(this: T, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
}

type MessageName = 'parseComplete' | 'bindComplete' | 'closeComplete' | 'noData' | 'portalSuspended' | 'replicationStart' | 'emptyQuery' | 'copyDone' | 'copyData' | 'rowDescription' | 'parameterDescription' | 'parameterStatus' | 'backendKeyData' | 'notification' | 'readyForQuery' | 'commandComplete' | 'dataRow' | 'copyInResponse' | 'copyOutResponse' | 'authenticationOk' | 'authenticationMD5Password' | 'authenticationCleartextPassword' | 'authenticationSASL' | 'authenticationSASLContinue' | 'authenticationSASLFinal' | 'error' | 'notice';
type BackendMessage = {
    name: MessageName;
    length: number;
};
interface NoticeOrError {
    message: string | undefined;
    severity: string | undefined;
    code: string | undefined;
    detail: string | undefined;
    hint: string | undefined;
    position: string | undefined;
    internalPosition: string | undefined;
    internalQuery: string | undefined;
    where: string | undefined;
    schema: string | undefined;
    table: string | undefined;
    column: string | undefined;
    dataType: string | undefined;
    constraint: string | undefined;
    file: string | undefined;
    line: string | undefined;
    routine: string | undefined;
}
declare class NoticeMessage implements BackendMessage, NoticeOrError {
    readonly length: number;
    readonly message: string | undefined;
    constructor(length: number, message: string | undefined);
    readonly name = "notice";
    severity: string | undefined;
    code: string | undefined;
    detail: string | undefined;
    hint: string | undefined;
    position: string | undefined;
    internalPosition: string | undefined;
    internalQuery: string | undefined;
    where: string | undefined;
    schema: string | undefined;
    table: string | undefined;
    column: string | undefined;
    dataType: string | undefined;
    constraint: string | undefined;
    file: string | undefined;
    line: string | undefined;
    routine: string | undefined;
}

type IDBFS = Emscripten.FileSystemType & {
    quit: () => void;
    dbs: Record<string, IDBDatabase>;
};
type FS = typeof FS & {
    filesystems: {
        MEMFS: Emscripten.FileSystemType;
        NODEFS: Emscripten.FileSystemType;
        IDBFS: IDBFS;
    };
    quit: () => void;
};
interface PostgresMod extends Omit<EmscriptenModule, 'preInit' | 'preRun' | 'postRun'> {
    preInit: Array<{
        (mod: PostgresMod): void;
    }>;
    preRun: Array<{
        (mod: PostgresMod): void;
    }>;
    postRun: Array<{
        (mod: PostgresMod): void;
    }>;
    FS: FS;
    FD_BUFFER_MAX: number;
    WASM_PREFIX: string;
    INITIAL_MEMORY: number;
    pg_extensions: Record<string, Promise<Blob | null>>;
    _use_wire: (state: number) => void;
    _pgl_initdb: () => number;
    _pgl_backend: () => void;
    _pgl_shutdown: () => void;
    _get_buffer_size: (fd: number) => number;
    _get_buffer_addr: (fd: number) => number;
    _get_channel: () => number;
    _interactive_write: (msgLength: number) => void;
    _interactive_one: () => void;
    _interactive_read: () => number;
}

type DumpTarCompressionOptions = 'none' | 'gzip' | 'auto';
/**
 * Filesystem interface.
 * All virtual filesystems that are compatible with PGlite must implement
 * this interface.
 */
interface Filesystem {
    /**
     * Initiate the filesystem and return the options to pass to the emscripten module.
     */
    init(pg: PGlite, emscriptenOptions: Partial<PostgresMod>): Promise<{
        emscriptenOpts: Partial<PostgresMod>;
    }>;
    /**
     * Sync the filesystem to any underlying storage.
     */
    syncToFs(relaxedDurability?: boolean): Promise<void>;
    /**
     * Sync the filesystem from any underlying storage.
     */
    initialSyncFs(): Promise<void>;
    /**
     * Dump the PGDATA dir from the filesystem to a gziped tarball.
     */
    dumpTar(dbname: string, compression?: DumpTarCompressionOptions): Promise<File | Blob>;
    /**
     * Close the filesystem.
     */
    closeFs(): Promise<void>;
}
type DebugLevel = 0 | 1 | 2 | 3 | 4 | 5;
type RowMode = 'array' | 'object';
interface ParserOptions {
    [pgType: number]: (value: string) => any;
}
interface SerializerOptions {
    [pgType: number]: (value: any) => string;
}
interface QueryOptions {
    rowMode?: RowMode;
    parsers?: ParserOptions;
    serializers?: SerializerOptions;
    blob?: Blob | File;
    onNotice?: (notice: NoticeMessage) => void;
    paramTypes?: number[];
}
interface ExecProtocolOptions {
    syncToFs?: boolean;
    throwOnError?: boolean;
    onNotice?: (notice: NoticeMessage) => void;
    dataTransferContainer?: DataTransferContainer;
}
interface ExtensionSetupResult<TNamespace = any> {
    emscriptenOpts?: any;
    namespaceObj?: TNamespace;
    bundlePath?: URL;
    init?: () => Promise<void>;
    close?: () => Promise<void>;
}
type ExtensionSetup<TNamespace = any> = (pg: PGliteInterface, emscriptenOpts: any, clientOnly?: boolean) => Promise<ExtensionSetupResult<TNamespace>>;
interface Extension<TNamespace = any> {
    name: string;
    setup: ExtensionSetup<TNamespace>;
}
type ExtensionNamespace<T> = T extends Extension<infer TNamespace> ? TNamespace : any;
type Extensions = {
    [namespace: string]: Extension | URL;
};
type InitializedExtensions<TExtensions extends Extensions = Extensions> = {
    [K in keyof TExtensions]: ExtensionNamespace<TExtensions[K]>;
};
interface ExecProtocolResult {
    messages: BackendMessage[];
    data: Uint8Array;
}
type DataTransferContainer = 'cma' | 'file';
interface PGliteOptions<TExtensions extends Extensions = Extensions> {
    dataDir?: string;
    username?: string;
    database?: string;
    fs?: Filesystem;
    debug?: DebugLevel;
    relaxedDurability?: boolean;
    extensions?: TExtensions;
    loadDataDir?: Blob | File;
    initialMemory?: number;
    wasmModule?: WebAssembly.Module;
    fsBundle?: Blob | File;
    parsers?: ParserOptions;
    serializers?: SerializerOptions;
    defaultDataTransferContainer?: DataTransferContainer;
}
type PGliteInterface<T extends Extensions = Extensions> = InitializedExtensions<T> & {
    readonly waitReady: Promise<void>;
    readonly debug: DebugLevel;
    readonly ready: boolean;
    readonly closed: boolean;
    close(): Promise<void>;
    query<T>(query: string, params?: any[], options?: QueryOptions): Promise<Results<T>>;
    sql<T>(sqlStrings: TemplateStringsArray, ...params: any[]): Promise<Results<T>>;
    exec(query: string, options?: QueryOptions): Promise<Array<Results>>;
    describeQuery(query: string): Promise<DescribeQueryResult>;
    transaction<T>(callback: (tx: Transaction) => Promise<T>): Promise<T>;
    execProtocolRaw(message: Uint8Array, options?: ExecProtocolOptions): Promise<Uint8Array>;
    execProtocol(message: Uint8Array, options?: ExecProtocolOptions): Promise<ExecProtocolResult>;
    runExclusive<T>(fn: () => Promise<T>): Promise<T>;
    listen(channel: string, callback: (payload: string) => void, tx?: Transaction): Promise<(tx?: Transaction) => Promise<void>>;
    unlisten(channel: string, callback?: (payload: string) => void, tx?: Transaction): Promise<void>;
    onNotification(callback: (channel: string, payload: string) => void): () => void;
    offNotification(callback: (channel: string, payload: string) => void): void;
    dumpDataDir(compression?: DumpTarCompressionOptions): Promise<File | Blob>;
    refreshArrayTypes(): Promise<void>;
};
type PGliteInterfaceExtensions<E> = E extends Extensions ? {
    [K in keyof E]: E[K] extends Extension ? Awaited<ReturnType<E[K]['setup']>>['namespaceObj'] extends infer N ? N extends undefined | null | void ? never : N : never : never;
} : Record<string, never>;
type Row<T = {
    [key: string]: any;
}> = T;
type Results<T = {
    [key: string]: any;
}> = {
    rows: Row<T>[];
    affectedRows?: number;
    fields: {
        name: string;
        dataTypeID: number;
    }[];
    blob?: Blob;
};
interface Transaction {
    query<T>(query: string, params?: any[], options?: QueryOptions): Promise<Results<T>>;
    sql<T>(sqlStrings: TemplateStringsArray, ...params: any[]): Promise<Results<T>>;
    exec(query: string, options?: QueryOptions): Promise<Array<Results>>;
    rollback(): Promise<void>;
    listen(channel: string, callback: (payload: string) => void): Promise<(tx?: Transaction) => Promise<void>>;
    get closed(): boolean;
}
type DescribeQueryResult = {
    queryParams: {
        dataTypeID: number;
        serializer: Serializer;
    }[];
    resultFields: {
        name: string;
        dataTypeID: number;
        parser: Parser;
    }[];
};
type Parser = (x: string, typeId?: number) => any;
type Serializer = (x: any) => string;

declare abstract class BasePGlite implements Pick<PGliteInterface, 'query' | 'sql' | 'exec' | 'transaction'> {
    #private;
    serializers: Record<number | string, Serializer>;
    parsers: Record<number | string, Parser>;
    abstract debug: DebugLevel;
    /**
     * Execute a postgres wire protocol message
     * @param message The postgres wire protocol message to execute
     * @returns The result of the query
     */
    abstract execProtocol(message: Uint8Array, { syncToFs, onNotice }: ExecProtocolOptions): Promise<ExecProtocolResult>;
    /**
     * Execute a postgres wire protocol message directly without wrapping the response.
     * Only use if `execProtocol()` doesn't suite your needs.
     *
     * **Warning:** This bypasses PGlite's protocol wrappers that manage error/notice messages,
     * transactions, and notification listeners. Only use if you need to bypass these wrappers and
     * don't intend to use the above features.
     *
     * @param message The postgres wire protocol message to execute
     * @returns The direct message data response produced by Postgres
     */
    abstract execProtocolRaw(message: Uint8Array, { syncToFs, dataTransferContainer }: ExecProtocolOptions): Promise<Uint8Array>;
    /**
     * Sync the database to the filesystem
     * @returns Promise that resolves when the database is synced to the filesystem
     */
    abstract syncToFs(): Promise<void>;
    /**
     * Handle a file attached to the current query
     * @param file The file to handle
     */
    abstract _handleBlob(blob?: File | Blob): Promise<void>;
    /**
     * Get the written file
     */
    abstract _getWrittenBlob(): Promise<File | Blob | undefined>;
    /**
     * Cleanup the current file
     */
    abstract _cleanupBlob(): Promise<void>;
    abstract _checkReady(): Promise<void>;
    abstract _runExclusiveQuery<T>(fn: () => Promise<T>): Promise<T>;
    abstract _runExclusiveTransaction<T>(fn: () => Promise<T>): Promise<T>;
    /**
     * Listen for notifications on a channel
     */
    abstract listen(channel: string, callback: (payload: string) => void, tx?: Transaction): Promise<(tx?: Transaction) => Promise<void>>;
    /**
     * Initialize the array types
     * The oid if the type of an element and the typarray is the oid of the type of the
     * array.
     * We extract these from the databaes then create the serializers/parsers for
     * each type.
     * This should be called at the end of #init() in the implementing class.
     */
    _initArrayTypes({ force }?: {
        force?: boolean | undefined;
    }): Promise<void>;
    /**
     * Re-syncs the array types from the database
     * This is useful if you add a new type to the database and want to use it, otherwise pglite won't recognize it.
     */
    refreshArrayTypes(): Promise<void>;
    /**
     * Execute a single SQL statement
     * This uses the "Extended Query" postgres wire protocol message.
     * @param query The query to execute
     * @param params Optional parameters for the query
     * @returns The result of the query
     */
    query<T>(query: string, params?: any[], options?: QueryOptions): Promise<Results<T>>;
    /**
     * Execute a single SQL statement like with {@link PGlite.query}, but with a
     * templated statement where template values will be treated as parameters.
     *
     * You can use helpers from `/template` to further format the query with
     * identifiers, raw SQL, and nested statements.
     *
     * This uses the "Extended Query" postgres wire protocol message.
     *
     * @param query The query to execute with parameters as template values
     * @returns The result of the query
     *
     * @example
     * ```ts
     * const results = await db.sql`SELECT * FROM ${identifier`foo`} WHERE id = ${id}`
     * ```
     */
    sql<T>(sqlStrings: TemplateStringsArray, ...params: any[]): Promise<Results<T>>;
    /**
     * Execute a SQL query, this can have multiple statements.
     * This uses the "Simple Query" postgres wire protocol message.
     * @param query The query to execute
     * @returns The result of the query
     */
    exec(query: string, options?: QueryOptions): Promise<Array<Results>>;
    /**
     * Describe a query
     * @param query The query to describe
     * @returns A description of the result types for the query
     */
    describeQuery(query: string, options?: QueryOptions): Promise<DescribeQueryResult>;
    /**
     * Execute a transaction
     * @param callback A callback function that takes a transaction object
     * @returns The result of the transaction
     */
    transaction<T>(callback: (tx: Transaction) => Promise<T>): Promise<T>;
    /**
     * Run a function exclusively, no other transactions or queries will be allowed
     * while the function is running.
     * This is useful when working with the execProtocol methods as they are not blocked,
     * and do not block the locks used by transactions and queries.
     * @param fn The function to run
     * @returns The result of the function
     */
    runExclusive<T>(fn: () => Promise<T>): Promise<T>;
}

declare class PGlite extends BasePGlite implements PGliteInterface, AsyncDisposable {
    #private;
    fs?: Filesystem;
    protected mod?: PostgresMod;
    readonly dataDir?: string;
    readonly waitReady: Promise<void>;
    readonly debug: DebugLevel;
    /**
     * Create a new PGlite instance
     * @param dataDir The directory to store the database files
     *                Prefix with idb:// to use indexeddb filesystem in the browser
     *                Use memory:// to use in-memory filesystem
     * @param options PGlite options
     */
    constructor(dataDir?: string, options?: PGliteOptions);
    /**
     * Create a new PGlite instance
     * @param options PGlite options including the data directory
     */
    constructor(options?: PGliteOptions);
    /**
     * Create a new PGlite instance with extensions on the Typescript interface
     * (The main constructor does enable extensions, however due to the limitations
     * of Typescript, the extensions are not available on the instance interface)
     * @param options PGlite options including the data directory
     * @returns A promise that resolves to the PGlite instance when it's ready.
     */
    static create<O extends PGliteOptions>(options?: O): Promise<PGlite & PGliteInterfaceExtensions<O['extensions']>>;
    /**
     * Create a new PGlite instance with extensions on the Typescript interface
     * (The main constructor does enable extensions, however due to the limitations
     * of Typescript, the extensions are not available on the instance interface)
     * @param dataDir The directory to store the database files
     *                Prefix with idb:// to use indexeddb filesystem in the browser
     *                Use memory:// to use in-memory filesystem
     * @param options PGlite options
     * @returns A promise that resolves to the PGlite instance when it's ready.
     */
    static create<O extends PGliteOptions>(dataDir?: string, options?: O): Promise<PGlite & PGliteInterfaceExtensions<O['extensions']>>;
    /**
     * The Postgres Emscripten Module
     */
    get Module(): PostgresMod;
    /**
     * The ready state of the database
     */
    get ready(): boolean;
    /**
     * The closed state of the database
     */
    get closed(): boolean;
    /**
     * Close the database
     * @returns A promise that resolves when the database is closed
     */
    close(): Promise<void>;
    /**
     * Close the database when the object exits scope
     * Stage 3 ECMAScript Explicit Resource Management
     * https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html#using-declarations-and-explicit-resource-management
     */
    [Symbol.asyncDispose](): Promise<void>;
    /**
     * Handle a file attached to the current query
     * @param file The file to handle
     */
    _handleBlob(blob?: File | Blob): Promise<void>;
    /**
     * Cleanup the current file
     */
    _cleanupBlob(): Promise<void>;
    /**
     * Get the written blob from the current query
     * @returns The written blob
     */
    _getWrittenBlob(): Promise<Blob | undefined>;
    /**
     * Wait for the database to be ready
     */
    _checkReady(): Promise<void>;
    /**
     * Execute a postgres wire protocol synchronously
     * @param message The postgres wire protocol message to execute
     * @returns The direct message data response produced by Postgres
     */
    execProtocolRawSync(message: Uint8Array, options?: {
        dataTransferContainer?: DataTransferContainer;
    }): Uint8Array;
    /**
     * Execute a postgres wire protocol message directly without wrapping the response.
     * Only use if `execProtocol()` doesn't suite your needs.
     *
     * **Warning:** This bypasses PGlite's protocol wrappers that manage error/notice messages,
     * transactions, and notification listeners. Only use if you need to bypass these wrappers and
     * don't intend to use the above features.
     *
     * @param message The postgres wire protocol message to execute
     * @returns The direct message data response produced by Postgres
     */
    execProtocolRaw(message: Uint8Array, { syncToFs, dataTransferContainer }?: ExecProtocolOptions): Promise<Uint8Array>;
    /**
     * Execute a postgres wire protocol message
     * @param message The postgres wire protocol message to execute
     * @returns The result of the query
     */
    execProtocol(message: Uint8Array, { syncToFs, throwOnError, onNotice, }?: ExecProtocolOptions): Promise<ExecProtocolResult>;
    /**
     * Check if the database is in a transaction
     * @returns True if the database is in a transaction, false otherwise
     */
    isInTransaction(): boolean;
    /**
     * Perform any sync operations implemented by the filesystem, this is
     * run after every query to ensure that the filesystem is synced.
     */
    syncToFs(): Promise<void>;
    /**
     * Listen for a notification
     * @param channel The channel to listen on
     * @param callback The callback to call when a notification is received
     */
    listen(channel: string, callback: (payload: string) => void, tx?: Transaction): Promise<(tx?: Transaction) => Promise<void>>;
    /**
     * Stop listening for a notification
     * @param channel The channel to stop listening on
     * @param callback The callback to remove
     */
    unlisten(channel: string, callback?: (payload: string) => void, tx?: Transaction): Promise<void>;
    /**
     * Listen to notifications
     * @param callback The callback to call when a notification is received
     */
    onNotification(callback: (channel: string, payload: string) => void): () => void;
    /**
     * Stop listening to notifications
     * @param callback The callback to remove
     */
    offNotification(callback: (channel: string, payload: string) => void): void;
    /**
     * Dump the PGDATA dir from the filesystem to a gziped tarball.
     * @param compression The compression options to use - 'gzip', 'auto', 'none'
     * @returns The tarball as a File object where available, and fallback to a Blob
     */
    dumpDataDir(compression?: DumpTarCompressionOptions): Promise<File | Blob>;
    /**
     * Run a function in a mutex that's exclusive to queries
     * @param fn The query to run
     * @returns The result of the query
     */
    _runExclusiveQuery<T>(fn: () => Promise<T>): Promise<T>;
    /**
     * Run a function in a mutex that's exclusive to transactions
     * @param fn The function to run
     * @returns The result of the function
     */
    _runExclusiveTransaction<T>(fn: () => Promise<T>): Promise<T>;
    clone(): Promise<PGliteInterface>;
    _runExclusiveListen<T>(fn: () => Promise<T>): Promise<T>;
}

type Typegres = Kysely<{}>;
type DatabaseConfig = {
    type: "pg";
    PoolClass: typeof Pool;
    config?: PoolConfig;
} | {
    type: "pglite";
    PGliteClass: typeof PGlite;
    options?: PGliteOptions;
};
declare const db: (dbConfig: DatabaseConfig) => Promise<Typegres>;

type ClassType$1<T> = {
    typeString(): string | undefined;
    subtype(): UseSubtype | undefined;
    parse(v: string): unknown;
    prototype: T;
    "new"(v: Expression): T;
    "new"(v: unknown): T;
};
type Schema = {
    [key in string]: ClassType$1<Any<unknown, 0 | 1>>;
};
type UseSubtype = {
    subtype: typeof Any | Schema;
    withSubtype: (subtype: typeof Any | Schema) => typeof Any;
};
declare class Any<R = unknown, N extends number = number> extends export_default$1n {
    v: unknown | null | Expression;
    constructor(v: unknown | null | Expression);
    static new(v: null): Any<unknown, 0>;
    static new(v: Expression): Any<unknown, 0 | 1>;
    static new(v: unknown): Any<unknown, 1>;
    asAggregate(): Any<R, number> | undefined;
    static typeString(): string | undefined;
    static subtype(): UseSubtype | undefined;
    toExpression(): Expression;
    serializeParamTypes: unknown | undefined;
    resultType: R | undefined;
    nullability: N | undefined;
    static parse(v: string): unknown;
    execute(db: Typegres): {
        then(resolve: (result: N extends 0 ? null : N extends 1 ? R : R | null) => void, reject: (err: unknown) => void): void;
    };
    getClass(this: this): typeof Any;
}

type Parsed$1i = string;
type SerializeParam$1g = string;
declare class export_default$1m<N extends number> extends Any<Parsed$1i, N> {
    static new(v: SerializeParam$1g): export_default$1m<1>;
    static new(v: null): export_default$1m<0>;
    static new(v: Expression): export_default$1m<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1m<number> | undefined;
    aclitemeq(this: export_default$1m<1>, a1: export_default$1m<1>): export_default$1g<1>;
    aclitemeq(this: export_default$1m<0 | 1>, a1: export_default$1m<0 | 1>): export_default$1g<0 | 1>;
    aclitemeq(this: export_default$1m<number>, a1: export_default$1m<number>): export_default$1g<0 | 1>;
    hashAclitem(this: export_default$1m<1>): export_default$10<1>;
    hashAclitem(this: export_default$1m<0 | 1>): export_default$10<0 | 1>;
    hashAclitem(this: export_default$1m<number>): export_default$10<0 | 1>;
    hashAclitemExtended(this: export_default$1m<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashAclitemExtended(this: export_default$1m<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashAclitemExtended(this: export_default$1m<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["="](this: export_default$1m<1>, a1: export_default$1m<1>): export_default$1g<1>;
    ["="](this: export_default$1m<0 | 1>, a1: export_default$1m<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$1m<number>, a1: export_default$1m<number>): export_default$1g<0 | 1>;
}

type Parsed$1h = string;
declare class export_default$1l<N extends number> extends Any<Parsed$1h, N> {
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1l<number> | undefined;
    enumCmp<T extends this>(this: T, a1: T | Input<T>): export_default$10<1>;
    enumCmp<T extends this>(this: T, a1: T | Input<T>): export_default$10<0 | 1>;
    enumCmp<T extends this>(this: T, a1: T | Input<T>): export_default$10<0 | 1>;
    enumEq<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    enumEq<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumEq<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumFirst<T extends this>(this: T): T;
    enumFirst<T extends this>(this: T): T;
    enumFirst<T extends this>(this: T): T;
    enumGe<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    enumGe<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumGe<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumGt<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    enumGt<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumGt<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumLarger<T extends this>(this: T, a1: T | Input<T>): T;
    enumLarger<T extends this>(this: T, a1: T | Input<T>): T;
    enumLarger<T extends this>(this: T, a1: T | Input<T>): T;
    enumLast<T extends this>(this: T): T;
    enumLast<T extends this>(this: T): T;
    enumLast<T extends this>(this: T): T;
    enumLe<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    enumLe<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumLe<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumLt<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    enumLt<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumLt<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumNe<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    enumNe<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumNe<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    enumRange<T extends this>(this: T): Array$1<1, T>;
    enumRange<T extends this>(this: T): Array$1<0 | 1, T>;
    enumRange<T extends this>(this: T): Array$1<0 | 1, T>;
    enumRange<T extends this>(this: T, a1: T | Input<T>): Array$1<1, T>;
    enumRange<T extends this>(this: T, a1: T | Input<T>): Array$1<0 | 1, T>;
    enumRange<T extends this>(this: T, a1: T | Input<T>): Array$1<0 | 1, T>;
    enumSmaller<T extends this>(this: T, a1: T | Input<T>): T;
    enumSmaller<T extends this>(this: T, a1: T | Input<T>): T;
    enumSmaller<T extends this>(this: T, a1: T | Input<T>): T;
    hashenum<T extends this>(this: T): export_default$10<1>;
    hashenum<T extends this>(this: T): export_default$10<0 | 1>;
    hashenum<T extends this>(this: T): export_default$10<0 | 1>;
    hashenumextended<T extends this>(this: T, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashenumextended<T extends this>(this: T, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashenumextended<T extends this>(this: T, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    max<T extends this>(this: T): T;
    ["="]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    ["="]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["="]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    [">="]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    [">="]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    [">="]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    [">"]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    [">"]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    [">"]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["<="]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    ["<="]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["<="]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["<"]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    ["<"]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["<"]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["<>"]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<1>;
    ["<>"]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["<>"]<T extends this>(this: T, a1: T | Input<T>): export_default$1g<0 | 1>;
}

declare class export_default$1k<N extends number, T extends Any> extends Any<unknown, N> {
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1k<number, T> | undefined;
    hashMultirange(this: export_default$1k<1, T>): export_default$10<1>;
    hashMultirange(this: export_default$1k<0 | 1, T>): export_default$10<0 | 1>;
    hashMultirange(this: export_default$1k<number, T>): export_default$10<0 | 1>;
    hashMultirangeExtended(this: export_default$1k<1, T>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashMultirangeExtended(this: export_default$1k<0 | 1, T>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashMultirangeExtended(this: export_default$1k<number, T>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    isempty(this: export_default$1k<1, T>): export_default$1g<1>;
    isempty(this: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    isempty(this: export_default$1k<number, T>): export_default$1g<0 | 1>;
    lower(this: export_default$1k<1, T>): T;
    lower(this: export_default$1k<0 | 1, T>): T;
    lower(this: export_default$1k<number, T>): T;
    lowerInc(this: export_default$1k<1, T>): export_default$1g<1>;
    lowerInc(this: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    lowerInc(this: export_default$1k<number, T>): export_default$1g<0 | 1>;
    lowerInf(this: export_default$1k<1, T>): export_default$1g<1>;
    lowerInf(this: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    lowerInf(this: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeAdjacentMultirange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeAdjacentMultirange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeAdjacentMultirange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeAdjacentRange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    multirangeAdjacentRange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeAdjacentRange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    multirangeAfterMultirange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeAfterMultirange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeAfterMultirange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeAfterRange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    multirangeAfterRange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeAfterRange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    multirangeBeforeMultirange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeBeforeMultirange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeBeforeMultirange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeBeforeRange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    multirangeBeforeRange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeBeforeRange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    multirangeCmp<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$10<1>;
    multirangeCmp<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$10<0 | 1>;
    multirangeCmp<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$10<0 | 1>;
    multirangeContainedByMultirange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeContainedByMultirange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeContainedByMultirange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeContainedByRange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    multirangeContainedByRange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeContainedByRange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    multirangeContainsElem<T extends Any>(this: export_default$1k<1, T>, a1: T | Input<T>): export_default$1g<1>;
    multirangeContainsElem<T extends Any>(this: export_default$1k<0 | 1, T>, a1: T | Input<T>): export_default$1g<0 | 1>;
    multirangeContainsElem<T extends Any>(this: export_default$1k<number, T>, a1: T | Input<T>): export_default$1g<0 | 1>;
    multirangeContainsMultirange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeContainsMultirange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeContainsMultirange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeContainsRange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    multirangeContainsRange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeContainsRange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    multirangeEq<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeEq<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeEq<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeGe<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeGe<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeGe<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeGt<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeGt<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeGt<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeIntersect<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1k<1, T>;
    multirangeIntersect<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
    multirangeIntersect<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
    multirangeIntersectAggTransfn<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1k<1, T>;
    multirangeIntersectAggTransfn<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
    multirangeIntersectAggTransfn<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
    multirangeLe<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeLe<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeLe<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeLt<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeLt<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeLt<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeMinus<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1k<1, T>;
    multirangeMinus<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
    multirangeMinus<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
    multirangeNe<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeNe<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeNe<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeOverlapsMultirange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeOverlapsMultirange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeOverlapsMultirange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeOverlapsRange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    multirangeOverlapsRange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeOverlapsRange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    multirangeOverleftMultirange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeOverleftMultirange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeOverleftMultirange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeOverleftRange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    multirangeOverleftRange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeOverleftRange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    multirangeOverrightMultirange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    multirangeOverrightMultirange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeOverrightMultirange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    multirangeOverrightRange<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    multirangeOverrightRange<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    multirangeOverrightRange<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    multirangeUnion<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1k<1, T>;
    multirangeUnion<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
    multirangeUnion<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
    rangeAgg(this: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
    rangeIntersectAgg(this: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
    rangeMerge(this: export_default$1k<1, T>): export_default$1i<1, T>;
    rangeMerge(this: export_default$1k<0 | 1, T>): export_default$1i<0 | 1, T>;
    rangeMerge(this: export_default$1k<number, T>): export_default$1i<0 | 1, T>;
    unnest(this: export_default$1k<1, T>): Setof<{
        from: {};
    }>;
    unnest(this: export_default$1k<0 | 1, T>): Setof<{
        from: {};
    }>;
    unnest(this: export_default$1k<number, T>): Setof<{
        from: {};
    }>;
    upper(this: export_default$1k<1, T>): T;
    upper(this: export_default$1k<0 | 1, T>): T;
    upper(this: export_default$1k<number, T>): T;
    upperInc(this: export_default$1k<1, T>): export_default$1g<1>;
    upperInc(this: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    upperInc(this: export_default$1k<number, T>): export_default$1g<0 | 1>;
    upperInf(this: export_default$1k<1, T>): export_default$1g<1>;
    upperInf(this: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    upperInf(this: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["-|-"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["-|-"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["-|-"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["-|-"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["-|-"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["-|-"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    [">>"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    [">>"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    [">>"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    [">>"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    [">>"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    [">>"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["<<"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["<<"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["<<"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["<<"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["<<"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["<<"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1k<1, T>, a1: T | Input<T>): export_default$1g<1>;
    ["@>"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1k<number, T>, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["@>"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["@>"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["="]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["="]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["="]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    [">="]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    [">="]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    [">="]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    [">"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    [">"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    [">"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["*"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1k<1, T>;
    ["*"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
    ["*"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
    ["<="]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["<="]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["<="]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["<"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["<"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["<"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["-"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1k<1, T>;
    ["-"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
    ["-"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
    ["<>"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["<>"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["<>"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["&&"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["&&"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["&<"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["&<"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["&<"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["&<"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["&<"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["&<"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["&>"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["&>"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["&>"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["&>"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["&>"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["&>"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["+"]<T extends Any>(this: export_default$1k<1, T>, a1: export_default$1k<1, T>): export_default$1k<1, T>;
    ["+"]<T extends Any>(this: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
    ["+"]<T extends Any>(this: export_default$1k<number, T>, a1: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
}

type Parsed$1g = string;
declare class export_default$1j<N extends number> extends Any<Parsed$1g, N> {
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1j<number> | undefined;
    anytextcat<T extends this>(this: T, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    anytextcat<T extends this>(this: T, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    anytextcat<T extends this>(this: T, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    arrayAgg<T extends this>(this: T): Array$1<0 | 1, T>;
}

declare class export_default$1i<N extends number, T extends Any> extends Any<unknown, N> {
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1i<number, T> | undefined;
    hashRange(this: export_default$1i<1, T>): export_default$10<1>;
    hashRange(this: export_default$1i<0 | 1, T>): export_default$10<0 | 1>;
    hashRange(this: export_default$1i<number, T>): export_default$10<0 | 1>;
    hashRangeExtended(this: export_default$1i<1, T>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashRangeExtended(this: export_default$1i<0 | 1, T>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashRangeExtended(this: export_default$1i<number, T>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    isempty(this: export_default$1i<1, T>): export_default$1g<1>;
    isempty(this: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    isempty(this: export_default$1i<number, T>): export_default$1g<0 | 1>;
    lower(this: export_default$1i<1, T>): T;
    lower(this: export_default$1i<0 | 1, T>): T;
    lower(this: export_default$1i<number, T>): T;
    lowerInc(this: export_default$1i<1, T>): export_default$1g<1>;
    lowerInc(this: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    lowerInc(this: export_default$1i<number, T>): export_default$1g<0 | 1>;
    lowerInf(this: export_default$1i<1, T>): export_default$1g<1>;
    lowerInf(this: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    lowerInf(this: export_default$1i<number, T>): export_default$1g<0 | 1>;
    multirange(this: export_default$1i<1, T>): export_default$1k<1, T>;
    multirange(this: export_default$1i<0 | 1, T>): export_default$1k<0 | 1, T>;
    multirange(this: export_default$1i<number, T>): export_default$1k<0 | 1, T>;
    rangeAdjacent<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeAdjacent<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeAdjacent<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeAdjacentMultirange<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    rangeAdjacentMultirange<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    rangeAdjacentMultirange<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    rangeAfter<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeAfter<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeAfter<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeAfterMultirange<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    rangeAfterMultirange<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    rangeAfterMultirange<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    rangeAgg(this: export_default$1i<number, T>): export_default$1k<0 | 1, T>;
    rangeBefore<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeBefore<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeBefore<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeBeforeMultirange<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    rangeBeforeMultirange<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    rangeBeforeMultirange<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    rangeCmp<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$10<1>;
    rangeCmp<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$10<0 | 1>;
    rangeCmp<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$10<0 | 1>;
    rangeContainedBy<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeContainedBy<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeContainedBy<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeContainedByMultirange<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    rangeContainedByMultirange<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    rangeContainedByMultirange<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    rangeContains<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeContains<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeContains<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeContainsElem<T extends Any>(this: export_default$1i<1, T>, a1: T | Input<T>): export_default$1g<1>;
    rangeContainsElem<T extends Any>(this: export_default$1i<0 | 1, T>, a1: T | Input<T>): export_default$1g<0 | 1>;
    rangeContainsElem<T extends Any>(this: export_default$1i<number, T>, a1: T | Input<T>): export_default$1g<0 | 1>;
    rangeContainsMultirange<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    rangeContainsMultirange<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    rangeContainsMultirange<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    rangeEq<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeEq<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeEq<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeGe<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeGe<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeGe<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeGt<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeGt<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeGt<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeIntersect<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1i<1, T>;
    rangeIntersect<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
    rangeIntersect<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
    rangeIntersectAgg(this: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
    rangeIntersectAggTransfn<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1i<1, T>;
    rangeIntersectAggTransfn<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
    rangeIntersectAggTransfn<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
    rangeLe<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeLe<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeLe<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeLt<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeLt<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeLt<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeMerge<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1i<1, T>;
    rangeMerge<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
    rangeMerge<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
    rangeMinus<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1i<1, T>;
    rangeMinus<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
    rangeMinus<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
    rangeNe<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeNe<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeNe<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeOverlaps<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeOverlaps<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeOverlaps<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeOverlapsMultirange<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    rangeOverlapsMultirange<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    rangeOverlapsMultirange<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    rangeOverleft<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeOverleft<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeOverleft<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeOverleftMultirange<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    rangeOverleftMultirange<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    rangeOverleftMultirange<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    rangeOverright<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    rangeOverright<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    rangeOverright<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    rangeOverrightMultirange<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    rangeOverrightMultirange<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    rangeOverrightMultirange<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    rangeUnion<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1i<1, T>;
    rangeUnion<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
    rangeUnion<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
    upper(this: export_default$1i<1, T>): T;
    upper(this: export_default$1i<0 | 1, T>): T;
    upper(this: export_default$1i<number, T>): T;
    upperInc(this: export_default$1i<1, T>): export_default$1g<1>;
    upperInc(this: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    upperInc(this: export_default$1i<number, T>): export_default$1g<0 | 1>;
    upperInf(this: export_default$1i<1, T>): export_default$1g<1>;
    upperInf(this: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    upperInf(this: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["-|-"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["-|-"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["-|-"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["-|-"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["-|-"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["-|-"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    [">>"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    [">>"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    [">>"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    [">>"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    [">>"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    [">>"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["<<"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["<<"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["<<"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["<<"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["<<"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["<<"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["@>"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1i<1, T>, a1: T | Input<T>): export_default$1g<1>;
    ["@>"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1i<number, T>, a1: T | Input<T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["@>"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["="]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["="]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["="]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    [">="]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    [">="]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    [">="]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    [">"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    [">"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    [">"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["*"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1i<1, T>;
    ["*"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
    ["*"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
    ["<="]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["<="]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["<="]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["<"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["<"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["<"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["-"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1i<1, T>;
    ["-"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
    ["-"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
    ["<>"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["<>"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["<>"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["&&"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["&&"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["&<"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["&<"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["&<"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["&<"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["&<"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["&<"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["&>"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1g<1>;
    ["&>"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
    ["&>"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1g<0 | 1>;
    ["&>"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1k<1, T>): export_default$1g<1>;
    ["&>"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
    ["&>"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1k<number, T>): export_default$1g<0 | 1>;
    ["+"]<T extends Any>(this: export_default$1i<1, T>, a1: export_default$1i<1, T>): export_default$1i<1, T>;
    ["+"]<T extends Any>(this: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
    ["+"]<T extends Any>(this: export_default$1i<number, T>, a1: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
}

type Parsed$1f = string;
type SerializeParam$1f = string;
declare class export_default$1h<N extends number> extends Any<Parsed$1f, N> {
    static new(v: SerializeParam$1f): export_default$1h<1>;
    static new(v: null): export_default$1h<0>;
    static new(v: Expression): export_default$1h<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1h<number> | undefined;
    bit(this: export_default$1h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1h<1>;
    bit(this: export_default$1h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1h<0 | 1>;
    bit(this: export_default$1h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1h<0 | 1>;
    bitAnd(this: export_default$1h<number>): export_default$1h<0 | 1>;
    bitCount(this: export_default$1h<1>): export_default$Z<1>;
    bitCount(this: export_default$1h<0 | 1>): export_default$Z<0 | 1>;
    bitCount(this: export_default$1h<number>): export_default$Z<0 | 1>;
    bitLength(this: export_default$1h<1>): export_default$10<1>;
    bitLength(this: export_default$1h<0 | 1>): export_default$10<0 | 1>;
    bitLength(this: export_default$1h<number>): export_default$10<0 | 1>;
    bitOr(this: export_default$1h<number>): export_default$1h<0 | 1>;
    bitXor(this: export_default$1h<number>): export_default$1h<0 | 1>;
    bitand(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1h<1>;
    bitand(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
    bitand(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1h<0 | 1>;
    bitcmp(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$10<1>;
    bitcmp(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$10<0 | 1>;
    bitcmp(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$10<0 | 1>;
    biteq(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    biteq(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    biteq(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    bitge(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    bitge(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    bitge(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    bitgt(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    bitgt(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    bitgt(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    bitle(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    bitle(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    bitle(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    bitlt(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    bitlt(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    bitlt(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    bitne(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    bitne(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    bitne(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    bitnot(this: export_default$1h<1>): export_default$1h<1>;
    bitnot(this: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
    bitnot(this: export_default$1h<number>): export_default$1h<0 | 1>;
    bitor(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1h<1>;
    bitor(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
    bitor(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1h<0 | 1>;
    bitshiftleft(this: export_default$1h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    bitshiftleft(this: export_default$1h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    bitshiftleft(this: export_default$1h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    bitshiftright(this: export_default$1h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    bitshiftright(this: export_default$1h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    bitshiftright(this: export_default$1h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    bitxor(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1h<1>;
    bitxor(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
    bitxor(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1h<0 | 1>;
    getBit(this: export_default$1h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    getBit(this: export_default$1h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    getBit(this: export_default$1h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4(this: export_default$1h<1>): export_default$10<1>;
    int4(this: export_default$1h<0 | 1>): export_default$10<0 | 1>;
    int4(this: export_default$1h<number>): export_default$10<0 | 1>;
    int8(this: export_default$1h<1>): export_default$Z<1>;
    int8(this: export_default$1h<0 | 1>): export_default$Z<0 | 1>;
    int8(this: export_default$1h<number>): export_default$Z<0 | 1>;
    length(this: export_default$1h<1>): export_default$10<1>;
    length(this: export_default$1h<0 | 1>): export_default$10<0 | 1>;
    length(this: export_default$1h<number>): export_default$10<0 | 1>;
    octetLength(this: export_default$1h<1>): export_default$10<1>;
    octetLength(this: export_default$1h<0 | 1>): export_default$10<0 | 1>;
    octetLength(this: export_default$1h<number>): export_default$10<0 | 1>;
    overlay(this: export_default$1h<1>, a1: export_default$1h<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    overlay(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    overlay(this: export_default$1h<number>, a1: export_default$1h<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    overlay(this: export_default$1h<1>, a1: export_default$1h<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    overlay(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    overlay(this: export_default$1h<number>, a1: export_default$1h<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    position(this: export_default$1h<1>, a1: export_default$1h<1>): export_default$10<1>;
    position(this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$10<0 | 1>;
    position(this: export_default$1h<number>, a1: export_default$1h<number>): export_default$10<0 | 1>;
    setBit(this: export_default$1h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    setBit(this: export_default$1h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    setBit(this: export_default$1h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    substring(this: export_default$1h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    substring(this: export_default$1h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    substring(this: export_default$1h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    substring(this: export_default$1h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    substring(this: export_default$1h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    substring(this: export_default$1h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    ["&"](this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1h<1>;
    ["&"](this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
    ["&"](this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1h<0 | 1>;
    ["="](this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    ["="](this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    [">="](this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    [">"](this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    ["<="](this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    ["<"](this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1g<1>;
    ["<>"](this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1g<0 | 1>;
    ["|"](this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1h<1>;
    ["|"](this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
    ["|"](this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1h<0 | 1>;
    ["<<"](this: export_default$1h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    ["<<"](this: export_default$1h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    ["<<"](this: export_default$1h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    [">>"](this: export_default$1h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    [">>"](this: export_default$1h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    [">>"](this: export_default$1h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    ["#"](this: export_default$1h<1>, a1: export_default$1h<1>): export_default$1h<1>;
    ["#"](this: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
    ["#"](this: export_default$1h<number>, a1: export_default$1h<number>): export_default$1h<0 | 1>;
}

type Input<T extends Any> = unknown extends T["resultType"] ? never : T["resultType"];
declare const typeMap: {
    readonly bool: {
        readonly parse: (value: string) => boolean;
        readonly serialize: (value: boolean) => string;
        readonly serializeFromTypes: readonly ["boolean"];
    };
    readonly int2: {
        readonly parse: NumberConstructor;
        readonly serialize: (value: number) => string;
        readonly serializeFromTypes: readonly ["number"];
    };
    readonly int4: {
        readonly parse: NumberConstructor;
        readonly serialize: (value: number) => string;
        readonly serializeFromTypes: readonly ["number"];
    };
    readonly int8: {
        readonly parse: BigIntConstructor;
        readonly serialize: (value: bigint) => string;
        readonly serializeFromTypes: readonly ["bigint"];
    };
    readonly float4: {
        readonly parse: typeof parseFloat;
        readonly serialize: (value: number) => string;
        readonly serializeFromTypes: readonly ["number"];
    };
    readonly float8: {
        readonly parse: typeof parseFloat;
        readonly serialize: (value: number) => string;
        readonly serializeFromTypes: readonly ["number"];
    };
    readonly numeric: {
        readonly parse: (x: string) => string;
        readonly serialize: (value: number | bigint | string) => string;
        readonly serializeFromTypes: readonly ["number", "bigint", "string"];
    };
    readonly text: {
        readonly parse: (x: string) => string;
        readonly serialize: (value: string) => string;
        readonly serializeFromTypes: readonly ["string"];
    };
};

type Parsed$1e = ReturnType<typeof typeMap["bool"]['parse']>;
type SerializeParam$1e = Parameters<typeof typeMap["bool"]['serialize']>[0];
declare class export_default$1g<N extends number> extends Any<Parsed$1e, N> {
    static new(v: SerializeParam$1e): export_default$1g<1>;
    static new(v: null): export_default$1g<0>;
    static new(v: Expression): export_default$1g<0 | 1>;
    static serializeParamTypes: readonly SerializeParam$1e[] | undefined;
    static parse(v: string): boolean;
    static typeString(): string | undefined;
    asAggregate(): export_default$1g<number> | undefined;
    binaryUpgradeSetRecordInitPrivs(this: export_default$1g<1>): export_default$4<1>;
    binaryUpgradeSetRecordInitPrivs(this: export_default$1g<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetRecordInitPrivs(this: export_default$1g<number>): export_default$4<0 | 1>;
    boolAnd(this: export_default$1g<number>): export_default$1g<0 | 1>;
    boolOr(this: export_default$1g<number>): export_default$1g<0 | 1>;
    boolandStatefunc(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    boolandStatefunc(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolandStatefunc(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    booleq(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    booleq(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    booleq(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolge(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    boolge(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolge(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolgt(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    boolgt(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolgt(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolle(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    boolle(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolle(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boollt(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    boollt(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boollt(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolne(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    boolne(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolne(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolorStatefunc(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    boolorStatefunc(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    boolorStatefunc(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    btboolcmp(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$10<1>;
    btboolcmp(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$10<0 | 1>;
    btboolcmp(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$10<0 | 1>;
    currentSchemas(this: export_default$1g<1>): Array$1<1, export_default$M<0 | 1>>;
    currentSchemas(this: export_default$1g<0 | 1>): Array$1<0 | 1, export_default$M<0 | 1>>;
    currentSchemas(this: export_default$1g<number>): Array$1<0 | 1, export_default$M<0 | 1>>;
    databaseToXml(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    databaseToXml(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    databaseToXml(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    databaseToXmlAndXmlschema(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    databaseToXmlAndXmlschema(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    databaseToXmlAndXmlschema(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    databaseToXmlschema(this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    databaseToXmlschema(this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    databaseToXmlschema(this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    every(this: export_default$1g<number>): export_default$1g<0 | 1>;
    int4(this: export_default$1g<1>): export_default$10<1>;
    int4(this: export_default$1g<0 | 1>): export_default$10<0 | 1>;
    int4(this: export_default$1g<number>): export_default$10<0 | 1>;
    pgBackupStop(this: export_default$1g<1>): Record$1<1, {
        lsn: export_default$E<1>;
        labelfile: export_default$l<1>;
        spcmapfile: export_default$l<1>;
    }>;
    pgBackupStop(this: export_default$1g<0 | 1>): Record$1<0 | 1, {
        lsn: export_default$E<0 | 1>;
        labelfile: export_default$l<0 | 1>;
        spcmapfile: export_default$l<0 | 1>;
    }>;
    pgBackupStop(this: export_default$1g<number>): Record$1<0 | 1, {
        lsn: export_default$E<0 | 1>;
        labelfile: export_default$l<0 | 1>;
        spcmapfile: export_default$l<0 | 1>;
    }>;
    pgLogicalEmitMessage(this: export_default$1g<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$1d<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$E<1>;
    pgLogicalEmitMessage(this: export_default$1g<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$1d<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$E<0 | 1>;
    pgLogicalEmitMessage(this: export_default$1g<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$1d<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$E<0 | 1>;
    pgLogicalEmitMessage(this: export_default$1g<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$E<1>;
    pgLogicalEmitMessage(this: export_default$1g<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$E<0 | 1>;
    pgLogicalEmitMessage(this: export_default$1g<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$E<0 | 1>;
    pgPromote(this: export_default$1g<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    pgPromote(this: export_default$1g<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgPromote(this: export_default$1g<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgReplicationOriginSessionProgress(this: export_default$1g<1>): export_default$E<1>;
    pgReplicationOriginSessionProgress(this: export_default$1g<0 | 1>): export_default$E<0 | 1>;
    pgReplicationOriginSessionProgress(this: export_default$1g<number>): export_default$E<0 | 1>;
    text(this: export_default$1g<1>): export_default$l<1>;
    text(this: export_default$1g<0 | 1>): export_default$l<0 | 1>;
    text(this: export_default$1g<number>): export_default$l<0 | 1>;
    ["="](this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1g<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1g<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
}

type Parsed$1d = string;
type SerializeParam$1d = string;
declare class export_default$1f<N extends number> extends Any<Parsed$1d, N> {
    static new(v: SerializeParam$1d): export_default$1f<1>;
    static new(v: null): export_default$1f<0>;
    static new(v: Expression): export_default$1f<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1f<number> | undefined;
    area(this: export_default$1f<1>): export_default$14<1>;
    area(this: export_default$1f<0 | 1>): export_default$14<0 | 1>;
    area(this: export_default$1f<number>): export_default$14<0 | 1>;
    boundBox(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1f<1>;
    boundBox(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1f<0 | 1>;
    boundBox(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1f<0 | 1>;
    boxAbove(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxAbove(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxAbove(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxAboveEq(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxAboveEq(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxAboveEq(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxAdd(this: export_default$1f<1>, a1: export_default$A<1>): export_default$1f<1>;
    boxAdd(this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    boxAdd(this: export_default$1f<number>, a1: export_default$A<number>): export_default$1f<0 | 1>;
    boxBelow(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxBelow(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxBelow(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxBelowEq(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxBelowEq(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxBelowEq(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxCenter(this: export_default$1f<1>): export_default$A<1>;
    boxCenter(this: export_default$1f<0 | 1>): export_default$A<0 | 1>;
    boxCenter(this: export_default$1f<number>): export_default$A<0 | 1>;
    boxContainPt(this: export_default$1f<1>, a1: export_default$A<1>): export_default$1g<1>;
    boxContainPt(this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    boxContainPt(this: export_default$1f<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    boxContained(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxContained(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxContained(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxDistance(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$14<1>;
    boxDistance(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$14<0 | 1>;
    boxDistance(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$14<0 | 1>;
    boxDiv(this: export_default$1f<1>, a1: export_default$A<1>): export_default$1f<1>;
    boxDiv(this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    boxDiv(this: export_default$1f<number>, a1: export_default$A<number>): export_default$1f<0 | 1>;
    boxEq(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxEq(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxEq(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxGe(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxGe(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxGe(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxGt(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxGt(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxGt(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxIntersect(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1f<1>;
    boxIntersect(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1f<0 | 1>;
    boxIntersect(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1f<0 | 1>;
    boxLe(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxLe(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxLe(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxLeft(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxLeft(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxLeft(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxLt(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxLt(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxLt(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxMul(this: export_default$1f<1>, a1: export_default$A<1>): export_default$1f<1>;
    boxMul(this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    boxMul(this: export_default$1f<number>, a1: export_default$A<number>): export_default$1f<0 | 1>;
    boxOverabove(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxOverabove(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxOverabove(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxOverbelow(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxOverbelow(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxOverbelow(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxOverlap(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxOverlap(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxOverlap(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxOverlap(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxOverlap(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxOverlap(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxOverleft(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxOverleft(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxOverleft(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxOverright(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxOverright(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxOverright(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxRight(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxRight(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxRight(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxSame(this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    boxSame(this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    boxSame(this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    boxSub(this: export_default$1f<1>, a1: export_default$A<1>): export_default$1f<1>;
    boxSub(this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    boxSub(this: export_default$1f<number>, a1: export_default$A<number>): export_default$1f<0 | 1>;
    center(this: export_default$1f<1>): export_default$A<1>;
    center(this: export_default$1f<0 | 1>): export_default$A<0 | 1>;
    center(this: export_default$1f<number>): export_default$A<0 | 1>;
    circle(this: export_default$1f<1>): export_default$19<1>;
    circle(this: export_default$1f<0 | 1>): export_default$19<0 | 1>;
    circle(this: export_default$1f<number>): export_default$19<0 | 1>;
    diagonal(this: export_default$1f<1>): export_default$Q<1>;
    diagonal(this: export_default$1f<0 | 1>): export_default$Q<0 | 1>;
    diagonal(this: export_default$1f<number>): export_default$Q<0 | 1>;
    distBp(this: export_default$1f<1>, a1: export_default$A<1>): export_default$14<1>;
    distBp(this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    distBp(this: export_default$1f<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    distBs(this: export_default$1f<1>, a1: export_default$Q<1>): export_default$14<1>;
    distBs(this: export_default$1f<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    distBs(this: export_default$1f<number>, a1: export_default$Q<number>): export_default$14<0 | 1>;
    height(this: export_default$1f<1>): export_default$14<1>;
    height(this: export_default$1f<0 | 1>): export_default$14<0 | 1>;
    height(this: export_default$1f<number>): export_default$14<0 | 1>;
    lseg(this: export_default$1f<1>): export_default$Q<1>;
    lseg(this: export_default$1f<0 | 1>): export_default$Q<0 | 1>;
    lseg(this: export_default$1f<number>): export_default$Q<0 | 1>;
    point(this: export_default$1f<1>): export_default$A<1>;
    point(this: export_default$1f<0 | 1>): export_default$A<0 | 1>;
    point(this: export_default$1f<number>): export_default$A<0 | 1>;
    polygon(this: export_default$1f<1>): export_default$z<1>;
    polygon(this: export_default$1f<0 | 1>): export_default$z<0 | 1>;
    polygon(this: export_default$1f<number>): export_default$z<0 | 1>;
    width(this: export_default$1f<1>): export_default$14<1>;
    width(this: export_default$1f<0 | 1>): export_default$14<0 | 1>;
    width(this: export_default$1f<number>): export_default$14<0 | 1>;
    ["|>>"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["|>>"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["|>>"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    [">^"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    [">^"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    [">^"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$1f<1>, a1: export_default$A<1>): export_default$1f<1>;
    ["+"](this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    ["+"](this: export_default$1f<number>, a1: export_default$A<number>): export_default$1f<0 | 1>;
    ["<<|"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["<<|"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["<<|"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["<^"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["<^"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["<^"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$1f<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["@>"](this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$1f<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["<->"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$14<1>;
    ["<->"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$1f<1>, a1: export_default$A<1>): export_default$14<1>;
    ["<->"](this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$1f<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$1f<1>, a1: export_default$Q<1>): export_default$14<1>;
    ["<->"](this: export_default$1f<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$1f<number>, a1: export_default$Q<number>): export_default$14<0 | 1>;
    ["/"](this: export_default$1f<1>, a1: export_default$A<1>): export_default$1f<1>;
    ["/"](this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    ["/"](this: export_default$1f<number>, a1: export_default$A<number>): export_default$1f<0 | 1>;
    ["="](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["="](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    [">="](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    [">"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["#"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1f<1>;
    ["#"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1f<0 | 1>;
    ["#"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1f<0 | 1>;
    ["<="](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["<="](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["<<"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["<"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["*"](this: export_default$1f<1>, a1: export_default$A<1>): export_default$1f<1>;
    ["*"](this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    ["*"](this: export_default$1f<number>, a1: export_default$A<number>): export_default$1f<0 | 1>;
    ["|&>"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["|&>"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["|&>"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["&<|"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["&<|"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["&<|"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["?#"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["&&"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["&&"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["&&"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["&<"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["&<"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["&<"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["&>"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["&>"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["&>"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    [">>"](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    [">>"](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    [">>"](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["~="](this: export_default$1f<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["~="](this: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["~="](this: export_default$1f<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$1f<1>, a1: export_default$A<1>): export_default$1f<1>;
    ["-"](this: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    ["-"](this: export_default$1f<number>, a1: export_default$A<number>): export_default$1f<0 | 1>;
}

type Parsed$1c = string;
type SerializeParam$1c = string;
declare class export_default$1e<N extends number> extends Any<Parsed$1c, N> {
    static new(v: SerializeParam$1c): export_default$1e<1>;
    static new(v: null): export_default$1e<0>;
    static new(v: Expression): export_default$1e<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1e<number> | undefined;
    bpchar(this: export_default$1e<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1e<1>;
    bpchar(this: export_default$1e<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1e<0 | 1>;
    bpchar(this: export_default$1e<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1e<0 | 1>;
    bpcharLarger(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1e<1>;
    bpcharLarger(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1e<0 | 1>;
    bpcharLarger(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1e<0 | 1>;
    bpcharPatternGe(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpcharPatternGe(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpcharPatternGe(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpcharPatternGt(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpcharPatternGt(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpcharPatternGt(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpcharPatternLe(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpcharPatternLe(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpcharPatternLe(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpcharPatternLt(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpcharPatternLt(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpcharPatternLt(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpcharSmaller(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1e<1>;
    bpcharSmaller(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1e<0 | 1>;
    bpcharSmaller(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1e<0 | 1>;
    bpcharcmp(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$10<1>;
    bpcharcmp(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$10<0 | 1>;
    bpcharcmp(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$10<0 | 1>;
    bpchareq(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpchareq(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpchareq(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpcharge(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpcharge(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpcharge(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpchargt(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpchargt(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpchargt(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpchariclike(this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    bpchariclike(this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpchariclike(this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharicnlike(this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    bpcharicnlike(this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharicnlike(this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharicregexeq(this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    bpcharicregexeq(this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharicregexeq(this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharicregexne(this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    bpcharicregexne(this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharicregexne(this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharle(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpcharle(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpcharle(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpcharlike(this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    bpcharlike(this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharlike(this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharlt(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpcharlt(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpcharlt(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpcharne(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    bpcharne(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    bpcharne(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    bpcharnlike(this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    bpcharnlike(this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharnlike(this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharregexeq(this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    bpcharregexeq(this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharregexeq(this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharregexne(this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    bpcharregexne(this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    bpcharregexne(this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    btbpcharPatternCmp(this: export_default$1e<1>, a1: export_default$1e<1>): export_default$10<1>;
    btbpcharPatternCmp(this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$10<0 | 1>;
    btbpcharPatternCmp(this: export_default$1e<number>, a1: export_default$1e<number>): export_default$10<0 | 1>;
    charLength(this: export_default$1e<1>): export_default$10<1>;
    charLength(this: export_default$1e<0 | 1>): export_default$10<0 | 1>;
    charLength(this: export_default$1e<number>): export_default$10<0 | 1>;
    characterLength(this: export_default$1e<1>): export_default$10<1>;
    characterLength(this: export_default$1e<0 | 1>): export_default$10<0 | 1>;
    characterLength(this: export_default$1e<number>): export_default$10<0 | 1>;
    hashbpchar(this: export_default$1e<1>): export_default$10<1>;
    hashbpchar(this: export_default$1e<0 | 1>): export_default$10<0 | 1>;
    hashbpchar(this: export_default$1e<number>): export_default$10<0 | 1>;
    hashbpcharextended(this: export_default$1e<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashbpcharextended(this: export_default$1e<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashbpcharextended(this: export_default$1e<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    length(this: export_default$1e<1>): export_default$10<1>;
    length(this: export_default$1e<0 | 1>): export_default$10<0 | 1>;
    length(this: export_default$1e<number>): export_default$10<0 | 1>;
    max(this: export_default$1e<number>): export_default$1e<0 | 1>;
    name(this: export_default$1e<1>): export_default$M<1>;
    name(this: export_default$1e<0 | 1>): export_default$M<0 | 1>;
    name(this: export_default$1e<number>): export_default$M<0 | 1>;
    octetLength(this: export_default$1e<1>): export_default$10<1>;
    octetLength(this: export_default$1e<0 | 1>): export_default$10<0 | 1>;
    octetLength(this: export_default$1e<number>): export_default$10<0 | 1>;
    text(this: export_default$1e<1>): export_default$l<1>;
    text(this: export_default$1e<0 | 1>): export_default$l<0 | 1>;
    text(this: export_default$1e<number>): export_default$l<0 | 1>;
    ["~>=~"](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    ["~>=~"](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    ["~>=~"](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    ["~>~"](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    ["~>~"](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    ["~>~"](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    ["~<=~"](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    ["~<=~"](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    ["~<=~"](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    ["~<~"](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    ["~<~"](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    ["~<~"](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    ["="](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    [">="](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    [">"](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    ["~~*"](this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~~*"](this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~~*"](this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~*"](this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~~*"](this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~*"](this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~*"](this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~*"](this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~*"](this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~*"](this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~*"](this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~*"](this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    ["<="](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    ["~~"](this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~~"](this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~~"](this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    ["<"](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1e<1>, a1: export_default$1e<1>): export_default$1g<1>;
    ["<>"](this: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1e<number>, a1: export_default$1e<number>): export_default$1g<0 | 1>;
    ["!~~"](this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~~"](this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~"](this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~"](this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~"](this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~"](this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~"](this: export_default$1e<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~"](this: export_default$1e<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~"](this: export_default$1e<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
}

type Parsed$1b = string;
type SerializeParam$1b = string;
declare class export_default$1d<N extends number> extends Any<Parsed$1b, N> {
    static new(v: SerializeParam$1b): export_default$1d<1>;
    static new(v: null): export_default$1d<0>;
    static new(v: Expression): export_default$1d<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1d<number> | undefined;
    bitCount(this: export_default$1d<1>): export_default$Z<1>;
    bitCount(this: export_default$1d<0 | 1>): export_default$Z<0 | 1>;
    bitCount(this: export_default$1d<number>): export_default$Z<0 | 1>;
    bitLength(this: export_default$1d<1>): export_default$10<1>;
    bitLength(this: export_default$1d<0 | 1>): export_default$10<0 | 1>;
    bitLength(this: export_default$1d<number>): export_default$10<0 | 1>;
    btrim(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1d<1>;
    btrim(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
    btrim(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1d<0 | 1>;
    byteacat(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1d<1>;
    byteacat(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
    byteacat(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1d<0 | 1>;
    byteacmp(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$10<1>;
    byteacmp(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$10<0 | 1>;
    byteacmp(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$10<0 | 1>;
    byteaeq(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    byteaeq(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    byteaeq(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    byteage(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    byteage(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    byteage(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    byteagt(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    byteagt(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    byteagt(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    byteale(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    byteale(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    byteale(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    bytealike(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    bytealike(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    bytealike(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    bytealt(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    bytealt(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    bytealt(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    byteane(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    byteane(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    byteane(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    byteanlike(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    byteanlike(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    byteanlike(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    convert(this: export_default$1d<1>, a1: export_default$M<1>, a2: export_default$M<1>): export_default$1d<1>;
    convert(this: export_default$1d<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$M<0 | 1>): export_default$1d<0 | 1>;
    convert(this: export_default$1d<number>, a1: export_default$M<number>, a2: export_default$M<number>): export_default$1d<0 | 1>;
    convertFrom(this: export_default$1d<1>, a1: export_default$M<1>): export_default$l<1>;
    convertFrom(this: export_default$1d<0 | 1>, a1: export_default$M<0 | 1>): export_default$l<0 | 1>;
    convertFrom(this: export_default$1d<number>, a1: export_default$M<number>): export_default$l<0 | 1>;
    encode(this: export_default$1d<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    encode(this: export_default$1d<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    encode(this: export_default$1d<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    getBit(this: export_default$1d<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$10<1>;
    getBit(this: export_default$1d<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    getBit(this: export_default$1d<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    getByte(this: export_default$1d<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    getByte(this: export_default$1d<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    getByte(this: export_default$1d<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    length(this: export_default$1d<1>): export_default$10<1>;
    length(this: export_default$1d<0 | 1>): export_default$10<0 | 1>;
    length(this: export_default$1d<number>): export_default$10<0 | 1>;
    length(this: export_default$1d<1>, a1: export_default$M<1>): export_default$10<1>;
    length(this: export_default$1d<0 | 1>, a1: export_default$M<0 | 1>): export_default$10<0 | 1>;
    length(this: export_default$1d<number>, a1: export_default$M<number>): export_default$10<0 | 1>;
    like(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    like(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    like(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    likeEscape(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1d<1>;
    likeEscape(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
    likeEscape(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1d<0 | 1>;
    ltrim(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1d<1>;
    ltrim(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
    ltrim(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1d<0 | 1>;
    md5(this: export_default$1d<1>): export_default$l<1>;
    md5(this: export_default$1d<0 | 1>): export_default$l<0 | 1>;
    md5(this: export_default$1d<number>): export_default$l<0 | 1>;
    notlike(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    notlike(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    notlike(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    octetLength(this: export_default$1d<1>): export_default$10<1>;
    octetLength(this: export_default$1d<0 | 1>): export_default$10<0 | 1>;
    octetLength(this: export_default$1d<number>): export_default$10<0 | 1>;
    overlay(this: export_default$1d<1>, a1: export_default$1d<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    overlay(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    overlay(this: export_default$1d<number>, a1: export_default$1d<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    overlay(this: export_default$1d<1>, a1: export_default$1d<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    overlay(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    overlay(this: export_default$1d<number>, a1: export_default$1d<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    position(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$10<1>;
    position(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$10<0 | 1>;
    position(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$10<0 | 1>;
    rtrim(this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1d<1>;
    rtrim(this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
    rtrim(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1d<0 | 1>;
    setBit(this: export_default$1d<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    setBit(this: export_default$1d<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    setBit(this: export_default$1d<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    setByte(this: export_default$1d<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    setByte(this: export_default$1d<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    setByte(this: export_default$1d<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    sha224(this: export_default$1d<1>): export_default$1d<1>;
    sha224(this: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
    sha224(this: export_default$1d<number>): export_default$1d<0 | 1>;
    sha256(this: export_default$1d<1>): export_default$1d<1>;
    sha256(this: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
    sha256(this: export_default$1d<number>): export_default$1d<0 | 1>;
    sha384(this: export_default$1d<1>): export_default$1d<1>;
    sha384(this: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
    sha384(this: export_default$1d<number>): export_default$1d<0 | 1>;
    sha512(this: export_default$1d<1>): export_default$1d<1>;
    sha512(this: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
    sha512(this: export_default$1d<number>): export_default$1d<0 | 1>;
    stringAgg(this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1d<0 | 1>;
    substr(this: export_default$1d<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    substr(this: export_default$1d<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    substr(this: export_default$1d<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    substr(this: export_default$1d<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    substr(this: export_default$1d<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    substr(this: export_default$1d<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    substring(this: export_default$1d<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    substring(this: export_default$1d<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    substring(this: export_default$1d<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    substring(this: export_default$1d<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    substring(this: export_default$1d<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    substring(this: export_default$1d<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    ["="](this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    ["="](this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    [">="](this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    [">"](this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    ["<="](this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    ["~~"](this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    ["~~"](this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    ["~~"](this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    ["<"](this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    ["<>"](this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
    ["!~~"](this: export_default$1d<1>, a1: export_default$1d<1>): export_default$1g<1>;
    ["!~~"](this: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
    ["!~~"](this: export_default$1d<number>, a1: export_default$1d<number>): export_default$1g<0 | 1>;
}

type Parsed$1a = string;
type SerializeParam$1a = string;
declare class export_default$1c<N extends number> extends Any<Parsed$1a, N> {
    static new(v: SerializeParam$1a): export_default$1c<1>;
    static new(v: null): export_default$1c<0>;
    static new(v: Expression): export_default$1c<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1c<number> | undefined;
    acldefault(this: export_default$1c<1>, a1: export_default$I<1>): Array$1<1, export_default$1m<0 | 1>>;
    acldefault(this: export_default$1c<0 | 1>, a1: export_default$I<0 | 1>): Array$1<0 | 1, export_default$1m<0 | 1>>;
    acldefault(this: export_default$1c<number>, a1: export_default$I<number>): Array$1<0 | 1, export_default$1m<0 | 1>>;
    bpchar(this: export_default$1c<1>): export_default$1e<1>;
    bpchar(this: export_default$1c<0 | 1>): export_default$1e<0 | 1>;
    bpchar(this: export_default$1c<number>): export_default$1e<0 | 1>;
    btcharcmp(this: export_default$1c<1>, a1: export_default$1c<1>): export_default$10<1>;
    btcharcmp(this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$10<0 | 1>;
    btcharcmp(this: export_default$1c<number>, a1: export_default$1c<number>): export_default$10<0 | 1>;
    chareq(this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    chareq(this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    chareq(this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    charge(this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    charge(this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    charge(this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    chargt(this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    chargt(this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    chargt(this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    charle(this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    charle(this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    charle(this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    charlt(this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    charlt(this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    charlt(this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    charne(this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    charne(this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    charne(this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    hashchar(this: export_default$1c<1>): export_default$10<1>;
    hashchar(this: export_default$1c<0 | 1>): export_default$10<0 | 1>;
    hashchar(this: export_default$1c<number>): export_default$10<0 | 1>;
    hashcharextended(this: export_default$1c<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashcharextended(this: export_default$1c<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashcharextended(this: export_default$1c<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int4(this: export_default$1c<1>): export_default$10<1>;
    int4(this: export_default$1c<0 | 1>): export_default$10<0 | 1>;
    int4(this: export_default$1c<number>): export_default$10<0 | 1>;
    text(this: export_default$1c<1>): export_default$l<1>;
    text(this: export_default$1c<0 | 1>): export_default$l<0 | 1>;
    text(this: export_default$1c<number>): export_default$l<0 | 1>;
    ["="](this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    ["="](this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    [">="](this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    [">"](this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    ["<="](this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    ["<"](this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1c<1>, a1: export_default$1c<1>): export_default$1g<1>;
    ["<>"](this: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$1c<number>, a1: export_default$1c<number>): export_default$1g<0 | 1>;
}

type Parsed$19 = string;
type SerializeParam$19 = string;
declare class export_default$1b<N extends number> extends Any<Parsed$19, N> {
    static new(v: SerializeParam$19): export_default$1b<1>;
    static new(v: null): export_default$1b<0>;
    static new(v: Expression): export_default$1b<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1b<number> | undefined;
    cideq(this: export_default$1b<1>, a1: export_default$1b<1>): export_default$1g<1>;
    cideq(this: export_default$1b<0 | 1>, a1: export_default$1b<0 | 1>): export_default$1g<0 | 1>;
    cideq(this: export_default$1b<number>, a1: export_default$1b<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$1b<1>, a1: export_default$1b<1>): export_default$1g<1>;
    ["="](this: export_default$1b<0 | 1>, a1: export_default$1b<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$1b<number>, a1: export_default$1b<number>): export_default$1g<0 | 1>;
}

type Parsed$18 = string;
type SerializeParam$18 = string;
declare class export_default$1a<N extends number> extends Any<Parsed$18, N> {
    static new(v: SerializeParam$18): export_default$1a<1>;
    static new(v: null): export_default$1a<0>;
    static new(v: Expression): export_default$1a<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1a<number> | undefined;
    abbrev(this: export_default$1a<1>): export_default$l<1>;
    abbrev(this: export_default$1a<0 | 1>): export_default$l<0 | 1>;
    abbrev(this: export_default$1a<number>): export_default$l<0 | 1>;
    setMasklen(this: export_default$1a<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1a<1>;
    setMasklen(this: export_default$1a<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1a<0 | 1>;
    setMasklen(this: export_default$1a<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1a<0 | 1>;
}

type Parsed$17 = string;
type SerializeParam$17 = string;
declare class export_default$19<N extends number> extends Any<Parsed$17, N> {
    static new(v: SerializeParam$17): export_default$19<1>;
    static new(v: null): export_default$19<0>;
    static new(v: Expression): export_default$19<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$19<number> | undefined;
    area(this: export_default$19<1>): export_default$14<1>;
    area(this: export_default$19<0 | 1>): export_default$14<0 | 1>;
    area(this: export_default$19<number>): export_default$14<0 | 1>;
    box(this: export_default$19<1>): export_default$1f<1>;
    box(this: export_default$19<0 | 1>): export_default$1f<0 | 1>;
    box(this: export_default$19<number>): export_default$1f<0 | 1>;
    center(this: export_default$19<1>): export_default$A<1>;
    center(this: export_default$19<0 | 1>): export_default$A<0 | 1>;
    center(this: export_default$19<number>): export_default$A<0 | 1>;
    circleAbove(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleAbove(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleAbove(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleAddPt(this: export_default$19<1>, a1: export_default$A<1>): export_default$19<1>;
    circleAddPt(this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
    circleAddPt(this: export_default$19<number>, a1: export_default$A<number>): export_default$19<0 | 1>;
    circleBelow(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleBelow(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleBelow(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleCenter(this: export_default$19<1>): export_default$A<1>;
    circleCenter(this: export_default$19<0 | 1>): export_default$A<0 | 1>;
    circleCenter(this: export_default$19<number>): export_default$A<0 | 1>;
    circleContainPt(this: export_default$19<1>, a1: export_default$A<1>): export_default$1g<1>;
    circleContainPt(this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    circleContainPt(this: export_default$19<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    circleContained(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleContained(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleContained(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleDistance(this: export_default$19<1>, a1: export_default$19<1>): export_default$14<1>;
    circleDistance(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$14<0 | 1>;
    circleDistance(this: export_default$19<number>, a1: export_default$19<number>): export_default$14<0 | 1>;
    circleDivPt(this: export_default$19<1>, a1: export_default$A<1>): export_default$19<1>;
    circleDivPt(this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
    circleDivPt(this: export_default$19<number>, a1: export_default$A<number>): export_default$19<0 | 1>;
    circleEq(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleEq(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleEq(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleGe(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleGe(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleGe(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleGt(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleGt(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleGt(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleLe(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleLe(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleLe(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleLeft(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleLeft(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleLeft(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleLt(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleLt(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleLt(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleMulPt(this: export_default$19<1>, a1: export_default$A<1>): export_default$19<1>;
    circleMulPt(this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
    circleMulPt(this: export_default$19<number>, a1: export_default$A<number>): export_default$19<0 | 1>;
    circleNe(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleNe(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleNe(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleOverabove(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleOverabove(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleOverabove(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleOverbelow(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleOverbelow(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleOverbelow(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleOverlap(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleOverlap(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleOverlap(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleOverleft(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleOverleft(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleOverleft(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleOverright(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleOverright(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleOverright(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleRight(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleRight(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleRight(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleSame(this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    circleSame(this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    circleSame(this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    circleSubPt(this: export_default$19<1>, a1: export_default$A<1>): export_default$19<1>;
    circleSubPt(this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
    circleSubPt(this: export_default$19<number>, a1: export_default$A<number>): export_default$19<0 | 1>;
    diameter(this: export_default$19<1>): export_default$14<1>;
    diameter(this: export_default$19<0 | 1>): export_default$14<0 | 1>;
    diameter(this: export_default$19<number>): export_default$14<0 | 1>;
    distCpoint(this: export_default$19<1>, a1: export_default$A<1>): export_default$14<1>;
    distCpoint(this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    distCpoint(this: export_default$19<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    distCpoly(this: export_default$19<1>, a1: export_default$z<1>): export_default$14<1>;
    distCpoly(this: export_default$19<0 | 1>, a1: export_default$z<0 | 1>): export_default$14<0 | 1>;
    distCpoly(this: export_default$19<number>, a1: export_default$z<number>): export_default$14<0 | 1>;
    point(this: export_default$19<1>): export_default$A<1>;
    point(this: export_default$19<0 | 1>): export_default$A<0 | 1>;
    point(this: export_default$19<number>): export_default$A<0 | 1>;
    polygon(this: export_default$19<1>): export_default$z<1>;
    polygon(this: export_default$19<0 | 1>): export_default$z<0 | 1>;
    polygon(this: export_default$19<number>): export_default$z<0 | 1>;
    radius(this: export_default$19<1>): export_default$14<1>;
    radius(this: export_default$19<0 | 1>): export_default$14<0 | 1>;
    radius(this: export_default$19<number>): export_default$14<0 | 1>;
    ["|>>"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["|>>"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["|>>"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$19<1>, a1: export_default$A<1>): export_default$19<1>;
    ["+"](this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
    ["+"](this: export_default$19<number>, a1: export_default$A<number>): export_default$19<0 | 1>;
    ["<<|"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["<<|"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["<<|"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$19<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["@>"](this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$19<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["<->"](this: export_default$19<1>, a1: export_default$19<1>): export_default$14<1>;
    ["<->"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$19<number>, a1: export_default$19<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$19<1>, a1: export_default$A<1>): export_default$14<1>;
    ["<->"](this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$19<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$19<1>, a1: export_default$z<1>): export_default$14<1>;
    ["<->"](this: export_default$19<0 | 1>, a1: export_default$z<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$19<number>, a1: export_default$z<number>): export_default$14<0 | 1>;
    ["/"](this: export_default$19<1>, a1: export_default$A<1>): export_default$19<1>;
    ["/"](this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
    ["/"](this: export_default$19<number>, a1: export_default$A<number>): export_default$19<0 | 1>;
    ["="](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["="](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    [">="](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    [">"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["<="](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["<<"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["<"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["*"](this: export_default$19<1>, a1: export_default$A<1>): export_default$19<1>;
    ["*"](this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
    ["*"](this: export_default$19<number>, a1: export_default$A<number>): export_default$19<0 | 1>;
    ["<>"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["<>"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["|&>"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["|&>"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["|&>"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["&<|"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["&<|"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["&<|"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["&&"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["&&"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["&&"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["&<"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["&<"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["&<"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["&>"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["&>"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["&>"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    [">>"](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    [">>"](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    [">>"](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["~="](this: export_default$19<1>, a1: export_default$19<1>): export_default$1g<1>;
    ["~="](this: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ["~="](this: export_default$19<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$19<1>, a1: export_default$A<1>): export_default$19<1>;
    ["-"](this: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
    ["-"](this: export_default$19<number>, a1: export_default$A<number>): export_default$19<0 | 1>;
}

type Parsed$16 = string;
type SerializeParam$16 = string;
declare class export_default$18<N extends number> extends Any<Parsed$16, N> {
    static new(v: SerializeParam$16): export_default$18<1>;
    static new(v: null): export_default$18<0>;
    static new(v: Expression): export_default$18<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$18<number> | undefined;
    dateCmp(this: export_default$18<1>, a1: export_default$18<1>): export_default$10<1>;
    dateCmp(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$10<0 | 1>;
    dateCmp(this: export_default$18<number>, a1: export_default$18<number>): export_default$10<0 | 1>;
    dateCmpTimestamp(this: export_default$18<1>, a1: export_default$i<1>): export_default$10<1>;
    dateCmpTimestamp(this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$10<0 | 1>;
    dateCmpTimestamp(this: export_default$18<number>, a1: export_default$i<number>): export_default$10<0 | 1>;
    dateCmpTimestamptz(this: export_default$18<1>, a1: export_default$h<1>): export_default$10<1>;
    dateCmpTimestamptz(this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$10<0 | 1>;
    dateCmpTimestamptz(this: export_default$18<number>, a1: export_default$h<number>): export_default$10<0 | 1>;
    dateEq(this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    dateEq(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    dateEq(this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    dateEqTimestamp(this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    dateEqTimestamp(this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    dateEqTimestamp(this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    dateEqTimestamptz(this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    dateEqTimestamptz(this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    dateEqTimestamptz(this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    dateGe(this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    dateGe(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    dateGe(this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    dateGeTimestamp(this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    dateGeTimestamp(this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    dateGeTimestamp(this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    dateGeTimestamptz(this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    dateGeTimestamptz(this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    dateGeTimestamptz(this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    dateGt(this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    dateGt(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    dateGt(this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    dateGtTimestamp(this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    dateGtTimestamp(this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    dateGtTimestamp(this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    dateGtTimestamptz(this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    dateGtTimestamptz(this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    dateGtTimestamptz(this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    dateLarger(this: export_default$18<1>, a1: export_default$18<1>): export_default$18<1>;
    dateLarger(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$18<0 | 1>;
    dateLarger(this: export_default$18<number>, a1: export_default$18<number>): export_default$18<0 | 1>;
    dateLe(this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    dateLe(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    dateLe(this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    dateLeTimestamp(this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    dateLeTimestamp(this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    dateLeTimestamp(this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    dateLeTimestamptz(this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    dateLeTimestamptz(this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    dateLeTimestamptz(this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    dateLt(this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    dateLt(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    dateLt(this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    dateLtTimestamp(this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    dateLtTimestamp(this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    dateLtTimestamp(this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    dateLtTimestamptz(this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    dateLtTimestamptz(this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    dateLtTimestamptz(this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    dateMi(this: export_default$18<1>, a1: export_default$18<1>): export_default$10<1>;
    dateMi(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$10<0 | 1>;
    dateMi(this: export_default$18<number>, a1: export_default$18<number>): export_default$10<0 | 1>;
    dateMiInterval(this: export_default$18<1>, a1: export_default$W<1>): export_default$i<1>;
    dateMiInterval(this: export_default$18<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
    dateMiInterval(this: export_default$18<number>, a1: export_default$W<number>): export_default$i<0 | 1>;
    dateMii(this: export_default$18<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$18<1>;
    dateMii(this: export_default$18<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$18<0 | 1>;
    dateMii(this: export_default$18<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$18<0 | 1>;
    dateNe(this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    dateNe(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    dateNe(this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    dateNeTimestamp(this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    dateNeTimestamp(this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    dateNeTimestamp(this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    dateNeTimestamptz(this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    dateNeTimestamptz(this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    dateNeTimestamptz(this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    datePlInterval(this: export_default$18<1>, a1: export_default$W<1>): export_default$i<1>;
    datePlInterval(this: export_default$18<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
    datePlInterval(this: export_default$18<number>, a1: export_default$W<number>): export_default$i<0 | 1>;
    datePli(this: export_default$18<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$18<1>;
    datePli(this: export_default$18<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$18<0 | 1>;
    datePli(this: export_default$18<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$18<0 | 1>;
    dateSmaller(this: export_default$18<1>, a1: export_default$18<1>): export_default$18<1>;
    dateSmaller(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$18<0 | 1>;
    dateSmaller(this: export_default$18<number>, a1: export_default$18<number>): export_default$18<0 | 1>;
    daterange(this: export_default$18<1>, a1: export_default$18<1>): export_default$16<1>;
    daterange(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$16<0 | 1>;
    daterange(this: export_default$18<number>, a1: export_default$18<number>): export_default$16<0 | 1>;
    daterange(this: export_default$18<1>, a1: export_default$18<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$16<1>;
    daterange(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$16<0 | 1>;
    daterange(this: export_default$18<number>, a1: export_default$18<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$16<0 | 1>;
    daterangeSubdiff(this: export_default$18<1>, a1: export_default$18<1>): export_default$14<1>;
    daterangeSubdiff(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$14<0 | 1>;
    daterangeSubdiff(this: export_default$18<number>, a1: export_default$18<number>): export_default$14<0 | 1>;
    datetimePl(this: export_default$18<1>, a1: export_default$j<1>): export_default$i<1>;
    datetimePl(this: export_default$18<0 | 1>, a1: export_default$j<0 | 1>): export_default$i<0 | 1>;
    datetimePl(this: export_default$18<number>, a1: export_default$j<number>): export_default$i<0 | 1>;
    datetimetzPl(this: export_default$18<1>, a1: export_default$g<1>): export_default$h<1>;
    datetimetzPl(this: export_default$18<0 | 1>, a1: export_default$g<0 | 1>): export_default$h<0 | 1>;
    datetimetzPl(this: export_default$18<number>, a1: export_default$g<number>): export_default$h<0 | 1>;
    inRange(this: export_default$18<1>, a1: export_default$18<1>, a2: export_default$W<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$18<number>, a1: export_default$18<number>, a2: export_default$W<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    isfinite(this: export_default$18<1>): export_default$1g<1>;
    isfinite(this: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    isfinite(this: export_default$18<number>): export_default$1g<0 | 1>;
    max(this: export_default$18<number>): export_default$18<0 | 1>;
    timestamp(this: export_default$18<1>): export_default$i<1>;
    timestamp(this: export_default$18<0 | 1>): export_default$i<0 | 1>;
    timestamp(this: export_default$18<number>): export_default$i<0 | 1>;
    timestamp(this: export_default$18<1>, a1: export_default$j<1>): export_default$i<1>;
    timestamp(this: export_default$18<0 | 1>, a1: export_default$j<0 | 1>): export_default$i<0 | 1>;
    timestamp(this: export_default$18<number>, a1: export_default$j<number>): export_default$i<0 | 1>;
    timestamptz(this: export_default$18<1>): export_default$h<1>;
    timestamptz(this: export_default$18<0 | 1>): export_default$h<0 | 1>;
    timestamptz(this: export_default$18<number>): export_default$h<0 | 1>;
    timestamptz(this: export_default$18<1>, a1: export_default$j<1>): export_default$h<1>;
    timestamptz(this: export_default$18<0 | 1>, a1: export_default$j<0 | 1>): export_default$h<0 | 1>;
    timestamptz(this: export_default$18<number>, a1: export_default$j<number>): export_default$h<0 | 1>;
    timestamptz(this: export_default$18<1>, a1: export_default$g<1>): export_default$h<1>;
    timestamptz(this: export_default$18<0 | 1>, a1: export_default$g<0 | 1>): export_default$h<0 | 1>;
    timestamptz(this: export_default$18<number>, a1: export_default$g<number>): export_default$h<0 | 1>;
    ["="](this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["="](this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["="](this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["="](this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    [">="](this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    [">="](this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    [">="](this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    [">"](this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    [">"](this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    [">"](this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["<="](this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["<="](this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["<="](this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["<"](this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["<"](this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["<"](this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$18<1>, a1: export_default$18<1>): export_default$10<1>;
    ["-"](this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$10<0 | 1>;
    ["-"](this: export_default$18<number>, a1: export_default$18<number>): export_default$10<0 | 1>;
    ["-"](this: export_default$18<1>, a1: export_default$W<1>): export_default$i<1>;
    ["-"](this: export_default$18<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
    ["-"](this: export_default$18<number>, a1: export_default$W<number>): export_default$i<0 | 1>;
    ["-"](this: export_default$18<1>, a1: export_default$10<1>): export_default$18<1>;
    ["-"](this: export_default$18<0 | 1>, a1: export_default$10<0 | 1>): export_default$18<0 | 1>;
    ["-"](this: export_default$18<number>, a1: export_default$10<number>): export_default$18<0 | 1>;
    ["<>"](this: export_default$18<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["<>"](this: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$18<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$18<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["<>"](this: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$18<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$18<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["<>"](this: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$18<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$18<1>, a1: export_default$W<1>): export_default$i<1>;
    ["+"](this: export_default$18<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
    ["+"](this: export_default$18<number>, a1: export_default$W<number>): export_default$i<0 | 1>;
    ["+"](this: export_default$18<1>, a1: export_default$10<1>): export_default$18<1>;
    ["+"](this: export_default$18<0 | 1>, a1: export_default$10<0 | 1>): export_default$18<0 | 1>;
    ["+"](this: export_default$18<number>, a1: export_default$10<number>): export_default$18<0 | 1>;
    ["+"](this: export_default$18<1>, a1: export_default$j<1>): export_default$i<1>;
    ["+"](this: export_default$18<0 | 1>, a1: export_default$j<0 | 1>): export_default$i<0 | 1>;
    ["+"](this: export_default$18<number>, a1: export_default$j<number>): export_default$i<0 | 1>;
    ["+"](this: export_default$18<1>, a1: export_default$g<1>): export_default$h<1>;
    ["+"](this: export_default$18<0 | 1>, a1: export_default$g<0 | 1>): export_default$h<0 | 1>;
    ["+"](this: export_default$18<number>, a1: export_default$g<number>): export_default$h<0 | 1>;
}

type Parsed$15 = string;
type SerializeParam$15 = string;
declare class export_default$17<N extends number> extends Any<Parsed$15, N> {
    static new(v: SerializeParam$15): export_default$17<1>;
    static new(v: null): export_default$17<0>;
    static new(v: Expression): export_default$17<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$17<number> | undefined;
}

type Parsed$14 = string;
type SerializeParam$14 = string;
declare class export_default$16<N extends number> extends Any<Parsed$14, N> {
    static new(v: SerializeParam$14): export_default$16<1>;
    static new(v: null): export_default$16<0>;
    static new(v: Expression): export_default$16<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$16<number> | undefined;
    datemultirange(this: export_default$16<1>): export_default$17<1>;
    datemultirange(this: export_default$16<0 | 1>): export_default$17<0 | 1>;
    datemultirange(this: export_default$16<number>): export_default$17<0 | 1>;
    daterangeCanonical(this: export_default$16<1>): export_default$16<1>;
    daterangeCanonical(this: export_default$16<0 | 1>): export_default$16<0 | 1>;
    daterangeCanonical(this: export_default$16<number>): export_default$16<0 | 1>;
}

type Parsed$13 = ReturnType<typeof typeMap["float4"]['parse']>;
type SerializeParam$13 = Parameters<typeof typeMap["float4"]['serialize']>[0];
declare class export_default$15<N extends number> extends Any<Parsed$13, N> {
    static new(v: SerializeParam$13): export_default$15<1>;
    static new(v: null): export_default$15<0>;
    static new(v: Expression): export_default$15<0 | 1>;
    static serializeParamTypes: readonly SerializeParam$13[] | undefined;
    static parse(v: string): number;
    static typeString(): string | undefined;
    asAggregate(): export_default$15<number> | undefined;
    abs(this: export_default$15<1>): export_default$15<1>;
    abs(this: export_default$15<0 | 1>): export_default$15<0 | 1>;
    abs(this: export_default$15<number>): export_default$15<0 | 1>;
    avg(this: export_default$15<number>): export_default$14<0 | 1>;
    btfloat48Cmp(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$10<1>;
    btfloat48Cmp(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$10<0 | 1>;
    btfloat48Cmp(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$10<0 | 1>;
    btfloat4Cmp(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$10<1>;
    btfloat4Cmp(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$10<0 | 1>;
    btfloat4Cmp(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$10<0 | 1>;
    float48Div(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float48Div(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float48Div(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float48Eq(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float48Eq(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Eq(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Ge(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float48Ge(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Ge(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Gt(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float48Gt(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Gt(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Le(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float48Le(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Le(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Lt(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float48Lt(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Lt(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Mi(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float48Mi(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float48Mi(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float48Mul(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float48Mul(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float48Mul(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float48Ne(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float48Ne(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Ne(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float48Pl(this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float48Pl(this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float48Pl(this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float4Abs(this: export_default$15<1>): export_default$15<1>;
    float4Abs(this: export_default$15<0 | 1>): export_default$15<0 | 1>;
    float4Abs(this: export_default$15<number>): export_default$15<0 | 1>;
    float4Div(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$15<1>;
    float4Div(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Div(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Eq(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float4Eq(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Eq(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Ge(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float4Ge(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Ge(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Gt(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float4Gt(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Gt(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Larger(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$15<1>;
    float4Larger(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Larger(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Le(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float4Le(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Le(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Lt(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float4Lt(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Lt(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Mi(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$15<1>;
    float4Mi(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Mi(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Mul(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$15<1>;
    float4Mul(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Mul(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Ne(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float4Ne(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Ne(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float4Pl(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$15<1>;
    float4Pl(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Pl(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Smaller(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$15<1>;
    float4Smaller(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Smaller(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$15<0 | 1>;
    float4Um(this: export_default$15<1>): export_default$15<1>;
    float4Um(this: export_default$15<0 | 1>): export_default$15<0 | 1>;
    float4Um(this: export_default$15<number>): export_default$15<0 | 1>;
    float4Up(this: export_default$15<1>): export_default$15<1>;
    float4Up(this: export_default$15<0 | 1>): export_default$15<0 | 1>;
    float4Up(this: export_default$15<number>): export_default$15<0 | 1>;
    float8(this: export_default$15<1>): export_default$14<1>;
    float8(this: export_default$15<0 | 1>): export_default$14<0 | 1>;
    float8(this: export_default$15<number>): export_default$14<0 | 1>;
    flt4MulCash(this: export_default$15<1>, a1: export_default$N<1>): export_default$N<1>;
    flt4MulCash(this: export_default$15<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    flt4MulCash(this: export_default$15<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    hashfloat4(this: export_default$15<1>): export_default$10<1>;
    hashfloat4(this: export_default$15<0 | 1>): export_default$10<0 | 1>;
    hashfloat4(this: export_default$15<number>): export_default$10<0 | 1>;
    hashfloat4Extended(this: export_default$15<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashfloat4Extended(this: export_default$15<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashfloat4Extended(this: export_default$15<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    inRange(this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>, a2: export_default$14<1> | Input<export_default$14<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>, a2: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>, a2: export_default$14<number> | Input<export_default$14<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    int2(this: export_default$15<1>): export_default$12<1>;
    int2(this: export_default$15<0 | 1>): export_default$12<0 | 1>;
    int2(this: export_default$15<number>): export_default$12<0 | 1>;
    int4(this: export_default$15<1>): export_default$10<1>;
    int4(this: export_default$15<0 | 1>): export_default$10<0 | 1>;
    int4(this: export_default$15<number>): export_default$10<0 | 1>;
    int8(this: export_default$15<1>): export_default$Z<1>;
    int8(this: export_default$15<0 | 1>): export_default$Z<0 | 1>;
    int8(this: export_default$15<number>): export_default$Z<0 | 1>;
    max(this: export_default$15<number>): export_default$15<0 | 1>;
    numeric(this: export_default$15<1>): export_default$L<1>;
    numeric(this: export_default$15<0 | 1>): export_default$L<0 | 1>;
    numeric(this: export_default$15<number>): export_default$L<0 | 1>;
    stddev(this: export_default$15<number>): export_default$14<0 | 1>;
    stddevPop(this: export_default$15<number>): export_default$14<0 | 1>;
    stddevSamp(this: export_default$15<number>): export_default$14<0 | 1>;
    sum(this: export_default$15<number>): export_default$15<0 | 1>;
    toChar(this: export_default$15<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    toChar(this: export_default$15<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toChar(this: export_default$15<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    varPop(this: export_default$15<number>): export_default$14<0 | 1>;
    varSamp(this: export_default$15<number>): export_default$14<0 | 1>;
    variance(this: export_default$15<number>): export_default$14<0 | 1>;
    ["/"](this: export_default$15<1>, a1: export_default$14<1>): export_default$14<1>;
    ["/"](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
    ["/"](this: export_default$15<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
    ["/"](this: export_default$15<1>, a1: export_default$15<1>): export_default$15<1>;
    ["/"](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
    ["/"](this: export_default$15<number>, a1: export_default$15<number>): export_default$15<0 | 1>;
    ["="](this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["-"](this: export_default$15<1>, a1: export_default$14<1>): export_default$14<1>;
    ["-"](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
    ["-"](this: export_default$15<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
    ["-"](this: export_default$15<1>, a1: export_default$15<1>): export_default$15<1>;
    ["-"](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
    ["-"](this: export_default$15<number>, a1: export_default$15<number>): export_default$15<0 | 1>;
    ["*"](this: export_default$15<1>, a1: export_default$14<1>): export_default$14<1>;
    ["*"](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
    ["*"](this: export_default$15<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
    ["*"](this: export_default$15<1>, a1: export_default$15<1>): export_default$15<1>;
    ["*"](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
    ["*"](this: export_default$15<number>, a1: export_default$15<number>): export_default$15<0 | 1>;
    ["*"](this: export_default$15<1>, a1: export_default$N<1>): export_default$N<1>;
    ["*"](this: export_default$15<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    ["*"](this: export_default$15<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    ["<>"](this: export_default$15<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$15<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$15<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$15<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["+"](this: export_default$15<1>, a1: export_default$14<1>): export_default$14<1>;
    ["+"](this: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
    ["+"](this: export_default$15<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
    ["+"](this: export_default$15<1>, a1: export_default$15<1>): export_default$15<1>;
    ["+"](this: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
    ["+"](this: export_default$15<number>, a1: export_default$15<number>): export_default$15<0 | 1>;
}

type Parsed$12 = ReturnType<typeof typeMap["float8"]['parse']>;
type SerializeParam$12 = Parameters<typeof typeMap["float8"]['serialize']>[0];
declare class export_default$14<N extends number> extends Any<Parsed$12, N> {
    static new(v: SerializeParam$12): export_default$14<1>;
    static new(v: null): export_default$14<0>;
    static new(v: Expression): export_default$14<0 | 1>;
    static serializeParamTypes: readonly SerializeParam$12[] | undefined;
    static parse(v: string): number;
    static typeString(): string | undefined;
    asAggregate(): export_default$14<number> | undefined;
    abs(this: export_default$14<1>): export_default$14<1>;
    abs(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    abs(this: export_default$14<number>): export_default$14<0 | 1>;
    acos(this: export_default$14<1>): export_default$14<1>;
    acos(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    acos(this: export_default$14<number>): export_default$14<0 | 1>;
    acosd(this: export_default$14<1>): export_default$14<1>;
    acosd(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    acosd(this: export_default$14<number>): export_default$14<0 | 1>;
    acosh(this: export_default$14<1>): export_default$14<1>;
    acosh(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    acosh(this: export_default$14<number>): export_default$14<0 | 1>;
    asind(this: export_default$14<1>): export_default$14<1>;
    asind(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    asind(this: export_default$14<number>): export_default$14<0 | 1>;
    asinh(this: export_default$14<1>): export_default$14<1>;
    asinh(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    asinh(this: export_default$14<number>): export_default$14<0 | 1>;
    atan(this: export_default$14<1>): export_default$14<1>;
    atan(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    atan(this: export_default$14<number>): export_default$14<0 | 1>;
    atan2(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    atan2(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    atan2(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    atan2D(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    atan2D(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    atan2D(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    atand(this: export_default$14<1>): export_default$14<1>;
    atand(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    atand(this: export_default$14<number>): export_default$14<0 | 1>;
    atanh(this: export_default$14<1>): export_default$14<1>;
    atanh(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    atanh(this: export_default$14<number>): export_default$14<0 | 1>;
    avg(this: export_default$14<number>): export_default$14<0 | 1>;
    btfloat84Cmp(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$10<1>;
    btfloat84Cmp(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$10<0 | 1>;
    btfloat84Cmp(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$10<0 | 1>;
    btfloat8Cmp(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$10<1>;
    btfloat8Cmp(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$10<0 | 1>;
    btfloat8Cmp(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$10<0 | 1>;
    cbrt(this: export_default$14<1>): export_default$14<1>;
    cbrt(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    cbrt(this: export_default$14<number>): export_default$14<0 | 1>;
    ceil(this: export_default$14<1>): export_default$14<1>;
    ceil(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    ceil(this: export_default$14<number>): export_default$14<0 | 1>;
    ceiling(this: export_default$14<1>): export_default$14<1>;
    ceiling(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    ceiling(this: export_default$14<number>): export_default$14<0 | 1>;
    corr(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    cos(this: export_default$14<1>): export_default$14<1>;
    cos(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    cos(this: export_default$14<number>): export_default$14<0 | 1>;
    cosd(this: export_default$14<1>): export_default$14<1>;
    cosd(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    cosd(this: export_default$14<number>): export_default$14<0 | 1>;
    cosh(this: export_default$14<1>): export_default$14<1>;
    cosh(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    cosh(this: export_default$14<number>): export_default$14<0 | 1>;
    cot(this: export_default$14<1>): export_default$14<1>;
    cot(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    cot(this: export_default$14<number>): export_default$14<0 | 1>;
    cotd(this: export_default$14<1>): export_default$14<1>;
    cotd(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    cotd(this: export_default$14<number>): export_default$14<0 | 1>;
    covarPop(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    covarSamp(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    dcbrt(this: export_default$14<1>): export_default$14<1>;
    dcbrt(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    dcbrt(this: export_default$14<number>): export_default$14<0 | 1>;
    degrees(this: export_default$14<1>): export_default$14<1>;
    degrees(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    degrees(this: export_default$14<number>): export_default$14<0 | 1>;
    dexp(this: export_default$14<1>): export_default$14<1>;
    dexp(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    dexp(this: export_default$14<number>): export_default$14<0 | 1>;
    dlog1(this: export_default$14<1>): export_default$14<1>;
    dlog1(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    dlog1(this: export_default$14<number>): export_default$14<0 | 1>;
    dlog10(this: export_default$14<1>): export_default$14<1>;
    dlog10(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    dlog10(this: export_default$14<number>): export_default$14<0 | 1>;
    dpow(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    dpow(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    dpow(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    dround(this: export_default$14<1>): export_default$14<1>;
    dround(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    dround(this: export_default$14<number>): export_default$14<0 | 1>;
    dsqrt(this: export_default$14<1>): export_default$14<1>;
    dsqrt(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    dsqrt(this: export_default$14<number>): export_default$14<0 | 1>;
    dtrunc(this: export_default$14<1>): export_default$14<1>;
    dtrunc(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    dtrunc(this: export_default$14<number>): export_default$14<0 | 1>;
    erf(this: export_default$14<1>): export_default$14<1>;
    erf(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    erf(this: export_default$14<number>): export_default$14<0 | 1>;
    erfc(this: export_default$14<1>): export_default$14<1>;
    erfc(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    erfc(this: export_default$14<number>): export_default$14<0 | 1>;
    exp(this: export_default$14<1>): export_default$14<1>;
    exp(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    exp(this: export_default$14<number>): export_default$14<0 | 1>;
    float4(this: export_default$14<1>): export_default$15<1>;
    float4(this: export_default$14<0 | 1>): export_default$15<0 | 1>;
    float4(this: export_default$14<number>): export_default$15<0 | 1>;
    float84Div(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$14<1>;
    float84Div(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    float84Div(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    float84Eq(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float84Eq(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Eq(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Ge(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float84Ge(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Ge(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Gt(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float84Gt(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Gt(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Le(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float84Le(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Le(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Lt(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float84Lt(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Lt(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Mi(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$14<1>;
    float84Mi(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    float84Mi(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    float84Mul(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$14<1>;
    float84Mul(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    float84Mul(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    float84Ne(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    float84Ne(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Ne(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    float84Pl(this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$14<1>;
    float84Pl(this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    float84Pl(this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    float8Abs(this: export_default$14<1>): export_default$14<1>;
    float8Abs(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    float8Abs(this: export_default$14<number>): export_default$14<0 | 1>;
    float8Div(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float8Div(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Div(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Eq(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float8Eq(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Eq(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Ge(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float8Ge(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Ge(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Gt(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float8Gt(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Gt(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Larger(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float8Larger(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Larger(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Le(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float8Le(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Le(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Lt(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float8Lt(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Lt(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Mi(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float8Mi(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Mi(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Mul(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float8Mul(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Mul(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Ne(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    float8Ne(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Ne(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    float8Pl(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float8Pl(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Pl(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Smaller(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    float8Smaller(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Smaller(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    float8Um(this: export_default$14<1>): export_default$14<1>;
    float8Um(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    float8Um(this: export_default$14<number>): export_default$14<0 | 1>;
    float8Up(this: export_default$14<1>): export_default$14<1>;
    float8Up(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    float8Up(this: export_default$14<number>): export_default$14<0 | 1>;
    floor(this: export_default$14<1>): export_default$14<1>;
    floor(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    floor(this: export_default$14<number>): export_default$14<0 | 1>;
    flt8MulCash(this: export_default$14<1>, a1: export_default$N<1>): export_default$N<1>;
    flt8MulCash(this: export_default$14<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    flt8MulCash(this: export_default$14<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    hashfloat8(this: export_default$14<1>): export_default$10<1>;
    hashfloat8(this: export_default$14<0 | 1>): export_default$10<0 | 1>;
    hashfloat8(this: export_default$14<number>): export_default$10<0 | 1>;
    hashfloat8Extended(this: export_default$14<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashfloat8Extended(this: export_default$14<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashfloat8Extended(this: export_default$14<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    inRange(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>, a2: export_default$14<1> | Input<export_default$14<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>, a2: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>, a2: export_default$14<number> | Input<export_default$14<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    int2(this: export_default$14<1>): export_default$12<1>;
    int2(this: export_default$14<0 | 1>): export_default$12<0 | 1>;
    int2(this: export_default$14<number>): export_default$12<0 | 1>;
    int4(this: export_default$14<1>): export_default$10<1>;
    int4(this: export_default$14<0 | 1>): export_default$10<0 | 1>;
    int4(this: export_default$14<number>): export_default$10<0 | 1>;
    int8(this: export_default$14<1>): export_default$Z<1>;
    int8(this: export_default$14<0 | 1>): export_default$Z<0 | 1>;
    int8(this: export_default$14<number>): export_default$Z<0 | 1>;
    ln(this: export_default$14<1>): export_default$14<1>;
    ln(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    ln(this: export_default$14<number>): export_default$14<0 | 1>;
    log(this: export_default$14<1>): export_default$14<1>;
    log(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    log(this: export_default$14<number>): export_default$14<0 | 1>;
    log10(this: export_default$14<1>): export_default$14<1>;
    log10(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    log10(this: export_default$14<number>): export_default$14<0 | 1>;
    max(this: export_default$14<number>): export_default$14<0 | 1>;
    mulDInterval(this: export_default$14<1>, a1: export_default$W<1>): export_default$W<1>;
    mulDInterval(this: export_default$14<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
    mulDInterval(this: export_default$14<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    numeric(this: export_default$14<1>): export_default$L<1>;
    numeric(this: export_default$14<0 | 1>): export_default$L<0 | 1>;
    numeric(this: export_default$14<number>): export_default$L<0 | 1>;
    percentileCont(this: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
    percentileCont(this: export_default$14<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    percentileDisc<T extends Any>(this: export_default$14<number>, a1: T | Input<T>): T;
    pgSleep(this: export_default$14<1>): export_default$4<1>;
    pgSleep(this: export_default$14<0 | 1>): export_default$4<0 | 1>;
    pgSleep(this: export_default$14<number>): export_default$4<0 | 1>;
    point(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$A<1>;
    point(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$A<0 | 1>;
    point(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$A<0 | 1>;
    pow(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    pow(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    pow(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    power(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    power(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    power(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    radians(this: export_default$14<1>): export_default$14<1>;
    radians(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    radians(this: export_default$14<number>): export_default$14<0 | 1>;
    randomNormal(this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    randomNormal(this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    randomNormal(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    regrAvgx(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    regrAvgy(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    regrCount(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$Z<0 | 1>;
    regrIntercept(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    regrR2(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    regrSlope(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    regrSxx(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    regrSxy(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    regrSyy(this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    round(this: export_default$14<1>): export_default$14<1>;
    round(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    round(this: export_default$14<number>): export_default$14<0 | 1>;
    setseed(this: export_default$14<1>): export_default$4<1>;
    setseed(this: export_default$14<0 | 1>): export_default$4<0 | 1>;
    setseed(this: export_default$14<number>): export_default$4<0 | 1>;
    sign(this: export_default$14<1>): export_default$14<1>;
    sign(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    sign(this: export_default$14<number>): export_default$14<0 | 1>;
    sind(this: export_default$14<1>): export_default$14<1>;
    sind(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    sind(this: export_default$14<number>): export_default$14<0 | 1>;
    sinh(this: export_default$14<1>): export_default$14<1>;
    sinh(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    sinh(this: export_default$14<number>): export_default$14<0 | 1>;
    sqrt(this: export_default$14<1>): export_default$14<1>;
    sqrt(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    sqrt(this: export_default$14<number>): export_default$14<0 | 1>;
    stddev(this: export_default$14<number>): export_default$14<0 | 1>;
    stddevPop(this: export_default$14<number>): export_default$14<0 | 1>;
    stddevSamp(this: export_default$14<number>): export_default$14<0 | 1>;
    sum(this: export_default$14<number>): export_default$14<0 | 1>;
    tan(this: export_default$14<1>): export_default$14<1>;
    tan(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    tan(this: export_default$14<number>): export_default$14<0 | 1>;
    tand(this: export_default$14<1>): export_default$14<1>;
    tand(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    tand(this: export_default$14<number>): export_default$14<0 | 1>;
    tanh(this: export_default$14<1>): export_default$14<1>;
    tanh(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    tanh(this: export_default$14<number>): export_default$14<0 | 1>;
    toChar(this: export_default$14<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    toChar(this: export_default$14<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toChar(this: export_default$14<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toTimestamp(this: export_default$14<1>): export_default$h<1>;
    toTimestamp(this: export_default$14<0 | 1>): export_default$h<0 | 1>;
    toTimestamp(this: export_default$14<number>): export_default$h<0 | 1>;
    trunc(this: export_default$14<1>): export_default$14<1>;
    trunc(this: export_default$14<0 | 1>): export_default$14<0 | 1>;
    trunc(this: export_default$14<number>): export_default$14<0 | 1>;
    varPop(this: export_default$14<number>): export_default$14<0 | 1>;
    varSamp(this: export_default$14<number>): export_default$14<0 | 1>;
    variance(this: export_default$14<number>): export_default$14<0 | 1>;
    ["^"](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    ["^"](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    ["^"](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    ["/"](this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$14<1>;
    ["/"](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    ["/"](this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    ["/"](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    ["/"](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    ["/"](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    ["="](this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["-"](this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$14<1>;
    ["-"](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    ["-"](this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    ["-"](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    ["-"](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    ["-"](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    ["*"](this: export_default$14<1>, a1: export_default$15<1>): export_default$14<1>;
    ["*"](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$14<0 | 1>;
    ["*"](this: export_default$14<number>, a1: export_default$15<number>): export_default$14<0 | 1>;
    ["*"](this: export_default$14<1>, a1: export_default$14<1>): export_default$14<1>;
    ["*"](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
    ["*"](this: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
    ["*"](this: export_default$14<1>, a1: export_default$N<1>): export_default$N<1>;
    ["*"](this: export_default$14<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    ["*"](this: export_default$14<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    ["*"](this: export_default$14<1>, a1: export_default$W<1>): export_default$W<1>;
    ["*"](this: export_default$14<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
    ["*"](this: export_default$14<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    ["<>"](this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$1g<0 | 1>;
    ["+"](this: export_default$14<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$14<1>;
    ["+"](this: export_default$14<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    ["+"](this: export_default$14<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$14<0 | 1>;
    ["+"](this: export_default$14<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$14<1>;
    ["+"](this: export_default$14<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
    ["+"](this: export_default$14<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$14<0 | 1>;
}

type Parsed$11 = string;
type SerializeParam$11 = string;
declare class export_default$13<N extends number> extends Any<Parsed$11, N> {
    static new(v: SerializeParam$11): export_default$13<1>;
    static new(v: null): export_default$13<0>;
    static new(v: Expression): export_default$13<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$13<number> | undefined;
    abbrev(this: export_default$13<1>): export_default$l<1>;
    abbrev(this: export_default$13<0 | 1>): export_default$l<0 | 1>;
    abbrev(this: export_default$13<number>): export_default$l<0 | 1>;
    broadcast(this: export_default$13<1>): export_default$13<1>;
    broadcast(this: export_default$13<0 | 1>): export_default$13<0 | 1>;
    broadcast(this: export_default$13<number>): export_default$13<0 | 1>;
    cidr(this: export_default$13<1>): export_default$1a<1>;
    cidr(this: export_default$13<0 | 1>): export_default$1a<0 | 1>;
    cidr(this: export_default$13<number>): export_default$1a<0 | 1>;
    family(this: export_default$13<1>): export_default$10<1>;
    family(this: export_default$13<0 | 1>): export_default$10<0 | 1>;
    family(this: export_default$13<number>): export_default$10<0 | 1>;
    hashinet(this: export_default$13<1>): export_default$10<1>;
    hashinet(this: export_default$13<0 | 1>): export_default$10<0 | 1>;
    hashinet(this: export_default$13<number>): export_default$10<0 | 1>;
    hashinetextended(this: export_default$13<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashinetextended(this: export_default$13<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashinetextended(this: export_default$13<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    host(this: export_default$13<1>): export_default$l<1>;
    host(this: export_default$13<0 | 1>): export_default$l<0 | 1>;
    host(this: export_default$13<number>): export_default$l<0 | 1>;
    hostmask(this: export_default$13<1>): export_default$13<1>;
    hostmask(this: export_default$13<0 | 1>): export_default$13<0 | 1>;
    hostmask(this: export_default$13<number>): export_default$13<0 | 1>;
    inetMerge(this: export_default$13<1>, a1: export_default$13<1>): export_default$1a<1>;
    inetMerge(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1a<0 | 1>;
    inetMerge(this: export_default$13<number>, a1: export_default$13<number>): export_default$1a<0 | 1>;
    inetSameFamily(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    inetSameFamily(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    inetSameFamily(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    inetand(this: export_default$13<1>, a1: export_default$13<1>): export_default$13<1>;
    inetand(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
    inetand(this: export_default$13<number>, a1: export_default$13<number>): export_default$13<0 | 1>;
    inetmi(this: export_default$13<1>, a1: export_default$13<1>): export_default$Z<1>;
    inetmi(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$Z<0 | 1>;
    inetmi(this: export_default$13<number>, a1: export_default$13<number>): export_default$Z<0 | 1>;
    inetmiInt8(this: export_default$13<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$13<1>;
    inetmiInt8(this: export_default$13<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$13<0 | 1>;
    inetmiInt8(this: export_default$13<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$13<0 | 1>;
    inetnot(this: export_default$13<1>): export_default$13<1>;
    inetnot(this: export_default$13<0 | 1>): export_default$13<0 | 1>;
    inetnot(this: export_default$13<number>): export_default$13<0 | 1>;
    inetor(this: export_default$13<1>, a1: export_default$13<1>): export_default$13<1>;
    inetor(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
    inetor(this: export_default$13<number>, a1: export_default$13<number>): export_default$13<0 | 1>;
    inetpl(this: export_default$13<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$13<1>;
    inetpl(this: export_default$13<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$13<0 | 1>;
    inetpl(this: export_default$13<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$13<0 | 1>;
    masklen(this: export_default$13<1>): export_default$10<1>;
    masklen(this: export_default$13<0 | 1>): export_default$10<0 | 1>;
    masklen(this: export_default$13<number>): export_default$10<0 | 1>;
    max(this: export_default$13<number>): export_default$13<0 | 1>;
    netmask(this: export_default$13<1>): export_default$13<1>;
    netmask(this: export_default$13<0 | 1>): export_default$13<0 | 1>;
    netmask(this: export_default$13<number>): export_default$13<0 | 1>;
    network(this: export_default$13<1>): export_default$1a<1>;
    network(this: export_default$13<0 | 1>): export_default$1a<0 | 1>;
    network(this: export_default$13<number>): export_default$1a<0 | 1>;
    networkCmp(this: export_default$13<1>, a1: export_default$13<1>): export_default$10<1>;
    networkCmp(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$10<0 | 1>;
    networkCmp(this: export_default$13<number>, a1: export_default$13<number>): export_default$10<0 | 1>;
    networkEq(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkEq(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkEq(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkGe(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkGe(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkGe(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkGt(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkGt(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkGt(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkLarger(this: export_default$13<1>, a1: export_default$13<1>): export_default$13<1>;
    networkLarger(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
    networkLarger(this: export_default$13<number>, a1: export_default$13<number>): export_default$13<0 | 1>;
    networkLe(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkLe(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkLe(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkLt(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkLt(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkLt(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkNe(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkNe(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkNe(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkOverlap(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkOverlap(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkOverlap(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkSmaller(this: export_default$13<1>, a1: export_default$13<1>): export_default$13<1>;
    networkSmaller(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
    networkSmaller(this: export_default$13<number>, a1: export_default$13<number>): export_default$13<0 | 1>;
    networkSub(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkSub(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkSub(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkSubeq(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkSubeq(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkSubeq(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkSup(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkSup(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkSup(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    networkSupeq(this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    networkSupeq(this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    networkSupeq(this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    setMasklen(this: export_default$13<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$13<1>;
    setMasklen(this: export_default$13<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$13<0 | 1>;
    setMasklen(this: export_default$13<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$13<0 | 1>;
    text(this: export_default$13<1>): export_default$l<1>;
    text(this: export_default$13<0 | 1>): export_default$l<0 | 1>;
    text(this: export_default$13<number>): export_default$l<0 | 1>;
    ["&"](this: export_default$13<1>, a1: export_default$13<1>): export_default$13<1>;
    ["&"](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
    ["&"](this: export_default$13<number>, a1: export_default$13<number>): export_default$13<0 | 1>;
    ["-"](this: export_default$13<1>, a1: export_default$13<1>): export_default$Z<1>;
    ["-"](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$Z<0 | 1>;
    ["-"](this: export_default$13<number>, a1: export_default$13<number>): export_default$Z<0 | 1>;
    ["-"](this: export_default$13<1>, a1: export_default$Z<1>): export_default$13<1>;
    ["-"](this: export_default$13<0 | 1>, a1: export_default$Z<0 | 1>): export_default$13<0 | 1>;
    ["-"](this: export_default$13<number>, a1: export_default$Z<number>): export_default$13<0 | 1>;
    ["|"](this: export_default$13<1>, a1: export_default$13<1>): export_default$13<1>;
    ["|"](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
    ["|"](this: export_default$13<number>, a1: export_default$13<number>): export_default$13<0 | 1>;
    ["+"](this: export_default$13<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$13<1>;
    ["+"](this: export_default$13<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$13<0 | 1>;
    ["+"](this: export_default$13<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$13<0 | 1>;
    ["="](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    ["="](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    [">="](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    [">"](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    ["<="](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    ["<"](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    ["<>"](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    ["&&"](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    ["&&"](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    ["&&"](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    ["<<"](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    ["<<="](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    ["<<="](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    ["<<="](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    [">>"](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    [">>"](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    [">>"](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
    [">>="](this: export_default$13<1>, a1: export_default$13<1>): export_default$1g<1>;
    [">>="](this: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
    [">>="](this: export_default$13<number>, a1: export_default$13<number>): export_default$1g<0 | 1>;
}

type Parsed$10 = ReturnType<typeof typeMap["int2"]['parse']>;
type SerializeParam$10 = Parameters<typeof typeMap["int2"]['serialize']>[0];
declare class export_default$12<N extends number> extends Any<Parsed$10, N> {
    static new(v: SerializeParam$10): export_default$12<1>;
    static new(v: null): export_default$12<0>;
    static new(v: Expression): export_default$12<0 | 1>;
    static serializeParamTypes: readonly SerializeParam$10[] | undefined;
    static parse(v: string): number;
    static typeString(): string | undefined;
    asAggregate(): export_default$12<number> | undefined;
    abs(this: export_default$12<1>): export_default$12<1>;
    abs(this: export_default$12<0 | 1>): export_default$12<0 | 1>;
    abs(this: export_default$12<number>): export_default$12<0 | 1>;
    avg(this: export_default$12<number>): export_default$L<0 | 1>;
    bitAnd(this: export_default$12<number>): export_default$12<0 | 1>;
    bitOr(this: export_default$12<number>): export_default$12<0 | 1>;
    bitXor(this: export_default$12<number>): export_default$12<0 | 1>;
    btint24Cmp(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    btint24Cmp(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    btint24Cmp(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    btint28Cmp(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$10<1>;
    btint28Cmp(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    btint28Cmp(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    btint2Cmp(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$10<1>;
    btint2Cmp(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    btint2Cmp(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    float4(this: export_default$12<1>): export_default$15<1>;
    float4(this: export_default$12<0 | 1>): export_default$15<0 | 1>;
    float4(this: export_default$12<number>): export_default$15<0 | 1>;
    float8(this: export_default$12<1>): export_default$14<1>;
    float8(this: export_default$12<0 | 1>): export_default$14<0 | 1>;
    float8(this: export_default$12<number>): export_default$14<0 | 1>;
    hashint2(this: export_default$12<1>): export_default$10<1>;
    hashint2(this: export_default$12<0 | 1>): export_default$10<0 | 1>;
    hashint2(this: export_default$12<number>): export_default$10<0 | 1>;
    hashint2Extended(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashint2Extended(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashint2Extended(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    inRange(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>, a2: export_default$12<1> | Input<export_default$12<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a2: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>, a2: export_default$12<number> | Input<export_default$12<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>, a2: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a2: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>, a2: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    int24Div(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int24Div(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int24Div(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int24Eq(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int24Eq(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Eq(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Ge(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int24Ge(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Ge(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Gt(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int24Gt(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Gt(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Le(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int24Le(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Le(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Lt(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int24Lt(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Lt(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Mi(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int24Mi(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int24Mi(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int24Mul(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int24Mul(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int24Mul(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int24Ne(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int24Ne(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Ne(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int24Pl(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int24Pl(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int24Pl(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int28Div(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int28Div(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int28Div(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int28Eq(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int28Eq(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Eq(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Ge(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int28Ge(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Ge(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Gt(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int28Gt(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Gt(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Le(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int28Le(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Le(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Lt(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int28Lt(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Lt(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Mi(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int28Mi(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int28Mi(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int28Mul(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int28Mul(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int28Mul(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int28Ne(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int28Ne(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Ne(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int28Pl(this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int28Pl(this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int28Pl(this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int2MulCash(this: export_default$12<1>, a1: export_default$N<1>): export_default$N<1>;
    int2MulCash(this: export_default$12<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    int2MulCash(this: export_default$12<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    int2Abs(this: export_default$12<1>): export_default$12<1>;
    int2Abs(this: export_default$12<0 | 1>): export_default$12<0 | 1>;
    int2Abs(this: export_default$12<number>): export_default$12<0 | 1>;
    int2And(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2And(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2And(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Div(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2Div(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Div(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Eq(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int2Eq(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Eq(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Ge(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int2Ge(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Ge(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Gt(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int2Gt(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Gt(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Larger(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2Larger(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Larger(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Le(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int2Le(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Le(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Lt(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int2Lt(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Lt(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Mi(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2Mi(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Mi(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Mod(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2Mod(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Mod(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Mul(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2Mul(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Mul(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Ne(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int2Ne(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Ne(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int2Not(this: export_default$12<1>): export_default$12<1>;
    int2Not(this: export_default$12<0 | 1>): export_default$12<0 | 1>;
    int2Not(this: export_default$12<number>): export_default$12<0 | 1>;
    int2Or(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2Or(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Or(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Pl(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2Pl(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Pl(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Shl(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$12<1>;
    int2Shl(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$12<0 | 1>;
    int2Shl(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$12<0 | 1>;
    int2Shr(this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$12<1>;
    int2Shr(this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$12<0 | 1>;
    int2Shr(this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$12<0 | 1>;
    int2Smaller(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2Smaller(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Smaller(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Um(this: export_default$12<1>): export_default$12<1>;
    int2Um(this: export_default$12<0 | 1>): export_default$12<0 | 1>;
    int2Um(this: export_default$12<number>): export_default$12<0 | 1>;
    int2Up(this: export_default$12<1>): export_default$12<1>;
    int2Up(this: export_default$12<0 | 1>): export_default$12<0 | 1>;
    int2Up(this: export_default$12<number>): export_default$12<0 | 1>;
    int2Xor(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    int2Xor(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int2Xor(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    int4(this: export_default$12<1>): export_default$10<1>;
    int4(this: export_default$12<0 | 1>): export_default$10<0 | 1>;
    int4(this: export_default$12<number>): export_default$10<0 | 1>;
    int8(this: export_default$12<1>): export_default$Z<1>;
    int8(this: export_default$12<0 | 1>): export_default$Z<0 | 1>;
    int8(this: export_default$12<number>): export_default$Z<0 | 1>;
    max(this: export_default$12<number>): export_default$12<0 | 1>;
    mod(this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    mod(this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    mod(this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    numeric(this: export_default$12<1>): export_default$L<1>;
    numeric(this: export_default$12<0 | 1>): export_default$L<0 | 1>;
    numeric(this: export_default$12<number>): export_default$L<0 | 1>;
    stddev(this: export_default$12<number>): export_default$L<0 | 1>;
    stddevPop(this: export_default$12<number>): export_default$L<0 | 1>;
    stddevSamp(this: export_default$12<number>): export_default$L<0 | 1>;
    sum(this: export_default$12<number>): export_default$Z<0 | 1>;
    varPop(this: export_default$12<number>): export_default$L<0 | 1>;
    varSamp(this: export_default$12<number>): export_default$L<0 | 1>;
    variance(this: export_default$12<number>): export_default$L<0 | 1>;
    ["/"](this: export_default$12<1>, a1: export_default$10<1>): export_default$10<1>;
    ["/"](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
    ["/"](this: export_default$12<number>, a1: export_default$10<number>): export_default$10<0 | 1>;
    ["/"](this: export_default$12<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["/"](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["/"](this: export_default$12<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["/"](this: export_default$12<1>, a1: export_default$12<1>): export_default$12<1>;
    ["/"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
    ["/"](this: export_default$12<number>, a1: export_default$12<number>): export_default$12<0 | 1>;
    ["="](this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["-"](this: export_default$12<1>, a1: export_default$10<1>): export_default$10<1>;
    ["-"](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
    ["-"](this: export_default$12<number>, a1: export_default$10<number>): export_default$10<0 | 1>;
    ["-"](this: export_default$12<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["-"](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["-"](this: export_default$12<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["-"](this: export_default$12<1>, a1: export_default$12<1>): export_default$12<1>;
    ["-"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
    ["-"](this: export_default$12<number>, a1: export_default$12<number>): export_default$12<0 | 1>;
    ["*"](this: export_default$12<1>, a1: export_default$10<1>): export_default$10<1>;
    ["*"](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
    ["*"](this: export_default$12<number>, a1: export_default$10<number>): export_default$10<0 | 1>;
    ["*"](this: export_default$12<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["*"](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["*"](this: export_default$12<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["*"](this: export_default$12<1>, a1: export_default$N<1>): export_default$N<1>;
    ["*"](this: export_default$12<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    ["*"](this: export_default$12<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    ["*"](this: export_default$12<1>, a1: export_default$12<1>): export_default$12<1>;
    ["*"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
    ["*"](this: export_default$12<number>, a1: export_default$12<number>): export_default$12<0 | 1>;
    ["<>"](this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$12<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$12<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["+"](this: export_default$12<1>, a1: export_default$10<1>): export_default$10<1>;
    ["+"](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
    ["+"](this: export_default$12<number>, a1: export_default$10<number>): export_default$10<0 | 1>;
    ["+"](this: export_default$12<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["+"](this: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["+"](this: export_default$12<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["+"](this: export_default$12<1>, a1: export_default$12<1>): export_default$12<1>;
    ["+"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
    ["+"](this: export_default$12<number>, a1: export_default$12<number>): export_default$12<0 | 1>;
    ["&"](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    ["&"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    ["&"](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    ["%"](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    ["%"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    ["%"](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    ["|"](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    ["|"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    ["|"](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    ["<<"](this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$12<1>;
    ["<<"](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$12<0 | 1>;
    ["<<"](this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$12<0 | 1>;
    [">>"](this: export_default$12<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$12<1>;
    [">>"](this: export_default$12<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$12<0 | 1>;
    [">>"](this: export_default$12<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$12<0 | 1>;
    ["#"](this: export_default$12<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$12<1>;
    ["#"](this: export_default$12<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
    ["#"](this: export_default$12<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$12<0 | 1>;
}

type Parsed$$ = string;
type SerializeParam$$ = string;
declare class export_default$11<N extends number> extends Any<Parsed$$, N> {
    static new(v: SerializeParam$$): export_default$11<1>;
    static new(v: null): export_default$11<0>;
    static new(v: Expression): export_default$11<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$11<number> | undefined;
}

type Parsed$_ = ReturnType<typeof typeMap["int4"]['parse']>;
type SerializeParam$_ = Parameters<typeof typeMap["int4"]['serialize']>[0];
declare class export_default$10<N extends number> extends Any<Parsed$_, N> {
    static new(v: SerializeParam$_): export_default$10<1>;
    static new(v: null): export_default$10<0>;
    static new(v: Expression): export_default$10<0 | 1>;
    static serializeParamTypes: readonly SerializeParam$_[] | undefined;
    static parse(v: string): number;
    static typeString(): string | undefined;
    asAggregate(): export_default$10<number> | undefined;
    abs(this: export_default$10<1>): export_default$10<1>;
    abs(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    abs(this: export_default$10<number>): export_default$10<0 | 1>;
    avg(this: export_default$10<number>): export_default$L<0 | 1>;
    bit(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    bit(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    bit(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    bitAnd(this: export_default$10<number>): export_default$10<0 | 1>;
    bitOr(this: export_default$10<number>): export_default$10<0 | 1>;
    bitXor(this: export_default$10<number>): export_default$10<0 | 1>;
    bool(this: export_default$10<1>): export_default$1g<1>;
    bool(this: export_default$10<0 | 1>): export_default$1g<0 | 1>;
    bool(this: export_default$10<number>): export_default$1g<0 | 1>;
    btint42Cmp(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$10<1>;
    btint42Cmp(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    btint42Cmp(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    btint48Cmp(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$10<1>;
    btint48Cmp(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    btint48Cmp(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    btint4Cmp(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    btint4Cmp(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    btint4Cmp(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    char(this: export_default$10<1>): export_default$1c<1>;
    char(this: export_default$10<0 | 1>): export_default$1c<0 | 1>;
    char(this: export_default$10<number>): export_default$1c<0 | 1>;
    chr(this: export_default$10<1>): export_default$l<1>;
    chr(this: export_default$10<0 | 1>): export_default$l<0 | 1>;
    chr(this: export_default$10<number>): export_default$l<0 | 1>;
    float4(this: export_default$10<1>): export_default$15<1>;
    float4(this: export_default$10<0 | 1>): export_default$15<0 | 1>;
    float4(this: export_default$10<number>): export_default$15<0 | 1>;
    float8(this: export_default$10<1>): export_default$14<1>;
    float8(this: export_default$10<0 | 1>): export_default$14<0 | 1>;
    float8(this: export_default$10<number>): export_default$14<0 | 1>;
    gcd(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    gcd(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    gcd(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    generateSeries(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): Setof<{
        from: {};
    }>;
    hashint4(this: export_default$10<1>): export_default$10<1>;
    hashint4(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    hashint4(this: export_default$10<number>): export_default$10<0 | 1>;
    hashint4Extended(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashint4Extended(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashint4Extended(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    inRange(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$12<1> | Input<export_default$12<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$12<number> | Input<export_default$12<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    int2(this: export_default$10<1>): export_default$12<1>;
    int2(this: export_default$10<0 | 1>): export_default$12<0 | 1>;
    int2(this: export_default$10<number>): export_default$12<0 | 1>;
    int42Div(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$10<1>;
    int42Div(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    int42Div(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    int42Eq(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int42Eq(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Eq(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Ge(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int42Ge(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Ge(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Gt(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int42Gt(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Gt(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Le(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int42Le(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Le(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Lt(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int42Lt(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Lt(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Mi(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$10<1>;
    int42Mi(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    int42Mi(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    int42Mul(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$10<1>;
    int42Mul(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    int42Mul(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    int42Ne(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int42Ne(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Ne(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int42Pl(this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$10<1>;
    int42Pl(this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    int42Pl(this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    int48Div(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int48Div(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int48Div(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int48Eq(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int48Eq(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Eq(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Ge(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int48Ge(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Ge(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Gt(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int48Gt(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Gt(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Le(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int48Le(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Le(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Lt(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int48Lt(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Lt(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Mi(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int48Mi(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int48Mi(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int48Mul(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int48Mul(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int48Mul(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int48Ne(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int48Ne(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Ne(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int48Pl(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int48Pl(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int48Pl(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int4MulCash(this: export_default$10<1>, a1: export_default$N<1>): export_default$N<1>;
    int4MulCash(this: export_default$10<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    int4MulCash(this: export_default$10<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    int4Abs(this: export_default$10<1>): export_default$10<1>;
    int4Abs(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    int4Abs(this: export_default$10<number>): export_default$10<0 | 1>;
    int4And(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4And(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4And(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Div(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Div(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Div(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Eq(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int4Eq(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Eq(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Ge(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int4Ge(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Ge(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Gt(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int4Gt(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Gt(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Inc(this: export_default$10<1>): export_default$10<1>;
    int4Inc(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    int4Inc(this: export_default$10<number>): export_default$10<0 | 1>;
    int4Larger(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Larger(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Larger(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Le(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int4Le(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Le(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Lt(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int4Lt(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Lt(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Mi(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Mi(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Mi(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Mod(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Mod(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Mod(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Mul(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Mul(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Mul(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Ne(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int4Ne(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Ne(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int4Not(this: export_default$10<1>): export_default$10<1>;
    int4Not(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    int4Not(this: export_default$10<number>): export_default$10<0 | 1>;
    int4Or(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Or(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Or(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Pl(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Pl(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Pl(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Range(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$_<1>;
    int4Range(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$_<0 | 1>;
    int4Range(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$_<0 | 1>;
    int4Range(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$_<1>;
    int4Range(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$_<0 | 1>;
    int4Range(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$_<0 | 1>;
    int4RangeSubdiff(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$14<1>;
    int4RangeSubdiff(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$14<0 | 1>;
    int4RangeSubdiff(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$14<0 | 1>;
    int4Shl(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Shl(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Shl(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Shr(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Shr(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Shr(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Smaller(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Smaller(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Smaller(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Um(this: export_default$10<1>): export_default$10<1>;
    int4Um(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    int4Um(this: export_default$10<number>): export_default$10<0 | 1>;
    int4Up(this: export_default$10<1>): export_default$10<1>;
    int4Up(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    int4Up(this: export_default$10<number>): export_default$10<0 | 1>;
    int4Xor(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    int4Xor(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int4Xor(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    int8(this: export_default$10<1>): export_default$Z<1>;
    int8(this: export_default$10<0 | 1>): export_default$Z<0 | 1>;
    int8(this: export_default$10<number>): export_default$Z<0 | 1>;
    integerPlDate(this: export_default$10<1>, a1: export_default$18<1>): export_default$18<1>;
    integerPlDate(this: export_default$10<0 | 1>, a1: export_default$18<0 | 1>): export_default$18<0 | 1>;
    integerPlDate(this: export_default$10<number>, a1: export_default$18<number>): export_default$18<0 | 1>;
    lcm(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    lcm(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    lcm(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    loClose(this: export_default$10<1>): export_default$10<1>;
    loClose(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    loClose(this: export_default$10<number>): export_default$10<0 | 1>;
    loCreat(this: export_default$10<1>): export_default$I<1>;
    loCreat(this: export_default$10<0 | 1>): export_default$I<0 | 1>;
    loCreat(this: export_default$10<number>): export_default$I<0 | 1>;
    loLseek(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    loLseek(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    loLseek(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    loLseek64(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    loLseek64(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    loLseek64(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    loTell(this: export_default$10<1>): export_default$10<1>;
    loTell(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    loTell(this: export_default$10<number>): export_default$10<0 | 1>;
    loTell64(this: export_default$10<1>): export_default$Z<1>;
    loTell64(this: export_default$10<0 | 1>): export_default$Z<0 | 1>;
    loTell64(this: export_default$10<number>): export_default$Z<0 | 1>;
    loTruncate(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    loTruncate(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    loTruncate(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    loTruncate64(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$10<1>;
    loTruncate64(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    loTruncate64(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    loread(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    loread(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    loread(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    lowrite(this: export_default$10<1>, a1: export_default$1d<1>): export_default$10<1>;
    lowrite(this: export_default$10<0 | 1>, a1: export_default$1d<0 | 1>): export_default$10<0 | 1>;
    lowrite(this: export_default$10<number>, a1: export_default$1d<number>): export_default$10<0 | 1>;
    makeDate(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$18<1>;
    makeDate(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$18<0 | 1>;
    makeDate(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$18<0 | 1>;
    makeInterval(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$10<1> | Input<export_default$10<0 | 1>>, a5: export_default$10<1> | Input<export_default$10<0 | 1>>, a6: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$W<1>;
    makeInterval(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a5: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a6: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    makeInterval(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$10<number> | Input<export_default$10<0 | 1>>, a5: export_default$10<number> | Input<export_default$10<0 | 1>>, a6: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    makeTime(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$j<1>;
    makeTime(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$j<0 | 1>;
    makeTime(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$j<0 | 1>;
    makeTimestamp(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$10<1> | Input<export_default$10<0 | 1>>, a5: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$i<1>;
    makeTimestamp(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a5: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$i<0 | 1>;
    makeTimestamp(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$10<number> | Input<export_default$10<0 | 1>>, a5: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$i<0 | 1>;
    makeTimestamptz(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$10<1> | Input<export_default$10<0 | 1>>, a5: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$h<1>;
    makeTimestamptz(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a5: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$h<0 | 1>;
    makeTimestamptz(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$10<number> | Input<export_default$10<0 | 1>>, a5: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$h<0 | 1>;
    makeTimestamptz(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$10<1> | Input<export_default$10<0 | 1>>, a5: export_default$14<1> | Input<export_default$14<0 | 1>>, a6: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$h<1>;
    makeTimestamptz(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a5: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>, a6: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$h<0 | 1>;
    makeTimestamptz(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$10<number> | Input<export_default$10<0 | 1>>, a5: export_default$14<number> | Input<export_default$14<0 | 1>>, a6: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$h<0 | 1>;
    max(this: export_default$10<number>): export_default$10<0 | 1>;
    mod(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    mod(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    mod(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    money(this: export_default$10<1>): export_default$N<1>;
    money(this: export_default$10<0 | 1>): export_default$N<0 | 1>;
    money(this: export_default$10<number>): export_default$N<0 | 1>;
    ntile(this: export_default$10<1>): export_default$10<1>;
    ntile(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    ntile(this: export_default$10<number>): export_default$10<0 | 1>;
    numeric(this: export_default$10<1>): export_default$L<1>;
    numeric(this: export_default$10<0 | 1>): export_default$L<0 | 1>;
    numeric(this: export_default$10<number>): export_default$L<0 | 1>;
    pgAdvisoryLock(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$4<1>;
    pgAdvisoryLock(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$4<0 | 1>;
    pgAdvisoryLock(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$4<0 | 1>;
    pgAdvisoryLockShared(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$4<1>;
    pgAdvisoryLockShared(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$4<0 | 1>;
    pgAdvisoryLockShared(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$4<0 | 1>;
    pgAdvisoryUnlock(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    pgAdvisoryUnlock(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgAdvisoryUnlock(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgAdvisoryUnlockShared(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    pgAdvisoryUnlockShared(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgAdvisoryUnlockShared(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgAdvisoryXactLock(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$4<1>;
    pgAdvisoryXactLock(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$4<0 | 1>;
    pgAdvisoryXactLock(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$4<0 | 1>;
    pgAdvisoryXactLockShared(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$4<1>;
    pgAdvisoryXactLockShared(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$4<0 | 1>;
    pgAdvisoryXactLockShared(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$4<0 | 1>;
    pgBlockingPids(this: export_default$10<1>): Array$1<1, export_default$10<0 | 1>>;
    pgBlockingPids(this: export_default$10<0 | 1>): Array$1<0 | 1, export_default$10<0 | 1>>;
    pgBlockingPids(this: export_default$10<number>): Array$1<0 | 1, export_default$10<0 | 1>>;
    pgCancelBackend(this: export_default$10<1>): export_default$1g<1>;
    pgCancelBackend(this: export_default$10<0 | 1>): export_default$1g<0 | 1>;
    pgCancelBackend(this: export_default$10<number>): export_default$1g<0 | 1>;
    pgEncodingMaxLength(this: export_default$10<1>): export_default$10<1>;
    pgEncodingMaxLength(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    pgEncodingMaxLength(this: export_default$10<number>): export_default$10<0 | 1>;
    pgEncodingToChar(this: export_default$10<1>): export_default$M<1>;
    pgEncodingToChar(this: export_default$10<0 | 1>): export_default$M<0 | 1>;
    pgEncodingToChar(this: export_default$10<number>): export_default$M<0 | 1>;
    pgIsolationTestSessionIsBlocked(this: export_default$10<1>, a1: Array$1<1, export_default$10<0 | 1>>): export_default$1g<1>;
    pgIsolationTestSessionIsBlocked(this: export_default$10<0 | 1>, a1: Array$1<0 | 1, export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgIsolationTestSessionIsBlocked(this: export_default$10<number>, a1: Array$1<number, export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgLogBackendMemoryContexts(this: export_default$10<1>): export_default$1g<1>;
    pgLogBackendMemoryContexts(this: export_default$10<0 | 1>): export_default$1g<0 | 1>;
    pgLogBackendMemoryContexts(this: export_default$10<number>): export_default$1g<0 | 1>;
    pgSafeSnapshotBlockingPids(this: export_default$10<1>): Array$1<1, export_default$10<0 | 1>>;
    pgSafeSnapshotBlockingPids(this: export_default$10<0 | 1>): Array$1<0 | 1, export_default$10<0 | 1>>;
    pgSafeSnapshotBlockingPids(this: export_default$10<number>): Array$1<0 | 1, export_default$10<0 | 1>>;
    pgStatGetActivity(this: export_default$10<1>): Setof<{
        from: {
            datid: export_default$I<1>;
            pid: export_default$10<1>;
            usesysid: export_default$I<1>;
            application_name: export_default$l<1>;
            state: export_default$l<1>;
            query: export_default$l<1>;
            wait_event_type: export_default$l<1>;
            wait_event: export_default$l<1>;
            xact_start: export_default$h<1>;
            query_start: export_default$h<1>;
            backend_start: export_default$h<1>;
            state_change: export_default$h<1>;
            client_addr: export_default$13<1>;
            client_hostname: export_default$l<1>;
            client_port: export_default$10<1>;
            backend_xid: export_default$3<1>;
            backend_xmin: export_default$3<1>;
            backend_type: export_default$l<1>;
            ssl: export_default$1g<1>;
            sslversion: export_default$l<1>;
            sslcipher: export_default$l<1>;
            sslbits: export_default$10<1>;
            ssl_client_dn: export_default$l<1>;
            ssl_client_serial: export_default$L<1>;
            ssl_issuer_dn: export_default$l<1>;
            gss_auth: export_default$1g<1>;
            gss_princ: export_default$l<1>;
            gss_enc: export_default$1g<1>;
            gss_delegation: export_default$1g<1>;
            leader_pid: export_default$10<1>;
            query_id: export_default$Z<1>;
        };
    }>;
    pgStatGetActivity(this: export_default$10<0 | 1>): Setof<{
        from: {
            datid: export_default$I<0 | 1>;
            pid: export_default$10<0 | 1>;
            usesysid: export_default$I<0 | 1>;
            application_name: export_default$l<0 | 1>;
            state: export_default$l<0 | 1>;
            query: export_default$l<0 | 1>;
            wait_event_type: export_default$l<0 | 1>;
            wait_event: export_default$l<0 | 1>;
            xact_start: export_default$h<0 | 1>;
            query_start: export_default$h<0 | 1>;
            backend_start: export_default$h<0 | 1>;
            state_change: export_default$h<0 | 1>;
            client_addr: export_default$13<0 | 1>;
            client_hostname: export_default$l<0 | 1>;
            client_port: export_default$10<0 | 1>;
            backend_xid: export_default$3<0 | 1>;
            backend_xmin: export_default$3<0 | 1>;
            backend_type: export_default$l<0 | 1>;
            ssl: export_default$1g<0 | 1>;
            sslversion: export_default$l<0 | 1>;
            sslcipher: export_default$l<0 | 1>;
            sslbits: export_default$10<0 | 1>;
            ssl_client_dn: export_default$l<0 | 1>;
            ssl_client_serial: export_default$L<0 | 1>;
            ssl_issuer_dn: export_default$l<0 | 1>;
            gss_auth: export_default$1g<0 | 1>;
            gss_princ: export_default$l<0 | 1>;
            gss_enc: export_default$1g<0 | 1>;
            gss_delegation: export_default$1g<0 | 1>;
            leader_pid: export_default$10<0 | 1>;
            query_id: export_default$Z<0 | 1>;
        };
    }>;
    pgStatGetActivity(this: export_default$10<number>): Setof<{
        from: {
            datid: export_default$I<0 | 1>;
            pid: export_default$10<0 | 1>;
            usesysid: export_default$I<0 | 1>;
            application_name: export_default$l<0 | 1>;
            state: export_default$l<0 | 1>;
            query: export_default$l<0 | 1>;
            wait_event_type: export_default$l<0 | 1>;
            wait_event: export_default$l<0 | 1>;
            xact_start: export_default$h<0 | 1>;
            query_start: export_default$h<0 | 1>;
            backend_start: export_default$h<0 | 1>;
            state_change: export_default$h<0 | 1>;
            client_addr: export_default$13<0 | 1>;
            client_hostname: export_default$l<0 | 1>;
            client_port: export_default$10<0 | 1>;
            backend_xid: export_default$3<0 | 1>;
            backend_xmin: export_default$3<0 | 1>;
            backend_type: export_default$l<0 | 1>;
            ssl: export_default$1g<0 | 1>;
            sslversion: export_default$l<0 | 1>;
            sslcipher: export_default$l<0 | 1>;
            sslbits: export_default$10<0 | 1>;
            ssl_client_dn: export_default$l<0 | 1>;
            ssl_client_serial: export_default$L<0 | 1>;
            ssl_issuer_dn: export_default$l<0 | 1>;
            gss_auth: export_default$1g<0 | 1>;
            gss_princ: export_default$l<0 | 1>;
            gss_enc: export_default$1g<0 | 1>;
            gss_delegation: export_default$1g<0 | 1>;
            leader_pid: export_default$10<0 | 1>;
            query_id: export_default$Z<0 | 1>;
        };
    }>;
    pgStatGetBackendActivity(this: export_default$10<1>): export_default$l<1>;
    pgStatGetBackendActivity(this: export_default$10<0 | 1>): export_default$l<0 | 1>;
    pgStatGetBackendActivity(this: export_default$10<number>): export_default$l<0 | 1>;
    pgStatGetBackendActivityStart(this: export_default$10<1>): export_default$h<1>;
    pgStatGetBackendActivityStart(this: export_default$10<0 | 1>): export_default$h<0 | 1>;
    pgStatGetBackendActivityStart(this: export_default$10<number>): export_default$h<0 | 1>;
    pgStatGetBackendClientAddr(this: export_default$10<1>): export_default$13<1>;
    pgStatGetBackendClientAddr(this: export_default$10<0 | 1>): export_default$13<0 | 1>;
    pgStatGetBackendClientAddr(this: export_default$10<number>): export_default$13<0 | 1>;
    pgStatGetBackendClientPort(this: export_default$10<1>): export_default$10<1>;
    pgStatGetBackendClientPort(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    pgStatGetBackendClientPort(this: export_default$10<number>): export_default$10<0 | 1>;
    pgStatGetBackendDbid(this: export_default$10<1>): export_default$I<1>;
    pgStatGetBackendDbid(this: export_default$10<0 | 1>): export_default$I<0 | 1>;
    pgStatGetBackendDbid(this: export_default$10<number>): export_default$I<0 | 1>;
    pgStatGetBackendPid(this: export_default$10<1>): export_default$10<1>;
    pgStatGetBackendPid(this: export_default$10<0 | 1>): export_default$10<0 | 1>;
    pgStatGetBackendPid(this: export_default$10<number>): export_default$10<0 | 1>;
    pgStatGetBackendStart(this: export_default$10<1>): export_default$h<1>;
    pgStatGetBackendStart(this: export_default$10<0 | 1>): export_default$h<0 | 1>;
    pgStatGetBackendStart(this: export_default$10<number>): export_default$h<0 | 1>;
    pgStatGetBackendSubxact(this: export_default$10<1>): Record$1<1, {
        subxact_count: export_default$10<1>;
        subxact_overflowed: export_default$1g<1>;
    }>;
    pgStatGetBackendSubxact(this: export_default$10<0 | 1>): Record$1<0 | 1, {
        subxact_count: export_default$10<0 | 1>;
        subxact_overflowed: export_default$1g<0 | 1>;
    }>;
    pgStatGetBackendSubxact(this: export_default$10<number>): Record$1<0 | 1, {
        subxact_count: export_default$10<0 | 1>;
        subxact_overflowed: export_default$1g<0 | 1>;
    }>;
    pgStatGetBackendUserid(this: export_default$10<1>): export_default$I<1>;
    pgStatGetBackendUserid(this: export_default$10<0 | 1>): export_default$I<0 | 1>;
    pgStatGetBackendUserid(this: export_default$10<number>): export_default$I<0 | 1>;
    pgStatGetBackendWaitEvent(this: export_default$10<1>): export_default$l<1>;
    pgStatGetBackendWaitEvent(this: export_default$10<0 | 1>): export_default$l<0 | 1>;
    pgStatGetBackendWaitEvent(this: export_default$10<number>): export_default$l<0 | 1>;
    pgStatGetBackendWaitEventType(this: export_default$10<1>): export_default$l<1>;
    pgStatGetBackendWaitEventType(this: export_default$10<0 | 1>): export_default$l<0 | 1>;
    pgStatGetBackendWaitEventType(this: export_default$10<number>): export_default$l<0 | 1>;
    pgStatGetBackendXactStart(this: export_default$10<1>): export_default$h<1>;
    pgStatGetBackendXactStart(this: export_default$10<0 | 1>): export_default$h<0 | 1>;
    pgStatGetBackendXactStart(this: export_default$10<number>): export_default$h<0 | 1>;
    pgTerminateBackend(this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    pgTerminateBackend(this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    pgTerminateBackend(this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    pgTryAdvisoryLock(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    pgTryAdvisoryLock(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgTryAdvisoryLock(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgTryAdvisoryLockShared(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    pgTryAdvisoryLockShared(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgTryAdvisoryLockShared(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgTryAdvisoryXactLock(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    pgTryAdvisoryXactLock(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgTryAdvisoryXactLock(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgTryAdvisoryXactLockShared(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    pgTryAdvisoryXactLockShared(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    pgTryAdvisoryXactLockShared(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    polygon(this: export_default$10<1>, a1: export_default$19<1>): export_default$z<1>;
    polygon(this: export_default$10<0 | 1>, a1: export_default$19<0 | 1>): export_default$z<0 | 1>;
    polygon(this: export_default$10<number>, a1: export_default$19<number>): export_default$z<0 | 1>;
    random(this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    random(this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    random(this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    stddev(this: export_default$10<number>): export_default$L<0 | 1>;
    stddevPop(this: export_default$10<number>): export_default$L<0 | 1>;
    stddevSamp(this: export_default$10<number>): export_default$L<0 | 1>;
    sum(this: export_default$10<number>): export_default$Z<0 | 1>;
    toChar(this: export_default$10<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    toChar(this: export_default$10<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toChar(this: export_default$10<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toHex(this: export_default$10<1>): export_default$l<1>;
    toHex(this: export_default$10<0 | 1>): export_default$l<0 | 1>;
    toHex(this: export_default$10<number>): export_default$l<0 | 1>;
    toOct(this: export_default$10<1>): export_default$l<1>;
    toOct(this: export_default$10<0 | 1>): export_default$l<0 | 1>;
    toOct(this: export_default$10<number>): export_default$l<0 | 1>;
    varPop(this: export_default$10<number>): export_default$L<0 | 1>;
    varSamp(this: export_default$10<number>): export_default$L<0 | 1>;
    variance(this: export_default$10<number>): export_default$L<0 | 1>;
    ["/"](this: export_default$10<1>, a1: export_default$12<1>): export_default$10<1>;
    ["/"](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
    ["/"](this: export_default$10<number>, a1: export_default$12<number>): export_default$10<0 | 1>;
    ["/"](this: export_default$10<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["/"](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["/"](this: export_default$10<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["/"](this: export_default$10<1>, a1: export_default$10<1>): export_default$10<1>;
    ["/"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
    ["/"](this: export_default$10<number>, a1: export_default$10<number>): export_default$10<0 | 1>;
    ["="](this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["-"](this: export_default$10<1>, a1: export_default$12<1>): export_default$10<1>;
    ["-"](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
    ["-"](this: export_default$10<number>, a1: export_default$12<number>): export_default$10<0 | 1>;
    ["-"](this: export_default$10<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["-"](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["-"](this: export_default$10<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["-"](this: export_default$10<1>, a1: export_default$10<1>): export_default$10<1>;
    ["-"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
    ["-"](this: export_default$10<number>, a1: export_default$10<number>): export_default$10<0 | 1>;
    ["*"](this: export_default$10<1>, a1: export_default$12<1>): export_default$10<1>;
    ["*"](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
    ["*"](this: export_default$10<number>, a1: export_default$12<number>): export_default$10<0 | 1>;
    ["*"](this: export_default$10<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["*"](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["*"](this: export_default$10<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["*"](this: export_default$10<1>, a1: export_default$N<1>): export_default$N<1>;
    ["*"](this: export_default$10<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    ["*"](this: export_default$10<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    ["*"](this: export_default$10<1>, a1: export_default$10<1>): export_default$10<1>;
    ["*"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
    ["*"](this: export_default$10<number>, a1: export_default$10<number>): export_default$10<0 | 1>;
    ["<>"](this: export_default$10<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$10<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$10<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$10<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["+"](this: export_default$10<1>, a1: export_default$12<1>): export_default$10<1>;
    ["+"](this: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
    ["+"](this: export_default$10<number>, a1: export_default$12<number>): export_default$10<0 | 1>;
    ["+"](this: export_default$10<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["+"](this: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["+"](this: export_default$10<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["+"](this: export_default$10<1>, a1: export_default$10<1>): export_default$10<1>;
    ["+"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
    ["+"](this: export_default$10<number>, a1: export_default$10<number>): export_default$10<0 | 1>;
    ["+"](this: export_default$10<1>, a1: export_default$18<1>): export_default$18<1>;
    ["+"](this: export_default$10<0 | 1>, a1: export_default$18<0 | 1>): export_default$18<0 | 1>;
    ["+"](this: export_default$10<number>, a1: export_default$18<number>): export_default$18<0 | 1>;
    ["&"](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    ["&"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    ["&"](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    ["%"](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    ["%"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    ["%"](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    ["|"](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    ["|"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    ["|"](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    ["<<"](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    ["<<"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    ["<<"](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    [">>"](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    [">>"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    [">>"](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    ["#"](this: export_default$10<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    ["#"](this: export_default$10<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    ["#"](this: export_default$10<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
}

type Parsed$Z = string;
type SerializeParam$Z = string;
declare class export_default$$<N extends number> extends Any<Parsed$Z, N> {
    static new(v: SerializeParam$Z): export_default$$<1>;
    static new(v: null): export_default$$<0>;
    static new(v: Expression): export_default$$<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$$<number> | undefined;
}

type Parsed$Y = string;
type SerializeParam$Y = string;
declare class export_default$_<N extends number> extends Any<Parsed$Y, N> {
    static new(v: SerializeParam$Y): export_default$_<1>;
    static new(v: null): export_default$_<0>;
    static new(v: Expression): export_default$_<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$_<number> | undefined;
    int4Multirange(this: export_default$_<1>): export_default$$<1>;
    int4Multirange(this: export_default$_<0 | 1>): export_default$$<0 | 1>;
    int4Multirange(this: export_default$_<number>): export_default$$<0 | 1>;
    int4RangeCanonical(this: export_default$_<1>): export_default$_<1>;
    int4RangeCanonical(this: export_default$_<0 | 1>): export_default$_<0 | 1>;
    int4RangeCanonical(this: export_default$_<number>): export_default$_<0 | 1>;
}

type Parsed$X = ReturnType<typeof typeMap["int8"]['parse']>;
type SerializeParam$X = Parameters<typeof typeMap["int8"]['serialize']>[0];
declare class export_default$Z<N extends number> extends Any<Parsed$X, N> {
    static new(v: SerializeParam$X): export_default$Z<1>;
    static new(v: null): export_default$Z<0>;
    static new(v: Expression): export_default$Z<0 | 1>;
    static serializeParamTypes: readonly SerializeParam$X[] | undefined;
    static parse(v: string): bigint;
    static typeString(): string | undefined;
    asAggregate(): export_default$Z<number> | undefined;
    abs(this: export_default$Z<1>): export_default$Z<1>;
    abs(this: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    abs(this: export_default$Z<number>): export_default$Z<0 | 1>;
    avg(this: export_default$Z<number>): export_default$L<0 | 1>;
    bit(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1h<1>;
    bit(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    bit(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1h<0 | 1>;
    bitAnd(this: export_default$Z<number>): export_default$Z<0 | 1>;
    bitOr(this: export_default$Z<number>): export_default$Z<0 | 1>;
    bitXor(this: export_default$Z<number>): export_default$Z<0 | 1>;
    btint82Cmp(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$10<1>;
    btint82Cmp(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    btint82Cmp(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$10<0 | 1>;
    btint84Cmp(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    btint84Cmp(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    btint84Cmp(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    btint8Cmp(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$10<1>;
    btint8Cmp(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    btint8Cmp(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    factorial(this: export_default$Z<1>): export_default$L<1>;
    factorial(this: export_default$Z<0 | 1>): export_default$L<0 | 1>;
    factorial(this: export_default$Z<number>): export_default$L<0 | 1>;
    float4(this: export_default$Z<1>): export_default$15<1>;
    float4(this: export_default$Z<0 | 1>): export_default$15<0 | 1>;
    float4(this: export_default$Z<number>): export_default$15<0 | 1>;
    float8(this: export_default$Z<1>): export_default$14<1>;
    float8(this: export_default$Z<0 | 1>): export_default$14<0 | 1>;
    float8(this: export_default$Z<number>): export_default$14<0 | 1>;
    gcd(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    gcd(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    gcd(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    generateSeries(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<1> | Input<export_default$Z<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<number> | Input<export_default$Z<0 | 1>>): Setof<{
        from: {};
    }>;
    hashint8(this: export_default$Z<1>): export_default$10<1>;
    hashint8(this: export_default$Z<0 | 1>): export_default$10<0 | 1>;
    hashint8(this: export_default$Z<number>): export_default$10<0 | 1>;
    hashint8Extended(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashint8Extended(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashint8Extended(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    inRange(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    int2(this: export_default$Z<1>): export_default$12<1>;
    int2(this: export_default$Z<0 | 1>): export_default$12<0 | 1>;
    int2(this: export_default$Z<number>): export_default$12<0 | 1>;
    int2Sum(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$Z<1>;
    int2Sum(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int2Sum(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int4(this: export_default$Z<1>): export_default$10<1>;
    int4(this: export_default$Z<0 | 1>): export_default$10<0 | 1>;
    int4(this: export_default$Z<number>): export_default$10<0 | 1>;
    int4Sum(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    int4Sum(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int4Sum(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int82Div(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$Z<1>;
    int82Div(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int82Div(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int82Eq(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int82Eq(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Eq(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Ge(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int82Ge(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Ge(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Gt(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int82Gt(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Gt(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Le(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int82Le(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Le(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Lt(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int82Lt(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Lt(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Mi(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$Z<1>;
    int82Mi(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int82Mi(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int82Mul(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$Z<1>;
    int82Mul(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int82Mul(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int82Ne(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    int82Ne(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Ne(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    int82Pl(this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$Z<1>;
    int82Pl(this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int82Pl(this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    int84Div(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    int84Div(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int84Div(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int84Eq(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int84Eq(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Eq(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Ge(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int84Ge(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Ge(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Gt(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int84Gt(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Gt(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Le(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int84Le(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Le(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Lt(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int84Lt(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Lt(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Mi(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    int84Mi(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int84Mi(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int84Mul(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    int84Mul(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int84Mul(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int84Ne(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    int84Ne(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Ne(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    int84Pl(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    int84Pl(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int84Pl(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int8MulCash(this: export_default$Z<1>, a1: export_default$N<1>): export_default$N<1>;
    int8MulCash(this: export_default$Z<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    int8MulCash(this: export_default$Z<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    int8Abs(this: export_default$Z<1>): export_default$Z<1>;
    int8Abs(this: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    int8Abs(this: export_default$Z<number>): export_default$Z<0 | 1>;
    int8And(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8And(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8And(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Dec(this: export_default$Z<1>): export_default$Z<1>;
    int8Dec(this: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    int8Dec(this: export_default$Z<number>): export_default$Z<0 | 1>;
    int8DecAny(this: export_default$Z<1>, a1: Any<1>): export_default$Z<1>;
    int8DecAny(this: export_default$Z<0 | 1>, a1: Any<0 | 1>): export_default$Z<0 | 1>;
    int8DecAny(this: export_default$Z<number>, a1: Any<number>): export_default$Z<0 | 1>;
    int8Div(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8Div(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Div(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Eq(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int8Eq(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Eq(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Ge(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int8Ge(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Ge(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Gt(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int8Gt(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Gt(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Inc(this: export_default$Z<1>): export_default$Z<1>;
    int8Inc(this: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    int8Inc(this: export_default$Z<number>): export_default$Z<0 | 1>;
    int8IncAny(this: export_default$Z<1>, a1: Any<1>): export_default$Z<1>;
    int8IncAny(this: export_default$Z<0 | 1>, a1: Any<0 | 1>): export_default$Z<0 | 1>;
    int8IncAny(this: export_default$Z<number>, a1: Any<number>): export_default$Z<0 | 1>;
    int8IncFloat8Float8(this: export_default$Z<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>, a2: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$Z<1>;
    int8IncFloat8Float8(this: export_default$Z<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>, a2: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$Z<0 | 1>;
    int8IncFloat8Float8(this: export_default$Z<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>, a2: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$Z<0 | 1>;
    int8Larger(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8Larger(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Larger(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Le(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int8Le(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Le(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Lt(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int8Lt(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Lt(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Mi(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8Mi(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Mi(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Mod(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8Mod(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Mod(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Mul(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8Mul(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Mul(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Ne(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    int8Ne(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Ne(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    int8Not(this: export_default$Z<1>): export_default$Z<1>;
    int8Not(this: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    int8Not(this: export_default$Z<number>): export_default$Z<0 | 1>;
    int8Or(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8Or(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Or(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Pl(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8Pl(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Pl(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8PlInet(this: export_default$Z<1>, a1: export_default$13<1>): export_default$13<1>;
    int8PlInet(this: export_default$Z<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
    int8PlInet(this: export_default$Z<number>, a1: export_default$13<number>): export_default$13<0 | 1>;
    int8Range(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$X<1>;
    int8Range(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$X<0 | 1>;
    int8Range(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$X<0 | 1>;
    int8Range(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$X<1>;
    int8Range(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$X<0 | 1>;
    int8Range(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$X<0 | 1>;
    int8RangeSubdiff(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$14<1>;
    int8RangeSubdiff(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$14<0 | 1>;
    int8RangeSubdiff(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$14<0 | 1>;
    int8Shl(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    int8Shl(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int8Shl(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int8Shr(this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    int8Shr(this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int8Shr(this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    int8Smaller(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8Smaller(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Smaller(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Um(this: export_default$Z<1>): export_default$Z<1>;
    int8Um(this: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    int8Um(this: export_default$Z<number>): export_default$Z<0 | 1>;
    int8Up(this: export_default$Z<1>): export_default$Z<1>;
    int8Up(this: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    int8Up(this: export_default$Z<number>): export_default$Z<0 | 1>;
    int8Xor(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    int8Xor(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8Xor(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    lcm(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    lcm(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    lcm(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    max(this: export_default$Z<number>): export_default$Z<0 | 1>;
    mod(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    mod(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    mod(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    money(this: export_default$Z<1>): export_default$N<1>;
    money(this: export_default$Z<0 | 1>): export_default$N<0 | 1>;
    money(this: export_default$Z<number>): export_default$N<0 | 1>;
    numeric(this: export_default$Z<1>): export_default$L<1>;
    numeric(this: export_default$Z<0 | 1>): export_default$L<0 | 1>;
    numeric(this: export_default$Z<number>): export_default$L<0 | 1>;
    oid(this: export_default$Z<1>): export_default$I<1>;
    oid(this: export_default$Z<0 | 1>): export_default$I<0 | 1>;
    oid(this: export_default$Z<number>): export_default$I<0 | 1>;
    pgAdvisoryLock(this: export_default$Z<1>): export_default$4<1>;
    pgAdvisoryLock(this: export_default$Z<0 | 1>): export_default$4<0 | 1>;
    pgAdvisoryLock(this: export_default$Z<number>): export_default$4<0 | 1>;
    pgAdvisoryLockShared(this: export_default$Z<1>): export_default$4<1>;
    pgAdvisoryLockShared(this: export_default$Z<0 | 1>): export_default$4<0 | 1>;
    pgAdvisoryLockShared(this: export_default$Z<number>): export_default$4<0 | 1>;
    pgAdvisoryUnlock(this: export_default$Z<1>): export_default$1g<1>;
    pgAdvisoryUnlock(this: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
    pgAdvisoryUnlock(this: export_default$Z<number>): export_default$1g<0 | 1>;
    pgAdvisoryUnlockShared(this: export_default$Z<1>): export_default$1g<1>;
    pgAdvisoryUnlockShared(this: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
    pgAdvisoryUnlockShared(this: export_default$Z<number>): export_default$1g<0 | 1>;
    pgAdvisoryXactLock(this: export_default$Z<1>): export_default$4<1>;
    pgAdvisoryXactLock(this: export_default$Z<0 | 1>): export_default$4<0 | 1>;
    pgAdvisoryXactLock(this: export_default$Z<number>): export_default$4<0 | 1>;
    pgAdvisoryXactLockShared(this: export_default$Z<1>): export_default$4<1>;
    pgAdvisoryXactLockShared(this: export_default$Z<0 | 1>): export_default$4<0 | 1>;
    pgAdvisoryXactLockShared(this: export_default$Z<number>): export_default$4<0 | 1>;
    pgSizePretty(this: export_default$Z<1>): export_default$l<1>;
    pgSizePretty(this: export_default$Z<0 | 1>): export_default$l<0 | 1>;
    pgSizePretty(this: export_default$Z<number>): export_default$l<0 | 1>;
    pgTryAdvisoryLock(this: export_default$Z<1>): export_default$1g<1>;
    pgTryAdvisoryLock(this: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
    pgTryAdvisoryLock(this: export_default$Z<number>): export_default$1g<0 | 1>;
    pgTryAdvisoryLockShared(this: export_default$Z<1>): export_default$1g<1>;
    pgTryAdvisoryLockShared(this: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
    pgTryAdvisoryLockShared(this: export_default$Z<number>): export_default$1g<0 | 1>;
    pgTryAdvisoryXactLock(this: export_default$Z<1>): export_default$1g<1>;
    pgTryAdvisoryXactLock(this: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
    pgTryAdvisoryXactLock(this: export_default$Z<number>): export_default$1g<0 | 1>;
    pgTryAdvisoryXactLockShared(this: export_default$Z<1>): export_default$1g<1>;
    pgTryAdvisoryXactLockShared(this: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
    pgTryAdvisoryXactLockShared(this: export_default$Z<number>): export_default$1g<0 | 1>;
    pgWalSummaryContents(this: export_default$Z<1>, a1: export_default$E<1>, a2: export_default$E<1>): Setof<{
        from: {
            relfilenode: export_default$I<1>;
            reltablespace: export_default$I<1>;
            reldatabase: export_default$I<1>;
            relforknumber: export_default$12<1>;
            relblocknumber: export_default$Z<1>;
            is_limit_block: export_default$1g<1>;
        };
    }>;
    pgWalSummaryContents(this: export_default$Z<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$E<0 | 1>): Setof<{
        from: {
            relfilenode: export_default$I<0 | 1>;
            reltablespace: export_default$I<0 | 1>;
            reldatabase: export_default$I<0 | 1>;
            relforknumber: export_default$12<0 | 1>;
            relblocknumber: export_default$Z<0 | 1>;
            is_limit_block: export_default$1g<0 | 1>;
        };
    }>;
    pgWalSummaryContents(this: export_default$Z<number>, a1: export_default$E<number>, a2: export_default$E<number>): Setof<{
        from: {
            relfilenode: export_default$I<0 | 1>;
            reltablespace: export_default$I<0 | 1>;
            reldatabase: export_default$I<0 | 1>;
            relforknumber: export_default$12<0 | 1>;
            relblocknumber: export_default$Z<0 | 1>;
            is_limit_block: export_default$1g<0 | 1>;
        };
    }>;
    random(this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    random(this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    random(this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    stddev(this: export_default$Z<number>): export_default$L<0 | 1>;
    stddevPop(this: export_default$Z<number>): export_default$L<0 | 1>;
    stddevSamp(this: export_default$Z<number>): export_default$L<0 | 1>;
    sum(this: export_default$Z<number>): export_default$L<0 | 1>;
    toChar(this: export_default$Z<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    toChar(this: export_default$Z<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toChar(this: export_default$Z<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toHex(this: export_default$Z<1>): export_default$l<1>;
    toHex(this: export_default$Z<0 | 1>): export_default$l<0 | 1>;
    toHex(this: export_default$Z<number>): export_default$l<0 | 1>;
    toOct(this: export_default$Z<1>): export_default$l<1>;
    toOct(this: export_default$Z<0 | 1>): export_default$l<0 | 1>;
    toOct(this: export_default$Z<number>): export_default$l<0 | 1>;
    txidStatus(this: export_default$Z<1>): export_default$l<1>;
    txidStatus(this: export_default$Z<0 | 1>): export_default$l<0 | 1>;
    txidStatus(this: export_default$Z<number>): export_default$l<0 | 1>;
    txidVisibleInSnapshot(this: export_default$Z<1>, a1: export_default$8<1>): export_default$1g<1>;
    txidVisibleInSnapshot(this: export_default$Z<0 | 1>, a1: export_default$8<0 | 1>): export_default$1g<0 | 1>;
    txidVisibleInSnapshot(this: export_default$Z<number>, a1: export_default$8<number>): export_default$1g<0 | 1>;
    varPop(this: export_default$Z<number>): export_default$L<0 | 1>;
    varSamp(this: export_default$Z<number>): export_default$L<0 | 1>;
    variance(this: export_default$Z<number>): export_default$L<0 | 1>;
    ["/"](this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$Z<1>;
    ["/"](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    ["/"](this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    ["/"](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    ["/"](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    ["/"](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    ["/"](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    ["/"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["/"](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["="](this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["-"](this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$Z<1>;
    ["-"](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    ["-"](this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$Z<0 | 1>;
    ["-"](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    ["-"](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    ["-"](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    ["-"](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    ["-"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["-"](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["*"](this: export_default$Z<1>, a1: export_default$12<1>): export_default$Z<1>;
    ["*"](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$Z<0 | 1>;
    ["*"](this: export_default$Z<number>, a1: export_default$12<number>): export_default$Z<0 | 1>;
    ["*"](this: export_default$Z<1>, a1: export_default$10<1>): export_default$Z<1>;
    ["*"](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$Z<0 | 1>;
    ["*"](this: export_default$Z<number>, a1: export_default$10<number>): export_default$Z<0 | 1>;
    ["*"](this: export_default$Z<1>, a1: export_default$N<1>): export_default$N<1>;
    ["*"](this: export_default$Z<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    ["*"](this: export_default$Z<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    ["*"](this: export_default$Z<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["*"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["*"](this: export_default$Z<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["<>"](this: export_default$Z<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$Z<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1g<0 | 1>;
    ["+"](this: export_default$Z<1>, a1: export_default$12<1>): export_default$Z<1>;
    ["+"](this: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$Z<0 | 1>;
    ["+"](this: export_default$Z<number>, a1: export_default$12<number>): export_default$Z<0 | 1>;
    ["+"](this: export_default$Z<1>, a1: export_default$10<1>): export_default$Z<1>;
    ["+"](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$Z<0 | 1>;
    ["+"](this: export_default$Z<number>, a1: export_default$10<number>): export_default$Z<0 | 1>;
    ["+"](this: export_default$Z<1>, a1: export_default$Z<1>): export_default$Z<1>;
    ["+"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
    ["+"](this: export_default$Z<number>, a1: export_default$Z<number>): export_default$Z<0 | 1>;
    ["+"](this: export_default$Z<1>, a1: export_default$13<1>): export_default$13<1>;
    ["+"](this: export_default$Z<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
    ["+"](this: export_default$Z<number>, a1: export_default$13<number>): export_default$13<0 | 1>;
    ["&"](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    ["&"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["&"](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["%"](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    ["%"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["%"](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["|"](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    ["|"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["|"](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["<<"](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    ["<<"](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    ["<<"](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    [">>"](this: export_default$Z<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$Z<1>;
    [">>"](this: export_default$Z<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    [">>"](this: export_default$Z<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$Z<0 | 1>;
    ["#"](this: export_default$Z<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    ["#"](this: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    ["#"](this: export_default$Z<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
}

type Parsed$W = string;
type SerializeParam$W = string;
declare class export_default$Y<N extends number> extends Any<Parsed$W, N> {
    static new(v: SerializeParam$W): export_default$Y<1>;
    static new(v: null): export_default$Y<0>;
    static new(v: Expression): export_default$Y<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$Y<number> | undefined;
}

type Parsed$V = string;
type SerializeParam$V = string;
declare class export_default$X<N extends number> extends Any<Parsed$V, N> {
    static new(v: SerializeParam$V): export_default$X<1>;
    static new(v: null): export_default$X<0>;
    static new(v: Expression): export_default$X<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$X<number> | undefined;
    int8Multirange(this: export_default$X<1>): export_default$Y<1>;
    int8Multirange(this: export_default$X<0 | 1>): export_default$Y<0 | 1>;
    int8Multirange(this: export_default$X<number>): export_default$Y<0 | 1>;
    int8RangeCanonical(this: export_default$X<1>): export_default$X<1>;
    int8RangeCanonical(this: export_default$X<0 | 1>): export_default$X<0 | 1>;
    int8RangeCanonical(this: export_default$X<number>): export_default$X<0 | 1>;
}

type Parsed$U = string;
type SerializeParam$U = string;
declare class export_default$W<N extends number> extends Any<Parsed$U, N> {
    static new(v: SerializeParam$U): export_default$W<1>;
    static new(v: null): export_default$W<0>;
    static new(v: Expression): export_default$W<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$W<number> | undefined;
    avg(this: export_default$W<number>): export_default$W<0 | 1>;
    inRange(this: export_default$W<1>, a1: export_default$W<1>, a2: export_default$W<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$W<number>, a1: export_default$W<number>, a2: export_default$W<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    interval(this: export_default$W<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$W<1>;
    interval(this: export_default$W<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$W<0 | 1>;
    interval(this: export_default$W<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$W<0 | 1>;
    intervalCmp(this: export_default$W<1>, a1: export_default$W<1>): export_default$10<1>;
    intervalCmp(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$10<0 | 1>;
    intervalCmp(this: export_default$W<number>, a1: export_default$W<number>): export_default$10<0 | 1>;
    intervalDiv(this: export_default$W<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$W<1>;
    intervalDiv(this: export_default$W<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    intervalDiv(this: export_default$W<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    intervalEq(this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    intervalEq(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    intervalEq(this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    intervalGe(this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    intervalGe(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    intervalGe(this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    intervalGt(this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    intervalGt(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    intervalGt(this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    intervalHash(this: export_default$W<1>): export_default$10<1>;
    intervalHash(this: export_default$W<0 | 1>): export_default$10<0 | 1>;
    intervalHash(this: export_default$W<number>): export_default$10<0 | 1>;
    intervalHashExtended(this: export_default$W<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    intervalHashExtended(this: export_default$W<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    intervalHashExtended(this: export_default$W<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    intervalLarger(this: export_default$W<1>, a1: export_default$W<1>): export_default$W<1>;
    intervalLarger(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
    intervalLarger(this: export_default$W<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    intervalLe(this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    intervalLe(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    intervalLe(this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    intervalLt(this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    intervalLt(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    intervalLt(this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    intervalMi(this: export_default$W<1>, a1: export_default$W<1>): export_default$W<1>;
    intervalMi(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
    intervalMi(this: export_default$W<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    intervalMul(this: export_default$W<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$W<1>;
    intervalMul(this: export_default$W<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    intervalMul(this: export_default$W<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    intervalNe(this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    intervalNe(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    intervalNe(this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    intervalPl(this: export_default$W<1>, a1: export_default$W<1>): export_default$W<1>;
    intervalPl(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
    intervalPl(this: export_default$W<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    intervalPlDate(this: export_default$W<1>, a1: export_default$18<1>): export_default$i<1>;
    intervalPlDate(this: export_default$W<0 | 1>, a1: export_default$18<0 | 1>): export_default$i<0 | 1>;
    intervalPlDate(this: export_default$W<number>, a1: export_default$18<number>): export_default$i<0 | 1>;
    intervalPlTime(this: export_default$W<1>, a1: export_default$j<1>): export_default$j<1>;
    intervalPlTime(this: export_default$W<0 | 1>, a1: export_default$j<0 | 1>): export_default$j<0 | 1>;
    intervalPlTime(this: export_default$W<number>, a1: export_default$j<number>): export_default$j<0 | 1>;
    intervalPlTimestamp(this: export_default$W<1>, a1: export_default$i<1>): export_default$i<1>;
    intervalPlTimestamp(this: export_default$W<0 | 1>, a1: export_default$i<0 | 1>): export_default$i<0 | 1>;
    intervalPlTimestamp(this: export_default$W<number>, a1: export_default$i<number>): export_default$i<0 | 1>;
    intervalPlTimestamptz(this: export_default$W<1>, a1: export_default$h<1>): export_default$h<1>;
    intervalPlTimestamptz(this: export_default$W<0 | 1>, a1: export_default$h<0 | 1>): export_default$h<0 | 1>;
    intervalPlTimestamptz(this: export_default$W<number>, a1: export_default$h<number>): export_default$h<0 | 1>;
    intervalPlTimetz(this: export_default$W<1>, a1: export_default$g<1>): export_default$g<1>;
    intervalPlTimetz(this: export_default$W<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
    intervalPlTimetz(this: export_default$W<number>, a1: export_default$g<number>): export_default$g<0 | 1>;
    intervalSmaller(this: export_default$W<1>, a1: export_default$W<1>): export_default$W<1>;
    intervalSmaller(this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
    intervalSmaller(this: export_default$W<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    intervalUm(this: export_default$W<1>): export_default$W<1>;
    intervalUm(this: export_default$W<0 | 1>): export_default$W<0 | 1>;
    intervalUm(this: export_default$W<number>): export_default$W<0 | 1>;
    isfinite(this: export_default$W<1>): export_default$1g<1>;
    isfinite(this: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    isfinite(this: export_default$W<number>): export_default$1g<0 | 1>;
    justifyDays(this: export_default$W<1>): export_default$W<1>;
    justifyDays(this: export_default$W<0 | 1>): export_default$W<0 | 1>;
    justifyDays(this: export_default$W<number>): export_default$W<0 | 1>;
    justifyHours(this: export_default$W<1>): export_default$W<1>;
    justifyHours(this: export_default$W<0 | 1>): export_default$W<0 | 1>;
    justifyHours(this: export_default$W<number>): export_default$W<0 | 1>;
    justifyInterval(this: export_default$W<1>): export_default$W<1>;
    justifyInterval(this: export_default$W<0 | 1>): export_default$W<0 | 1>;
    justifyInterval(this: export_default$W<number>): export_default$W<0 | 1>;
    max(this: export_default$W<number>): export_default$W<0 | 1>;
    pgSleepFor(this: export_default$W<1>): export_default$4<1>;
    pgSleepFor(this: export_default$W<0 | 1>): export_default$4<0 | 1>;
    pgSleepFor(this: export_default$W<number>): export_default$4<0 | 1>;
    sum(this: export_default$W<number>): export_default$W<0 | 1>;
    time(this: export_default$W<1>): export_default$j<1>;
    time(this: export_default$W<0 | 1>): export_default$j<0 | 1>;
    time(this: export_default$W<number>): export_default$j<0 | 1>;
    timezone(this: export_default$W<1>, a1: export_default$h<1>): export_default$i<1>;
    timezone(this: export_default$W<0 | 1>, a1: export_default$h<0 | 1>): export_default$i<0 | 1>;
    timezone(this: export_default$W<number>, a1: export_default$h<number>): export_default$i<0 | 1>;
    timezone(this: export_default$W<1>, a1: export_default$i<1>): export_default$h<1>;
    timezone(this: export_default$W<0 | 1>, a1: export_default$i<0 | 1>): export_default$h<0 | 1>;
    timezone(this: export_default$W<number>, a1: export_default$i<number>): export_default$h<0 | 1>;
    timezone(this: export_default$W<1>, a1: export_default$g<1>): export_default$g<1>;
    timezone(this: export_default$W<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
    timezone(this: export_default$W<number>, a1: export_default$g<number>): export_default$g<0 | 1>;
    toChar(this: export_default$W<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    toChar(this: export_default$W<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toChar(this: export_default$W<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    ["/"](this: export_default$W<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$W<1>;
    ["/"](this: export_default$W<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    ["/"](this: export_default$W<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    ["="](this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    ["="](this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    [">="](this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    [">"](this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    ["<="](this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    ["<"](this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$W<1>, a1: export_default$W<1>): export_default$W<1>;
    ["-"](this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
    ["-"](this: export_default$W<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    ["*"](this: export_default$W<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$W<1>;
    ["*"](this: export_default$W<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    ["*"](this: export_default$W<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$W<0 | 1>;
    ["<>"](this: export_default$W<1>, a1: export_default$W<1>): export_default$1g<1>;
    ["<>"](this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$W<number>, a1: export_default$W<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$W<1>, a1: export_default$W<1>): export_default$W<1>;
    ["+"](this: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
    ["+"](this: export_default$W<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    ["+"](this: export_default$W<1>, a1: export_default$18<1>): export_default$i<1>;
    ["+"](this: export_default$W<0 | 1>, a1: export_default$18<0 | 1>): export_default$i<0 | 1>;
    ["+"](this: export_default$W<number>, a1: export_default$18<number>): export_default$i<0 | 1>;
    ["+"](this: export_default$W<1>, a1: export_default$j<1>): export_default$j<1>;
    ["+"](this: export_default$W<0 | 1>, a1: export_default$j<0 | 1>): export_default$j<0 | 1>;
    ["+"](this: export_default$W<number>, a1: export_default$j<number>): export_default$j<0 | 1>;
    ["+"](this: export_default$W<1>, a1: export_default$i<1>): export_default$i<1>;
    ["+"](this: export_default$W<0 | 1>, a1: export_default$i<0 | 1>): export_default$i<0 | 1>;
    ["+"](this: export_default$W<number>, a1: export_default$i<number>): export_default$i<0 | 1>;
    ["+"](this: export_default$W<1>, a1: export_default$h<1>): export_default$h<1>;
    ["+"](this: export_default$W<0 | 1>, a1: export_default$h<0 | 1>): export_default$h<0 | 1>;
    ["+"](this: export_default$W<number>, a1: export_default$h<number>): export_default$h<0 | 1>;
    ["+"](this: export_default$W<1>, a1: export_default$g<1>): export_default$g<1>;
    ["+"](this: export_default$W<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
    ["+"](this: export_default$W<number>, a1: export_default$g<number>): export_default$g<0 | 1>;
}

type Parsed$T = string;
type SerializeParam$T = string;
declare class export_default$V<N extends number> extends Any<Parsed$T, N> {
    static new(v: SerializeParam$T): export_default$V<1>;
    static new(v: null): export_default$V<0>;
    static new(v: Expression): export_default$V<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$V<number> | undefined;
    jsonArrayElement(this: export_default$V<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$V<1>;
    jsonArrayElement(this: export_default$V<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$V<0 | 1>;
    jsonArrayElement(this: export_default$V<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$V<0 | 1>;
    jsonArrayElementText(this: export_default$V<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    jsonArrayElementText(this: export_default$V<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    jsonArrayElementText(this: export_default$V<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    jsonArrayElements(this: export_default$V<1>): Setof<{
        from: {
            value: export_default$V<1>;
        };
    }>;
    jsonArrayElements(this: export_default$V<0 | 1>): Setof<{
        from: {
            value: export_default$V<0 | 1>;
        };
    }>;
    jsonArrayElements(this: export_default$V<number>): Setof<{
        from: {
            value: export_default$V<0 | 1>;
        };
    }>;
    jsonArrayElementsText(this: export_default$V<1>): Setof<{
        from: {
            value: export_default$l<1>;
        };
    }>;
    jsonArrayElementsText(this: export_default$V<0 | 1>): Setof<{
        from: {
            value: export_default$l<0 | 1>;
        };
    }>;
    jsonArrayElementsText(this: export_default$V<number>): Setof<{
        from: {
            value: export_default$l<0 | 1>;
        };
    }>;
    jsonArrayLength(this: export_default$V<1>): export_default$10<1>;
    jsonArrayLength(this: export_default$V<0 | 1>): export_default$10<0 | 1>;
    jsonArrayLength(this: export_default$V<number>): export_default$10<0 | 1>;
    jsonEach(this: export_default$V<1>): Setof<{
        from: {
            key: export_default$l<1>;
            value: export_default$V<1>;
        };
    }>;
    jsonEach(this: export_default$V<0 | 1>): Setof<{
        from: {
            key: export_default$l<0 | 1>;
            value: export_default$V<0 | 1>;
        };
    }>;
    jsonEach(this: export_default$V<number>): Setof<{
        from: {
            key: export_default$l<0 | 1>;
            value: export_default$V<0 | 1>;
        };
    }>;
    jsonEachText(this: export_default$V<1>): Setof<{
        from: {
            key: export_default$l<1>;
            value: export_default$l<1>;
        };
    }>;
    jsonEachText(this: export_default$V<0 | 1>): Setof<{
        from: {
            key: export_default$l<0 | 1>;
            value: export_default$l<0 | 1>;
        };
    }>;
    jsonEachText(this: export_default$V<number>): Setof<{
        from: {
            key: export_default$l<0 | 1>;
            value: export_default$l<0 | 1>;
        };
    }>;
    jsonExtractPath(this: export_default$V<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$V<1>;
    jsonExtractPath(this: export_default$V<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$V<0 | 1>;
    jsonExtractPath(this: export_default$V<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$V<0 | 1>;
    jsonExtractPathText(this: export_default$V<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$l<1>;
    jsonExtractPathText(this: export_default$V<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$l<0 | 1>;
    jsonExtractPathText(this: export_default$V<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$l<0 | 1>;
    jsonObjectField(this: export_default$V<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$V<1>;
    jsonObjectField(this: export_default$V<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$V<0 | 1>;
    jsonObjectField(this: export_default$V<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$V<0 | 1>;
    jsonObjectFieldText(this: export_default$V<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    jsonObjectFieldText(this: export_default$V<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    jsonObjectFieldText(this: export_default$V<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    jsonObjectKeys(this: export_default$V<1>): Setof<{
        from: {};
    }>;
    jsonObjectKeys(this: export_default$V<0 | 1>): Setof<{
        from: {};
    }>;
    jsonObjectKeys(this: export_default$V<number>): Setof<{
        from: {};
    }>;
    jsonStripNulls(this: export_default$V<1>): export_default$V<1>;
    jsonStripNulls(this: export_default$V<0 | 1>): export_default$V<0 | 1>;
    jsonStripNulls(this: export_default$V<number>): export_default$V<0 | 1>;
    jsonToRecord(this: export_default$V<1>): Record$1<1, {}>;
    jsonToRecord(this: export_default$V<0 | 1>): Record$1<0 | 1, {}>;
    jsonToRecord(this: export_default$V<number>): Record$1<0 | 1, {}>;
    jsonToRecordset(this: export_default$V<1>): Setof<{
        from: {};
    }>;
    jsonToRecordset(this: export_default$V<0 | 1>): Setof<{
        from: {};
    }>;
    jsonToRecordset(this: export_default$V<number>): Setof<{
        from: {};
    }>;
    jsonToTsvector(this: export_default$V<1>, a1: export_default$U<1>): export_default$9<1>;
    jsonToTsvector(this: export_default$V<0 | 1>, a1: export_default$U<0 | 1>): export_default$9<0 | 1>;
    jsonToTsvector(this: export_default$V<number>, a1: export_default$U<number>): export_default$9<0 | 1>;
    jsonTypeof(this: export_default$V<1>): export_default$l<1>;
    jsonTypeof(this: export_default$V<0 | 1>): export_default$l<0 | 1>;
    jsonTypeof(this: export_default$V<number>): export_default$l<0 | 1>;
    toTsvector(this: export_default$V<1>): export_default$9<1>;
    toTsvector(this: export_default$V<0 | 1>): export_default$9<0 | 1>;
    toTsvector(this: export_default$V<number>): export_default$9<0 | 1>;
    tsHeadline(this: export_default$V<1>, a1: export_default$d<1>): export_default$V<1>;
    tsHeadline(this: export_default$V<0 | 1>, a1: export_default$d<0 | 1>): export_default$V<0 | 1>;
    tsHeadline(this: export_default$V<number>, a1: export_default$d<number>): export_default$V<0 | 1>;
    tsHeadline(this: export_default$V<1>, a1: export_default$d<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$V<1>;
    tsHeadline(this: export_default$V<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$V<0 | 1>;
    tsHeadline(this: export_default$V<number>, a1: export_default$d<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$V<0 | 1>;
    ["->"](this: export_default$V<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$V<1>;
    ["->"](this: export_default$V<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$V<0 | 1>;
    ["->"](this: export_default$V<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$V<0 | 1>;
    ["->"](this: export_default$V<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$V<1>;
    ["->"](this: export_default$V<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$V<0 | 1>;
    ["->"](this: export_default$V<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$V<0 | 1>;
    ["->>"](this: export_default$V<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    ["->>"](this: export_default$V<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    ["->>"](this: export_default$V<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    ["->>"](this: export_default$V<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    ["->>"](this: export_default$V<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    ["->>"](this: export_default$V<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    ["#>"](this: export_default$V<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$V<1>;
    ["#>"](this: export_default$V<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$V<0 | 1>;
    ["#>"](this: export_default$V<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$V<0 | 1>;
    ["#>>"](this: export_default$V<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$l<1>;
    ["#>>"](this: export_default$V<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$l<0 | 1>;
    ["#>>"](this: export_default$V<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$l<0 | 1>;
}

type Parsed$S = string;
type SerializeParam$S = string;
declare class export_default$U<N extends number> extends Any<Parsed$S, N> {
    static new(v: SerializeParam$S): export_default$U<1>;
    static new(v: null): export_default$U<0>;
    static new(v: Expression): export_default$U<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$U<number> | undefined;
    bool(this: export_default$U<1>): export_default$1g<1>;
    bool(this: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    bool(this: export_default$U<number>): export_default$1g<0 | 1>;
    float4(this: export_default$U<1>): export_default$15<1>;
    float4(this: export_default$U<0 | 1>): export_default$15<0 | 1>;
    float4(this: export_default$U<number>): export_default$15<0 | 1>;
    float8(this: export_default$U<1>): export_default$14<1>;
    float8(this: export_default$U<0 | 1>): export_default$14<0 | 1>;
    float8(this: export_default$U<number>): export_default$14<0 | 1>;
    int2(this: export_default$U<1>): export_default$12<1>;
    int2(this: export_default$U<0 | 1>): export_default$12<0 | 1>;
    int2(this: export_default$U<number>): export_default$12<0 | 1>;
    int4(this: export_default$U<1>): export_default$10<1>;
    int4(this: export_default$U<0 | 1>): export_default$10<0 | 1>;
    int4(this: export_default$U<number>): export_default$10<0 | 1>;
    int8(this: export_default$U<1>): export_default$Z<1>;
    int8(this: export_default$U<0 | 1>): export_default$Z<0 | 1>;
    int8(this: export_default$U<number>): export_default$Z<0 | 1>;
    jsonbArrayElement(this: export_default$U<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$U<1>;
    jsonbArrayElement(this: export_default$U<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$U<0 | 1>;
    jsonbArrayElement(this: export_default$U<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$U<0 | 1>;
    jsonbArrayElementText(this: export_default$U<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    jsonbArrayElementText(this: export_default$U<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    jsonbArrayElementText(this: export_default$U<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    jsonbArrayElements(this: export_default$U<1>): Setof<{
        from: {
            value: export_default$U<1>;
        };
    }>;
    jsonbArrayElements(this: export_default$U<0 | 1>): Setof<{
        from: {
            value: export_default$U<0 | 1>;
        };
    }>;
    jsonbArrayElements(this: export_default$U<number>): Setof<{
        from: {
            value: export_default$U<0 | 1>;
        };
    }>;
    jsonbArrayElementsText(this: export_default$U<1>): Setof<{
        from: {
            value: export_default$l<1>;
        };
    }>;
    jsonbArrayElementsText(this: export_default$U<0 | 1>): Setof<{
        from: {
            value: export_default$l<0 | 1>;
        };
    }>;
    jsonbArrayElementsText(this: export_default$U<number>): Setof<{
        from: {
            value: export_default$l<0 | 1>;
        };
    }>;
    jsonbArrayLength(this: export_default$U<1>): export_default$10<1>;
    jsonbArrayLength(this: export_default$U<0 | 1>): export_default$10<0 | 1>;
    jsonbArrayLength(this: export_default$U<number>): export_default$10<0 | 1>;
    jsonbCmp(this: export_default$U<1>, a1: export_default$U<1>): export_default$10<1>;
    jsonbCmp(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$10<0 | 1>;
    jsonbCmp(this: export_default$U<number>, a1: export_default$U<number>): export_default$10<0 | 1>;
    jsonbConcat(this: export_default$U<1>, a1: export_default$U<1>): export_default$U<1>;
    jsonbConcat(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$U<0 | 1>;
    jsonbConcat(this: export_default$U<number>, a1: export_default$U<number>): export_default$U<0 | 1>;
    jsonbContained(this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    jsonbContained(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    jsonbContained(this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    jsonbContains(this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    jsonbContains(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    jsonbContains(this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    jsonbDelete(this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$U<1>;
    jsonbDelete(this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbDelete(this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbDelete(this: export_default$U<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$U<1>;
    jsonbDelete(this: export_default$U<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$U<0 | 1>;
    jsonbDelete(this: export_default$U<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$U<0 | 1>;
    jsonbDelete(this: export_default$U<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$U<1>;
    jsonbDelete(this: export_default$U<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbDelete(this: export_default$U<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbDeletePath(this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$U<1>;
    jsonbDeletePath(this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbDeletePath(this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbEach(this: export_default$U<1>): Setof<{
        from: {
            key: export_default$l<1>;
            value: export_default$U<1>;
        };
    }>;
    jsonbEach(this: export_default$U<0 | 1>): Setof<{
        from: {
            key: export_default$l<0 | 1>;
            value: export_default$U<0 | 1>;
        };
    }>;
    jsonbEach(this: export_default$U<number>): Setof<{
        from: {
            key: export_default$l<0 | 1>;
            value: export_default$U<0 | 1>;
        };
    }>;
    jsonbEachText(this: export_default$U<1>): Setof<{
        from: {
            key: export_default$l<1>;
            value: export_default$l<1>;
        };
    }>;
    jsonbEachText(this: export_default$U<0 | 1>): Setof<{
        from: {
            key: export_default$l<0 | 1>;
            value: export_default$l<0 | 1>;
        };
    }>;
    jsonbEachText(this: export_default$U<number>): Setof<{
        from: {
            key: export_default$l<0 | 1>;
            value: export_default$l<0 | 1>;
        };
    }>;
    jsonbEq(this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    jsonbEq(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    jsonbEq(this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    jsonbExists(this: export_default$U<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    jsonbExists(this: export_default$U<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    jsonbExists(this: export_default$U<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    jsonbExistsAll(this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$1g<1>;
    jsonbExistsAll(this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    jsonbExistsAll(this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    jsonbExistsAny(this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$1g<1>;
    jsonbExistsAny(this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    jsonbExistsAny(this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    jsonbExtractPath(this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$U<1>;
    jsonbExtractPath(this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbExtractPath(this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbExtractPathText(this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$l<1>;
    jsonbExtractPathText(this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$l<0 | 1>;
    jsonbExtractPathText(this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$l<0 | 1>;
    jsonbGe(this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    jsonbGe(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    jsonbGe(this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    jsonbGt(this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    jsonbGt(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    jsonbGt(this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    jsonbHash(this: export_default$U<1>): export_default$10<1>;
    jsonbHash(this: export_default$U<0 | 1>): export_default$10<0 | 1>;
    jsonbHash(this: export_default$U<number>): export_default$10<0 | 1>;
    jsonbHashExtended(this: export_default$U<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    jsonbHashExtended(this: export_default$U<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    jsonbHashExtended(this: export_default$U<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    jsonbInsert(this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$U<1>;
    jsonbInsert(this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbInsert(this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbLe(this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    jsonbLe(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    jsonbLe(this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    jsonbLt(this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    jsonbLt(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    jsonbLt(this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    jsonbNe(this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    jsonbNe(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    jsonbNe(this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    jsonbObjectField(this: export_default$U<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$U<1>;
    jsonbObjectField(this: export_default$U<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbObjectField(this: export_default$U<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbObjectFieldText(this: export_default$U<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    jsonbObjectFieldText(this: export_default$U<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    jsonbObjectFieldText(this: export_default$U<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    jsonbObjectKeys(this: export_default$U<1>): Setof<{
        from: {};
    }>;
    jsonbObjectKeys(this: export_default$U<0 | 1>): Setof<{
        from: {};
    }>;
    jsonbObjectKeys(this: export_default$U<number>): Setof<{
        from: {};
    }>;
    jsonbPathExists(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    jsonbPathExists(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    jsonbPathExists(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    jsonbPathExistsOpr(this: export_default$U<1>, a1: export_default$T<1>): export_default$1g<1>;
    jsonbPathExistsOpr(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>): export_default$1g<0 | 1>;
    jsonbPathExistsOpr(this: export_default$U<number>, a1: export_default$T<number>): export_default$1g<0 | 1>;
    jsonbPathExistsTz(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    jsonbPathExistsTz(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    jsonbPathExistsTz(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    jsonbPathMatch(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    jsonbPathMatch(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    jsonbPathMatch(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    jsonbPathMatchOpr(this: export_default$U<1>, a1: export_default$T<1>): export_default$1g<1>;
    jsonbPathMatchOpr(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>): export_default$1g<0 | 1>;
    jsonbPathMatchOpr(this: export_default$U<number>, a1: export_default$T<number>): export_default$1g<0 | 1>;
    jsonbPathMatchTz(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    jsonbPathMatchTz(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    jsonbPathMatchTz(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    jsonbPathQuery(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    jsonbPathQuery(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    jsonbPathQuery(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    jsonbPathQueryArray(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$U<1>;
    jsonbPathQueryArray(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbPathQueryArray(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbPathQueryArrayTz(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$U<1>;
    jsonbPathQueryArrayTz(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbPathQueryArrayTz(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbPathQueryFirst(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$U<1>;
    jsonbPathQueryFirst(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbPathQueryFirst(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbPathQueryFirstTz(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$U<1>;
    jsonbPathQueryFirstTz(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbPathQueryFirstTz(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbPathQueryTz(this: export_default$U<1>, a1: export_default$T<1>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    jsonbPathQueryTz(this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    jsonbPathQueryTz(this: export_default$U<number>, a1: export_default$T<number>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    jsonbPretty(this: export_default$U<1>): export_default$l<1>;
    jsonbPretty(this: export_default$U<0 | 1>): export_default$l<0 | 1>;
    jsonbPretty(this: export_default$U<number>): export_default$l<0 | 1>;
    jsonbSet(this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$U<1>;
    jsonbSet(this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbSet(this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$U<0 | 1>;
    jsonbSetLax(this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>, a2: export_default$U<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$U<1>;
    jsonbSetLax(this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbSetLax(this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>, a2: export_default$U<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    jsonbStripNulls(this: export_default$U<1>): export_default$U<1>;
    jsonbStripNulls(this: export_default$U<0 | 1>): export_default$U<0 | 1>;
    jsonbStripNulls(this: export_default$U<number>): export_default$U<0 | 1>;
    jsonbToRecord(this: export_default$U<1>): Record$1<1, {}>;
    jsonbToRecord(this: export_default$U<0 | 1>): Record$1<0 | 1, {}>;
    jsonbToRecord(this: export_default$U<number>): Record$1<0 | 1, {}>;
    jsonbToRecordset(this: export_default$U<1>): Setof<{
        from: {};
    }>;
    jsonbToRecordset(this: export_default$U<0 | 1>): Setof<{
        from: {};
    }>;
    jsonbToRecordset(this: export_default$U<number>): Setof<{
        from: {};
    }>;
    jsonbToTsvector(this: export_default$U<1>, a1: export_default$U<1>): export_default$9<1>;
    jsonbToTsvector(this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$9<0 | 1>;
    jsonbToTsvector(this: export_default$U<number>, a1: export_default$U<number>): export_default$9<0 | 1>;
    jsonbTypeof(this: export_default$U<1>): export_default$l<1>;
    jsonbTypeof(this: export_default$U<0 | 1>): export_default$l<0 | 1>;
    jsonbTypeof(this: export_default$U<number>): export_default$l<0 | 1>;
    numeric(this: export_default$U<1>): export_default$L<1>;
    numeric(this: export_default$U<0 | 1>): export_default$L<0 | 1>;
    numeric(this: export_default$U<number>): export_default$L<0 | 1>;
    toTsvector(this: export_default$U<1>): export_default$9<1>;
    toTsvector(this: export_default$U<0 | 1>): export_default$9<0 | 1>;
    toTsvector(this: export_default$U<number>): export_default$9<0 | 1>;
    tsHeadline(this: export_default$U<1>, a1: export_default$d<1>): export_default$U<1>;
    tsHeadline(this: export_default$U<0 | 1>, a1: export_default$d<0 | 1>): export_default$U<0 | 1>;
    tsHeadline(this: export_default$U<number>, a1: export_default$d<number>): export_default$U<0 | 1>;
    tsHeadline(this: export_default$U<1>, a1: export_default$d<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$U<1>;
    tsHeadline(this: export_default$U<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    tsHeadline(this: export_default$U<number>, a1: export_default$d<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["->"](this: export_default$U<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$U<1>;
    ["->"](this: export_default$U<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$U<0 | 1>;
    ["->"](this: export_default$U<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$U<0 | 1>;
    ["->"](this: export_default$U<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$U<1>;
    ["->"](this: export_default$U<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["->"](this: export_default$U<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["->>"](this: export_default$U<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    ["->>"](this: export_default$U<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    ["->>"](this: export_default$U<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    ["->>"](this: export_default$U<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    ["->>"](this: export_default$U<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    ["->>"](this: export_default$U<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    ["@>"](this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    ["@>"](this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$U<1>;
    ["-"](this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["-"](this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["-"](this: export_default$U<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$U<1>;
    ["-"](this: export_default$U<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$U<0 | 1>;
    ["-"](this: export_default$U<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$U<0 | 1>;
    ["-"](this: export_default$U<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$U<1>;
    ["-"](this: export_default$U<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["-"](this: export_default$U<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["#-"](this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$U<1>;
    ["#-"](this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["#-"](this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["="](this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    ["="](this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    ["?"](this: export_default$U<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["?"](this: export_default$U<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["?"](this: export_default$U<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["?&"](this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$1g<1>;
    ["?&"](this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["?&"](this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["?|"](this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$1g<1>;
    ["?|"](this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["?|"](this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["#>"](this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$U<1>;
    ["#>"](this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["#>"](this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$U<0 | 1>;
    ["#>>"](this: export_default$U<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$l<1>;
    ["#>>"](this: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$l<0 | 1>;
    ["#>>"](this: export_default$U<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$l<0 | 1>;
    [">="](this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    [">="](this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    [">"](this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    ["<="](this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    ["<"](this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$U<1>, a1: export_default$U<1>): export_default$1g<1>;
    ["<>"](this: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$U<number>, a1: export_default$U<number>): export_default$1g<0 | 1>;
    ["@?"](this: export_default$U<1>, a1: export_default$T<1>): export_default$1g<1>;
    ["@?"](this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>): export_default$1g<0 | 1>;
    ["@?"](this: export_default$U<number>, a1: export_default$T<number>): export_default$1g<0 | 1>;
    ["@@"](this: export_default$U<1>, a1: export_default$T<1>): export_default$1g<1>;
    ["@@"](this: export_default$U<0 | 1>, a1: export_default$T<0 | 1>): export_default$1g<0 | 1>;
    ["@@"](this: export_default$U<number>, a1: export_default$T<number>): export_default$1g<0 | 1>;
}

type Parsed$R = string;
type SerializeParam$R = string;
declare class export_default$T<N extends number> extends Any<Parsed$R, N> {
    static new(v: SerializeParam$R): export_default$T<1>;
    static new(v: null): export_default$T<0>;
    static new(v: Expression): export_default$T<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$T<number> | undefined;
}

type Parsed$Q = string;
type SerializeParam$Q = string;
declare class export_default$S<N extends number> extends Any<Parsed$Q, N> {
    static new(v: SerializeParam$Q): export_default$S<1>;
    static new(v: null): export_default$S<0>;
    static new(v: Expression): export_default$S<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$S<number> | undefined;
}

type Parsed$P = string;
type SerializeParam$P = string;
declare class export_default$R<N extends number> extends Any<Parsed$P, N> {
    static new(v: SerializeParam$P): export_default$R<1>;
    static new(v: null): export_default$R<0>;
    static new(v: Expression): export_default$R<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$R<number> | undefined;
    closeLs(this: export_default$R<1>, a1: export_default$Q<1>): export_default$A<1>;
    closeLs(this: export_default$R<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    closeLs(this: export_default$R<number>, a1: export_default$Q<number>): export_default$A<0 | 1>;
    distLp(this: export_default$R<1>, a1: export_default$A<1>): export_default$14<1>;
    distLp(this: export_default$R<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    distLp(this: export_default$R<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    distLs(this: export_default$R<1>, a1: export_default$Q<1>): export_default$14<1>;
    distLs(this: export_default$R<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    distLs(this: export_default$R<number>, a1: export_default$Q<number>): export_default$14<0 | 1>;
    interLb(this: export_default$R<1>, a1: export_default$1f<1>): export_default$1g<1>;
    interLb(this: export_default$R<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    interLb(this: export_default$R<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ishorizontal(this: export_default$R<1>): export_default$1g<1>;
    ishorizontal(this: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    ishorizontal(this: export_default$R<number>): export_default$1g<0 | 1>;
    isparallel(this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    isparallel(this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    isparallel(this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    isperp(this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    isperp(this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    isperp(this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    isvertical(this: export_default$R<1>): export_default$1g<1>;
    isvertical(this: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    isvertical(this: export_default$R<number>): export_default$1g<0 | 1>;
    lineDistance(this: export_default$R<1>, a1: export_default$R<1>): export_default$14<1>;
    lineDistance(this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$14<0 | 1>;
    lineDistance(this: export_default$R<number>, a1: export_default$R<number>): export_default$14<0 | 1>;
    lineEq(this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    lineEq(this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    lineEq(this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    lineHorizontal(this: export_default$R<1>): export_default$1g<1>;
    lineHorizontal(this: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    lineHorizontal(this: export_default$R<number>): export_default$1g<0 | 1>;
    lineInterpt(this: export_default$R<1>, a1: export_default$R<1>): export_default$A<1>;
    lineInterpt(this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$A<0 | 1>;
    lineInterpt(this: export_default$R<number>, a1: export_default$R<number>): export_default$A<0 | 1>;
    lineIntersect(this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    lineIntersect(this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    lineIntersect(this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    lineParallel(this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    lineParallel(this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    lineParallel(this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    linePerp(this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    linePerp(this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    linePerp(this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    lineVertical(this: export_default$R<1>): export_default$1g<1>;
    lineVertical(this: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    lineVertical(this: export_default$R<number>): export_default$1g<0 | 1>;
    ["##"](this: export_default$R<1>, a1: export_default$Q<1>): export_default$A<1>;
    ["##"](this: export_default$R<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    ["##"](this: export_default$R<number>, a1: export_default$Q<number>): export_default$A<0 | 1>;
    ["<->"](this: export_default$R<1>, a1: export_default$A<1>): export_default$14<1>;
    ["<->"](this: export_default$R<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$R<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$R<1>, a1: export_default$Q<1>): export_default$14<1>;
    ["<->"](this: export_default$R<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$R<number>, a1: export_default$Q<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$R<1>, a1: export_default$R<1>): export_default$14<1>;
    ["<->"](this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$R<number>, a1: export_default$R<number>): export_default$14<0 | 1>;
    ["?#"](this: export_default$R<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["?#"](this: export_default$R<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$R<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    ["?#"](this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    ["="](this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    ["#"](this: export_default$R<1>, a1: export_default$R<1>): export_default$A<1>;
    ["#"](this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$A<0 | 1>;
    ["#"](this: export_default$R<number>, a1: export_default$R<number>): export_default$A<0 | 1>;
    ["?||"](this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    ["?||"](this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    ["?||"](this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    ["?-|"](this: export_default$R<1>, a1: export_default$R<1>): export_default$1g<1>;
    ["?-|"](this: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    ["?-|"](this: export_default$R<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
}

type Parsed$O = string;
type SerializeParam$O = string;
declare class export_default$Q<N extends number> extends Any<Parsed$O, N> {
    static new(v: SerializeParam$O): export_default$Q<1>;
    static new(v: null): export_default$Q<0>;
    static new(v: Expression): export_default$Q<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$Q<number> | undefined;
    closeLseg(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$A<1>;
    closeLseg(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    closeLseg(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$A<0 | 1>;
    closeSb(this: export_default$Q<1>, a1: export_default$1f<1>): export_default$A<1>;
    closeSb(this: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$A<0 | 1>;
    closeSb(this: export_default$Q<number>, a1: export_default$1f<number>): export_default$A<0 | 1>;
    distSb(this: export_default$Q<1>, a1: export_default$1f<1>): export_default$14<1>;
    distSb(this: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$14<0 | 1>;
    distSb(this: export_default$Q<number>, a1: export_default$1f<number>): export_default$14<0 | 1>;
    distSl(this: export_default$Q<1>, a1: export_default$R<1>): export_default$14<1>;
    distSl(this: export_default$Q<0 | 1>, a1: export_default$R<0 | 1>): export_default$14<0 | 1>;
    distSl(this: export_default$Q<number>, a1: export_default$R<number>): export_default$14<0 | 1>;
    distSp(this: export_default$Q<1>, a1: export_default$A<1>): export_default$14<1>;
    distSp(this: export_default$Q<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    distSp(this: export_default$Q<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    interSb(this: export_default$Q<1>, a1: export_default$1f<1>): export_default$1g<1>;
    interSb(this: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    interSb(this: export_default$Q<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    interSl(this: export_default$Q<1>, a1: export_default$R<1>): export_default$1g<1>;
    interSl(this: export_default$Q<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    interSl(this: export_default$Q<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    ishorizontal(this: export_default$Q<1>): export_default$1g<1>;
    ishorizontal(this: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    ishorizontal(this: export_default$Q<number>): export_default$1g<0 | 1>;
    isparallel(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    isparallel(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    isparallel(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    isperp(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    isperp(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    isperp(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    isvertical(this: export_default$Q<1>): export_default$1g<1>;
    isvertical(this: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    isvertical(this: export_default$Q<number>): export_default$1g<0 | 1>;
    length(this: export_default$Q<1>): export_default$14<1>;
    length(this: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    length(this: export_default$Q<number>): export_default$14<0 | 1>;
    lsegCenter(this: export_default$Q<1>): export_default$A<1>;
    lsegCenter(this: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    lsegCenter(this: export_default$Q<number>): export_default$A<0 | 1>;
    lsegDistance(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$14<1>;
    lsegDistance(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    lsegDistance(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$14<0 | 1>;
    lsegEq(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    lsegEq(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegEq(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegGe(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    lsegGe(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegGe(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegGt(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    lsegGt(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegGt(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegHorizontal(this: export_default$Q<1>): export_default$1g<1>;
    lsegHorizontal(this: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegHorizontal(this: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegInterpt(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$A<1>;
    lsegInterpt(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    lsegInterpt(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$A<0 | 1>;
    lsegIntersect(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    lsegIntersect(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegIntersect(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegLe(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    lsegLe(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegLe(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegLength(this: export_default$Q<1>): export_default$14<1>;
    lsegLength(this: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    lsegLength(this: export_default$Q<number>): export_default$14<0 | 1>;
    lsegLt(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    lsegLt(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegLt(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegNe(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    lsegNe(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegNe(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegParallel(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    lsegParallel(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegParallel(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegPerp(this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    lsegPerp(this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegPerp(this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    lsegVertical(this: export_default$Q<1>): export_default$1g<1>;
    lsegVertical(this: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    lsegVertical(this: export_default$Q<number>): export_default$1g<0 | 1>;
    onSb(this: export_default$Q<1>, a1: export_default$1f<1>): export_default$1g<1>;
    onSb(this: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    onSb(this: export_default$Q<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    onSl(this: export_default$Q<1>, a1: export_default$R<1>): export_default$1g<1>;
    onSl(this: export_default$Q<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    onSl(this: export_default$Q<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    point(this: export_default$Q<1>): export_default$A<1>;
    point(this: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    point(this: export_default$Q<number>): export_default$A<0 | 1>;
    ["##"](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$A<1>;
    ["##"](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    ["##"](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$A<0 | 1>;
    ["##"](this: export_default$Q<1>, a1: export_default$1f<1>): export_default$A<1>;
    ["##"](this: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$A<0 | 1>;
    ["##"](this: export_default$Q<number>, a1: export_default$1f<number>): export_default$A<0 | 1>;
    ["<->"](this: export_default$Q<1>, a1: export_default$1f<1>): export_default$14<1>;
    ["<->"](this: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$Q<number>, a1: export_default$1f<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$Q<1>, a1: export_default$R<1>): export_default$14<1>;
    ["<->"](this: export_default$Q<0 | 1>, a1: export_default$R<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$Q<number>, a1: export_default$R<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$Q<1>, a1: export_default$A<1>): export_default$14<1>;
    ["<->"](this: export_default$Q<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$Q<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$14<1>;
    ["<->"](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$14<0 | 1>;
    ["?#"](this: export_default$Q<1>, a1: export_default$1f<1>): export_default$1g<1>;
    ["?#"](this: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$Q<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$Q<1>, a1: export_default$R<1>): export_default$1g<1>;
    ["?#"](this: export_default$Q<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$Q<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    ["?#"](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    ["="](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    [">="](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    [">"](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    ["#"](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$A<1>;
    ["#"](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    ["#"](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$A<0 | 1>;
    ["<="](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    ["<="](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    ["<"](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    ["<>"](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    ["?||"](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    ["?||"](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    ["?||"](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    ["?-|"](this: export_default$Q<1>, a1: export_default$Q<1>): export_default$1g<1>;
    ["?-|"](this: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    ["?-|"](this: export_default$Q<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
}

type Parsed$N = string;
type SerializeParam$N = string;
declare class export_default$P<N extends number> extends Any<Parsed$N, N> {
    static new(v: SerializeParam$N): export_default$P<1>;
    static new(v: null): export_default$P<0>;
    static new(v: Expression): export_default$P<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$P<number> | undefined;
    hashmacaddr(this: export_default$P<1>): export_default$10<1>;
    hashmacaddr(this: export_default$P<0 | 1>): export_default$10<0 | 1>;
    hashmacaddr(this: export_default$P<number>): export_default$10<0 | 1>;
    hashmacaddrextended(this: export_default$P<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashmacaddrextended(this: export_default$P<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashmacaddrextended(this: export_default$P<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    macaddr8(this: export_default$P<1>): export_default$O<1>;
    macaddr8(this: export_default$P<0 | 1>): export_default$O<0 | 1>;
    macaddr8(this: export_default$P<number>): export_default$O<0 | 1>;
    macaddrAnd(this: export_default$P<1>, a1: export_default$P<1>): export_default$P<1>;
    macaddrAnd(this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$P<0 | 1>;
    macaddrAnd(this: export_default$P<number>, a1: export_default$P<number>): export_default$P<0 | 1>;
    macaddrCmp(this: export_default$P<1>, a1: export_default$P<1>): export_default$10<1>;
    macaddrCmp(this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$10<0 | 1>;
    macaddrCmp(this: export_default$P<number>, a1: export_default$P<number>): export_default$10<0 | 1>;
    macaddrEq(this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    macaddrEq(this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    macaddrEq(this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    macaddrGe(this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    macaddrGe(this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    macaddrGe(this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    macaddrGt(this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    macaddrGt(this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    macaddrGt(this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    macaddrLe(this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    macaddrLe(this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    macaddrLe(this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    macaddrLt(this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    macaddrLt(this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    macaddrLt(this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    macaddrNe(this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    macaddrNe(this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    macaddrNe(this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    macaddrNot(this: export_default$P<1>): export_default$P<1>;
    macaddrNot(this: export_default$P<0 | 1>): export_default$P<0 | 1>;
    macaddrNot(this: export_default$P<number>): export_default$P<0 | 1>;
    macaddrOr(this: export_default$P<1>, a1: export_default$P<1>): export_default$P<1>;
    macaddrOr(this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$P<0 | 1>;
    macaddrOr(this: export_default$P<number>, a1: export_default$P<number>): export_default$P<0 | 1>;
    trunc(this: export_default$P<1>): export_default$P<1>;
    trunc(this: export_default$P<0 | 1>): export_default$P<0 | 1>;
    trunc(this: export_default$P<number>): export_default$P<0 | 1>;
    ["&"](this: export_default$P<1>, a1: export_default$P<1>): export_default$P<1>;
    ["&"](this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$P<0 | 1>;
    ["&"](this: export_default$P<number>, a1: export_default$P<number>): export_default$P<0 | 1>;
    ["="](this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    ["="](this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    [">="](this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    [">"](this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    ["<="](this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    ["<"](this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$P<1>, a1: export_default$P<1>): export_default$1g<1>;
    ["<>"](this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$P<number>, a1: export_default$P<number>): export_default$1g<0 | 1>;
    ["|"](this: export_default$P<1>, a1: export_default$P<1>): export_default$P<1>;
    ["|"](this: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$P<0 | 1>;
    ["|"](this: export_default$P<number>, a1: export_default$P<number>): export_default$P<0 | 1>;
}

type Parsed$M = string;
type SerializeParam$M = string;
declare class export_default$O<N extends number> extends Any<Parsed$M, N> {
    static new(v: SerializeParam$M): export_default$O<1>;
    static new(v: null): export_default$O<0>;
    static new(v: Expression): export_default$O<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$O<number> | undefined;
    hashmacaddr8(this: export_default$O<1>): export_default$10<1>;
    hashmacaddr8(this: export_default$O<0 | 1>): export_default$10<0 | 1>;
    hashmacaddr8(this: export_default$O<number>): export_default$10<0 | 1>;
    hashmacaddr8Extended(this: export_default$O<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashmacaddr8Extended(this: export_default$O<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashmacaddr8Extended(this: export_default$O<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    macaddr(this: export_default$O<1>): export_default$P<1>;
    macaddr(this: export_default$O<0 | 1>): export_default$P<0 | 1>;
    macaddr(this: export_default$O<number>): export_default$P<0 | 1>;
    macaddr8And(this: export_default$O<1>, a1: export_default$O<1>): export_default$O<1>;
    macaddr8And(this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$O<0 | 1>;
    macaddr8And(this: export_default$O<number>, a1: export_default$O<number>): export_default$O<0 | 1>;
    macaddr8Cmp(this: export_default$O<1>, a1: export_default$O<1>): export_default$10<1>;
    macaddr8Cmp(this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$10<0 | 1>;
    macaddr8Cmp(this: export_default$O<number>, a1: export_default$O<number>): export_default$10<0 | 1>;
    macaddr8Eq(this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    macaddr8Eq(this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    macaddr8Eq(this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    macaddr8Ge(this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    macaddr8Ge(this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    macaddr8Ge(this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    macaddr8Gt(this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    macaddr8Gt(this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    macaddr8Gt(this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    macaddr8Le(this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    macaddr8Le(this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    macaddr8Le(this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    macaddr8Lt(this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    macaddr8Lt(this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    macaddr8Lt(this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    macaddr8Ne(this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    macaddr8Ne(this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    macaddr8Ne(this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    macaddr8Not(this: export_default$O<1>): export_default$O<1>;
    macaddr8Not(this: export_default$O<0 | 1>): export_default$O<0 | 1>;
    macaddr8Not(this: export_default$O<number>): export_default$O<0 | 1>;
    macaddr8Or(this: export_default$O<1>, a1: export_default$O<1>): export_default$O<1>;
    macaddr8Or(this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$O<0 | 1>;
    macaddr8Or(this: export_default$O<number>, a1: export_default$O<number>): export_default$O<0 | 1>;
    macaddr8Set7Bit(this: export_default$O<1>): export_default$O<1>;
    macaddr8Set7Bit(this: export_default$O<0 | 1>): export_default$O<0 | 1>;
    macaddr8Set7Bit(this: export_default$O<number>): export_default$O<0 | 1>;
    trunc(this: export_default$O<1>): export_default$O<1>;
    trunc(this: export_default$O<0 | 1>): export_default$O<0 | 1>;
    trunc(this: export_default$O<number>): export_default$O<0 | 1>;
    ["&"](this: export_default$O<1>, a1: export_default$O<1>): export_default$O<1>;
    ["&"](this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$O<0 | 1>;
    ["&"](this: export_default$O<number>, a1: export_default$O<number>): export_default$O<0 | 1>;
    ["="](this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    ["="](this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    [">="](this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    [">"](this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    ["<="](this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    ["<"](this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$O<1>, a1: export_default$O<1>): export_default$1g<1>;
    ["<>"](this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$O<number>, a1: export_default$O<number>): export_default$1g<0 | 1>;
    ["|"](this: export_default$O<1>, a1: export_default$O<1>): export_default$O<1>;
    ["|"](this: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$O<0 | 1>;
    ["|"](this: export_default$O<number>, a1: export_default$O<number>): export_default$O<0 | 1>;
}

type Parsed$L = string;
type SerializeParam$L = string;
declare class export_default$N<N extends number> extends Any<Parsed$L, N> {
    static new(v: SerializeParam$L): export_default$N<1>;
    static new(v: null): export_default$N<0>;
    static new(v: Expression): export_default$N<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$N<number> | undefined;
    cashCmp(this: export_default$N<1>, a1: export_default$N<1>): export_default$10<1>;
    cashCmp(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$10<0 | 1>;
    cashCmp(this: export_default$N<number>, a1: export_default$N<number>): export_default$10<0 | 1>;
    cashDivCash(this: export_default$N<1>, a1: export_default$N<1>): export_default$14<1>;
    cashDivCash(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$14<0 | 1>;
    cashDivCash(this: export_default$N<number>, a1: export_default$N<number>): export_default$14<0 | 1>;
    cashDivFlt4(this: export_default$N<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$N<1>;
    cashDivFlt4(this: export_default$N<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$N<0 | 1>;
    cashDivFlt4(this: export_default$N<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$N<0 | 1>;
    cashDivFlt8(this: export_default$N<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$N<1>;
    cashDivFlt8(this: export_default$N<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$N<0 | 1>;
    cashDivFlt8(this: export_default$N<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$N<0 | 1>;
    cashDivInt2(this: export_default$N<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$N<1>;
    cashDivInt2(this: export_default$N<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$N<0 | 1>;
    cashDivInt2(this: export_default$N<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$N<0 | 1>;
    cashDivInt4(this: export_default$N<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$N<1>;
    cashDivInt4(this: export_default$N<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$N<0 | 1>;
    cashDivInt4(this: export_default$N<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$N<0 | 1>;
    cashDivInt8(this: export_default$N<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$N<1>;
    cashDivInt8(this: export_default$N<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$N<0 | 1>;
    cashDivInt8(this: export_default$N<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$N<0 | 1>;
    cashEq(this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    cashEq(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    cashEq(this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    cashGe(this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    cashGe(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    cashGe(this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    cashGt(this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    cashGt(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    cashGt(this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    cashLe(this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    cashLe(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    cashLe(this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    cashLt(this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    cashLt(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    cashLt(this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    cashMi(this: export_default$N<1>, a1: export_default$N<1>): export_default$N<1>;
    cashMi(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    cashMi(this: export_default$N<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    cashMulFlt4(this: export_default$N<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$N<1>;
    cashMulFlt4(this: export_default$N<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$N<0 | 1>;
    cashMulFlt4(this: export_default$N<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$N<0 | 1>;
    cashMulFlt8(this: export_default$N<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$N<1>;
    cashMulFlt8(this: export_default$N<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$N<0 | 1>;
    cashMulFlt8(this: export_default$N<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$N<0 | 1>;
    cashMulInt2(this: export_default$N<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$N<1>;
    cashMulInt2(this: export_default$N<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$N<0 | 1>;
    cashMulInt2(this: export_default$N<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$N<0 | 1>;
    cashMulInt4(this: export_default$N<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$N<1>;
    cashMulInt4(this: export_default$N<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$N<0 | 1>;
    cashMulInt4(this: export_default$N<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$N<0 | 1>;
    cashMulInt8(this: export_default$N<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$N<1>;
    cashMulInt8(this: export_default$N<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$N<0 | 1>;
    cashMulInt8(this: export_default$N<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$N<0 | 1>;
    cashNe(this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    cashNe(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    cashNe(this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    cashPl(this: export_default$N<1>, a1: export_default$N<1>): export_default$N<1>;
    cashPl(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    cashPl(this: export_default$N<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    cashWords(this: export_default$N<1>): export_default$l<1>;
    cashWords(this: export_default$N<0 | 1>): export_default$l<0 | 1>;
    cashWords(this: export_default$N<number>): export_default$l<0 | 1>;
    cashlarger(this: export_default$N<1>, a1: export_default$N<1>): export_default$N<1>;
    cashlarger(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    cashlarger(this: export_default$N<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    cashsmaller(this: export_default$N<1>, a1: export_default$N<1>): export_default$N<1>;
    cashsmaller(this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    cashsmaller(this: export_default$N<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    max(this: export_default$N<number>): export_default$N<0 | 1>;
    numeric(this: export_default$N<1>): export_default$L<1>;
    numeric(this: export_default$N<0 | 1>): export_default$L<0 | 1>;
    numeric(this: export_default$N<number>): export_default$L<0 | 1>;
    sum(this: export_default$N<number>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<1>, a1: export_default$N<1>): export_default$14<1>;
    ["/"](this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$14<0 | 1>;
    ["/"](this: export_default$N<number>, a1: export_default$N<number>): export_default$14<0 | 1>;
    ["/"](this: export_default$N<1>, a1: export_default$15<1>): export_default$N<1>;
    ["/"](this: export_default$N<0 | 1>, a1: export_default$15<0 | 1>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<number>, a1: export_default$15<number>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<1>, a1: export_default$14<1>): export_default$N<1>;
    ["/"](this: export_default$N<0 | 1>, a1: export_default$14<0 | 1>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<number>, a1: export_default$14<number>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<1>, a1: export_default$12<1>): export_default$N<1>;
    ["/"](this: export_default$N<0 | 1>, a1: export_default$12<0 | 1>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<number>, a1: export_default$12<number>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<1>, a1: export_default$10<1>): export_default$N<1>;
    ["/"](this: export_default$N<0 | 1>, a1: export_default$10<0 | 1>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<number>, a1: export_default$10<number>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<1>, a1: export_default$Z<1>): export_default$N<1>;
    ["/"](this: export_default$N<0 | 1>, a1: export_default$Z<0 | 1>): export_default$N<0 | 1>;
    ["/"](this: export_default$N<number>, a1: export_default$Z<number>): export_default$N<0 | 1>;
    ["="](this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    ["="](this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    [">="](this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    [">"](this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    ["<="](this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    ["<"](this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$N<1>, a1: export_default$N<1>): export_default$N<1>;
    ["-"](this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    ["-"](this: export_default$N<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<1>, a1: export_default$15<1> | Input<export_default$15<0 | 1>>): export_default$N<1>;
    ["*"](this: export_default$N<0 | 1>, a1: export_default$15<0 | 1> | Input<export_default$15<0 | 1>>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<number>, a1: export_default$15<number> | Input<export_default$15<0 | 1>>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$N<1>;
    ["*"](this: export_default$N<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>): export_default$N<1>;
    ["*"](this: export_default$N<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$N<1>;
    ["*"](this: export_default$N<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$N<1>;
    ["*"](this: export_default$N<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$N<0 | 1>;
    ["*"](this: export_default$N<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$N<0 | 1>;
    ["<>"](this: export_default$N<1>, a1: export_default$N<1>): export_default$1g<1>;
    ["<>"](this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$N<number>, a1: export_default$N<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$N<1>, a1: export_default$N<1>): export_default$N<1>;
    ["+"](this: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
    ["+"](this: export_default$N<number>, a1: export_default$N<number>): export_default$N<0 | 1>;
}

type Parsed$K = string;
type SerializeParam$K = string;
declare class export_default$M<N extends number> extends Any<Parsed$K, N> {
    static new(v: SerializeParam$K): export_default$M<1>;
    static new(v: null): export_default$M<0>;
    static new(v: Expression): export_default$M<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$M<number> | undefined;
    binaryUpgradeLogicalSlotHasCaughtUp(this: export_default$M<1>): export_default$1g<1>;
    binaryUpgradeLogicalSlotHasCaughtUp(this: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    binaryUpgradeLogicalSlotHasCaughtUp(this: export_default$M<number>): export_default$1g<0 | 1>;
    bpchar(this: export_default$M<1>): export_default$1e<1>;
    bpchar(this: export_default$M<0 | 1>): export_default$1e<0 | 1>;
    bpchar(this: export_default$M<number>): export_default$1e<0 | 1>;
    btnamecmp(this: export_default$M<1>, a1: export_default$M<1>): export_default$10<1>;
    btnamecmp(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$10<0 | 1>;
    btnamecmp(this: export_default$M<number>, a1: export_default$M<number>): export_default$10<0 | 1>;
    btnametextcmp(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    btnametextcmp(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    btnametextcmp(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasAnyColumnPrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasAnyColumnPrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$12<1> | Input<export_default$12<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$12<number> | Input<export_default$12<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$12<1> | Input<export_default$12<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$12<number> | Input<export_default$12<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasDatabasePrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasDatabasePrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasForeignDataWrapperPrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasForeignDataWrapperPrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasFunctionPrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasFunctionPrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasLanguagePrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasLanguagePrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasParameterPrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasParameterPrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasParameterPrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSchemaPrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSchemaPrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSequencePrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSequencePrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasServerPrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasServerPrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablePrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablePrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablespacePrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablespacePrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTypePrivilege(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTypePrivilege(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hashname(this: export_default$M<1>): export_default$10<1>;
    hashname(this: export_default$M<0 | 1>): export_default$10<0 | 1>;
    hashname(this: export_default$M<number>): export_default$10<0 | 1>;
    hashnameextended(this: export_default$M<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashnameextended(this: export_default$M<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashnameextended(this: export_default$M<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    like(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    like(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    like(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameconcatoid(this: export_default$M<1>, a1: export_default$I<1>): export_default$M<1>;
    nameconcatoid(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>): export_default$M<0 | 1>;
    nameconcatoid(this: export_default$M<number>, a1: export_default$I<number>): export_default$M<0 | 1>;
    nameeq(this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    nameeq(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    nameeq(this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    nameeqtext(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    nameeqtext(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameeqtext(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namege(this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    namege(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    namege(this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    namegetext(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    namegetext(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namegetext(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namegt(this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    namegt(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    namegt(this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    namegttext(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    namegttext(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namegttext(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameiclike(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    nameiclike(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameiclike(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameicnlike(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    nameicnlike(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameicnlike(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameicregexeq(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    nameicregexeq(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameicregexeq(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameicregexne(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    nameicregexne(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameicregexne(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namele(this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    namele(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    namele(this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    nameletext(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    nameletext(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameletext(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namelike(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    namelike(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namelike(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namelt(this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    namelt(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    namelt(this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    namelttext(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    namelttext(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namelttext(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namene(this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    namene(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    namene(this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    namenetext(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    namenetext(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namenetext(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namenlike(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    namenlike(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    namenlike(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameregexeq(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    nameregexeq(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameregexeq(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameregexne(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    nameregexne(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    nameregexne(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    notlike(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    notlike(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    notlike(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgCharToEncoding(this: export_default$M<1>): export_default$10<1>;
    pgCharToEncoding(this: export_default$M<0 | 1>): export_default$10<0 | 1>;
    pgCharToEncoding(this: export_default$M<number>): export_default$10<0 | 1>;
    pgCopyLogicalReplicationSlot(this: export_default$M<1>, a1: export_default$M<1>): Record$1<1, {
        slot_name: export_default$M<1>;
        lsn: export_default$E<1>;
    }>;
    pgCopyLogicalReplicationSlot(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCopyLogicalReplicationSlot(this: export_default$M<number>, a1: export_default$M<number>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCopyLogicalReplicationSlot(this: export_default$M<1>, a1: export_default$M<1>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Record$1<1, {
        slot_name: export_default$M<1>;
        lsn: export_default$E<1>;
    }>;
    pgCopyLogicalReplicationSlot(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCopyLogicalReplicationSlot(this: export_default$M<number>, a1: export_default$M<number>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCopyLogicalReplicationSlot(this: export_default$M<1>, a1: export_default$M<1>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$M<1>): Record$1<1, {
        slot_name: export_default$M<1>;
        lsn: export_default$E<1>;
    }>;
    pgCopyLogicalReplicationSlot(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$M<0 | 1>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCopyLogicalReplicationSlot(this: export_default$M<number>, a1: export_default$M<number>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$M<number>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCopyPhysicalReplicationSlot(this: export_default$M<1>, a1: export_default$M<1>): Record$1<1, {
        slot_name: export_default$M<1>;
        lsn: export_default$E<1>;
    }>;
    pgCopyPhysicalReplicationSlot(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCopyPhysicalReplicationSlot(this: export_default$M<number>, a1: export_default$M<number>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCopyPhysicalReplicationSlot(this: export_default$M<1>, a1: export_default$M<1>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Record$1<1, {
        slot_name: export_default$M<1>;
        lsn: export_default$E<1>;
    }>;
    pgCopyPhysicalReplicationSlot(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCopyPhysicalReplicationSlot(this: export_default$M<number>, a1: export_default$M<number>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCreateLogicalReplicationSlot(this: export_default$M<1>, a1: export_default$M<1>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Record$1<1, {
        slot_name: export_default$M<1>;
        lsn: export_default$E<1>;
    }>;
    pgCreateLogicalReplicationSlot(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCreateLogicalReplicationSlot(this: export_default$M<number>, a1: export_default$M<number>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCreatePhysicalReplicationSlot(this: export_default$M<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Record$1<1, {
        slot_name: export_default$M<1>;
        lsn: export_default$E<1>;
    }>;
    pgCreatePhysicalReplicationSlot(this: export_default$M<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgCreatePhysicalReplicationSlot(this: export_default$M<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        lsn: export_default$E<0 | 1>;
    }>;
    pgDatabaseSize(this: export_default$M<1>): export_default$Z<1>;
    pgDatabaseSize(this: export_default$M<0 | 1>): export_default$Z<0 | 1>;
    pgDatabaseSize(this: export_default$M<number>): export_default$Z<0 | 1>;
    pgDropReplicationSlot(this: export_default$M<1>): export_default$4<1>;
    pgDropReplicationSlot(this: export_default$M<0 | 1>): export_default$4<0 | 1>;
    pgDropReplicationSlot(this: export_default$M<number>): export_default$4<0 | 1>;
    pgExtensionUpdatePaths(this: export_default$M<1>): Setof<{
        from: {
            source: export_default$l<1>;
            target: export_default$l<1>;
            path: export_default$l<1>;
        };
    }>;
    pgExtensionUpdatePaths(this: export_default$M<0 | 1>): Setof<{
        from: {
            source: export_default$l<0 | 1>;
            target: export_default$l<0 | 1>;
            path: export_default$l<0 | 1>;
        };
    }>;
    pgExtensionUpdatePaths(this: export_default$M<number>): Setof<{
        from: {
            source: export_default$l<0 | 1>;
            target: export_default$l<0 | 1>;
            path: export_default$l<0 | 1>;
        };
    }>;
    pgHasRole(this: export_default$M<1>, a1: export_default$M<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgHasRole(this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$M<number>, a1: export_default$M<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$M<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgHasRole(this: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$M<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgHasRole(this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgLogicalSlotGetBinaryChanges(this: export_default$M<1>, a1: export_default$E<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: Array$1<1, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<1>;
            xid: export_default$3<1>;
            data: export_default$1d<1>;
        };
    }>;
    pgLogicalSlotGetBinaryChanges(this: export_default$M<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<0 | 1>;
            xid: export_default$3<0 | 1>;
            data: export_default$1d<0 | 1>;
        };
    }>;
    pgLogicalSlotGetBinaryChanges(this: export_default$M<number>, a1: export_default$E<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: Array$1<number, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<0 | 1>;
            xid: export_default$3<0 | 1>;
            data: export_default$1d<0 | 1>;
        };
    }>;
    pgLogicalSlotGetChanges(this: export_default$M<1>, a1: export_default$E<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: Array$1<1, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<1>;
            xid: export_default$3<1>;
            data: export_default$l<1>;
        };
    }>;
    pgLogicalSlotGetChanges(this: export_default$M<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<0 | 1>;
            xid: export_default$3<0 | 1>;
            data: export_default$l<0 | 1>;
        };
    }>;
    pgLogicalSlotGetChanges(this: export_default$M<number>, a1: export_default$E<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: Array$1<number, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<0 | 1>;
            xid: export_default$3<0 | 1>;
            data: export_default$l<0 | 1>;
        };
    }>;
    pgLogicalSlotPeekBinaryChanges(this: export_default$M<1>, a1: export_default$E<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: Array$1<1, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<1>;
            xid: export_default$3<1>;
            data: export_default$1d<1>;
        };
    }>;
    pgLogicalSlotPeekBinaryChanges(this: export_default$M<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<0 | 1>;
            xid: export_default$3<0 | 1>;
            data: export_default$1d<0 | 1>;
        };
    }>;
    pgLogicalSlotPeekBinaryChanges(this: export_default$M<number>, a1: export_default$E<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: Array$1<number, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<0 | 1>;
            xid: export_default$3<0 | 1>;
            data: export_default$1d<0 | 1>;
        };
    }>;
    pgLogicalSlotPeekChanges(this: export_default$M<1>, a1: export_default$E<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: Array$1<1, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<1>;
            xid: export_default$3<1>;
            data: export_default$l<1>;
        };
    }>;
    pgLogicalSlotPeekChanges(this: export_default$M<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<0 | 1>;
            xid: export_default$3<0 | 1>;
            data: export_default$l<0 | 1>;
        };
    }>;
    pgLogicalSlotPeekChanges(this: export_default$M<number>, a1: export_default$E<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: Array$1<number, export_default$l<0 | 1>>): Setof<{
        from: {
            lsn: export_default$E<0 | 1>;
            xid: export_default$3<0 | 1>;
            data: export_default$l<0 | 1>;
        };
    }>;
    pgReplicationSlotAdvance(this: export_default$M<1>, a1: export_default$E<1>): Record$1<1, {
        slot_name: export_default$M<1>;
        end_lsn: export_default$E<1>;
    }>;
    pgReplicationSlotAdvance(this: export_default$M<0 | 1>, a1: export_default$E<0 | 1>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        end_lsn: export_default$E<0 | 1>;
    }>;
    pgReplicationSlotAdvance(this: export_default$M<number>, a1: export_default$E<number>): Record$1<0 | 1, {
        slot_name: export_default$M<0 | 1>;
        end_lsn: export_default$E<0 | 1>;
    }>;
    pgTablespaceSize(this: export_default$M<1>): export_default$Z<1>;
    pgTablespaceSize(this: export_default$M<0 | 1>): export_default$Z<0 | 1>;
    pgTablespaceSize(this: export_default$M<number>): export_default$Z<0 | 1>;
    schemaToXml(this: export_default$M<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    schemaToXml(this: export_default$M<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    schemaToXml(this: export_default$M<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    schemaToXmlAndXmlschema(this: export_default$M<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    schemaToXmlAndXmlschema(this: export_default$M<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    schemaToXmlAndXmlschema(this: export_default$M<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    schemaToXmlschema(this: export_default$M<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    schemaToXmlschema(this: export_default$M<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    schemaToXmlschema(this: export_default$M<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    text(this: export_default$M<1>): export_default$l<1>;
    text(this: export_default$M<0 | 1>): export_default$l<0 | 1>;
    text(this: export_default$M<number>): export_default$l<0 | 1>;
    varchar(this: export_default$M<1>): export_default$5<1>;
    varchar(this: export_default$M<0 | 1>): export_default$5<0 | 1>;
    varchar(this: export_default$M<number>): export_default$5<0 | 1>;
    ["="](this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    ["="](this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    [">="](this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    [">"](this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~~*"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~~*"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~~*"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~*"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~~*"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~*"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~*"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~*"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~*"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~*"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~*"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~*"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    ["<="](this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~~"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~~"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~~"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    ["<"](this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$M<1>, a1: export_default$M<1>): export_default$1g<1>;
    ["<>"](this: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$M<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~~"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~"](this: export_default$M<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~"](this: export_default$M<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~"](this: export_default$M<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
}

type Parsed$J = ReturnType<typeof typeMap["numeric"]['parse']>;
type SerializeParam$J = Parameters<typeof typeMap["numeric"]['serialize']>[0];
declare class export_default$L<N extends number> extends Any<Parsed$J, N> {
    static new(v: SerializeParam$J): export_default$L<1>;
    static new(v: null): export_default$L<0>;
    static new(v: Expression): export_default$L<0 | 1>;
    static serializeParamTypes: readonly SerializeParam$J[] | undefined;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$L<number> | undefined;
    abs(this: export_default$L<1>): export_default$L<1>;
    abs(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    abs(this: export_default$L<number>): export_default$L<0 | 1>;
    avg(this: export_default$L<number>): export_default$L<0 | 1>;
    ceil(this: export_default$L<1>): export_default$L<1>;
    ceil(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    ceil(this: export_default$L<number>): export_default$L<0 | 1>;
    ceiling(this: export_default$L<1>): export_default$L<1>;
    ceiling(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    ceiling(this: export_default$L<number>): export_default$L<0 | 1>;
    div(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    div(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    div(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    exp(this: export_default$L<1>): export_default$L<1>;
    exp(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    exp(this: export_default$L<number>): export_default$L<0 | 1>;
    float4(this: export_default$L<1>): export_default$15<1>;
    float4(this: export_default$L<0 | 1>): export_default$15<0 | 1>;
    float4(this: export_default$L<number>): export_default$15<0 | 1>;
    float8(this: export_default$L<1>): export_default$14<1>;
    float8(this: export_default$L<0 | 1>): export_default$14<0 | 1>;
    float8(this: export_default$L<number>): export_default$14<0 | 1>;
    floor(this: export_default$L<1>): export_default$L<1>;
    floor(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    floor(this: export_default$L<number>): export_default$L<0 | 1>;
    gcd(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    gcd(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    gcd(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    generateSeries(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>, a2: export_default$L<1> | Input<export_default$L<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>, a2: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>, a2: export_default$L<number> | Input<export_default$L<0 | 1>>): Setof<{
        from: {};
    }>;
    hashNumeric(this: export_default$L<1>): export_default$10<1>;
    hashNumeric(this: export_default$L<0 | 1>): export_default$10<0 | 1>;
    hashNumeric(this: export_default$L<number>): export_default$10<0 | 1>;
    hashNumericExtended(this: export_default$L<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashNumericExtended(this: export_default$L<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashNumericExtended(this: export_default$L<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    inRange(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>, a2: export_default$L<1> | Input<export_default$L<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>, a2: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>, a2: export_default$L<number> | Input<export_default$L<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    int2(this: export_default$L<1>): export_default$12<1>;
    int2(this: export_default$L<0 | 1>): export_default$12<0 | 1>;
    int2(this: export_default$L<number>): export_default$12<0 | 1>;
    int4(this: export_default$L<1>): export_default$10<1>;
    int4(this: export_default$L<0 | 1>): export_default$10<0 | 1>;
    int4(this: export_default$L<number>): export_default$10<0 | 1>;
    int8(this: export_default$L<1>): export_default$Z<1>;
    int8(this: export_default$L<0 | 1>): export_default$Z<0 | 1>;
    int8(this: export_default$L<number>): export_default$Z<0 | 1>;
    int8Sum(this: export_default$L<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$L<1>;
    int8Sum(this: export_default$L<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$L<0 | 1>;
    int8Sum(this: export_default$L<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$L<0 | 1>;
    lcm(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    lcm(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    lcm(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ln(this: export_default$L<1>): export_default$L<1>;
    ln(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    ln(this: export_default$L<number>): export_default$L<0 | 1>;
    log(this: export_default$L<1>): export_default$L<1>;
    log(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    log(this: export_default$L<number>): export_default$L<0 | 1>;
    log(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    log(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    log(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    log10(this: export_default$L<1>): export_default$L<1>;
    log10(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    log10(this: export_default$L<number>): export_default$L<0 | 1>;
    max(this: export_default$L<number>): export_default$L<0 | 1>;
    minScale(this: export_default$L<1>): export_default$10<1>;
    minScale(this: export_default$L<0 | 1>): export_default$10<0 | 1>;
    minScale(this: export_default$L<number>): export_default$10<0 | 1>;
    mod(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    mod(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    mod(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    money(this: export_default$L<1>): export_default$N<1>;
    money(this: export_default$L<0 | 1>): export_default$N<0 | 1>;
    money(this: export_default$L<number>): export_default$N<0 | 1>;
    numeric(this: export_default$L<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$L<1>;
    numeric(this: export_default$L<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$L<0 | 1>;
    numeric(this: export_default$L<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$L<0 | 1>;
    numericAbs(this: export_default$L<1>): export_default$L<1>;
    numericAbs(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    numericAbs(this: export_default$L<number>): export_default$L<0 | 1>;
    numericAdd(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericAdd(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericAdd(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericCmp(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$10<1>;
    numericCmp(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$10<0 | 1>;
    numericCmp(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$10<0 | 1>;
    numericDiv(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericDiv(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericDiv(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericDivTrunc(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericDivTrunc(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericDivTrunc(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericEq(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    numericEq(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericEq(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericExp(this: export_default$L<1>): export_default$L<1>;
    numericExp(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    numericExp(this: export_default$L<number>): export_default$L<0 | 1>;
    numericGe(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    numericGe(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericGe(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericGt(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    numericGt(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericGt(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericInc(this: export_default$L<1>): export_default$L<1>;
    numericInc(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    numericInc(this: export_default$L<number>): export_default$L<0 | 1>;
    numericLarger(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericLarger(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericLarger(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericLe(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    numericLe(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericLe(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericLn(this: export_default$L<1>): export_default$L<1>;
    numericLn(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    numericLn(this: export_default$L<number>): export_default$L<0 | 1>;
    numericLog(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericLog(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericLog(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericLt(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    numericLt(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericLt(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericMod(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericMod(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericMod(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericMul(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericMul(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericMul(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericNe(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    numericNe(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericNe(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    numericPlPgLsn(this: export_default$L<1>, a1: export_default$E<1>): export_default$E<1>;
    numericPlPgLsn(this: export_default$L<0 | 1>, a1: export_default$E<0 | 1>): export_default$E<0 | 1>;
    numericPlPgLsn(this: export_default$L<number>, a1: export_default$E<number>): export_default$E<0 | 1>;
    numericPower(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericPower(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericPower(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericSmaller(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericSmaller(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericSmaller(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericSqrt(this: export_default$L<1>): export_default$L<1>;
    numericSqrt(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    numericSqrt(this: export_default$L<number>): export_default$L<0 | 1>;
    numericSub(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    numericSub(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericSub(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    numericUminus(this: export_default$L<1>): export_default$L<1>;
    numericUminus(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    numericUminus(this: export_default$L<number>): export_default$L<0 | 1>;
    numericUplus(this: export_default$L<1>): export_default$L<1>;
    numericUplus(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    numericUplus(this: export_default$L<number>): export_default$L<0 | 1>;
    numrange(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$J<1>;
    numrange(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$J<0 | 1>;
    numrange(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$J<0 | 1>;
    numrange(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$J<1>;
    numrange(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$J<0 | 1>;
    numrange(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$J<0 | 1>;
    numrangeSubdiff(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$14<1>;
    numrangeSubdiff(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$14<0 | 1>;
    numrangeSubdiff(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$14<0 | 1>;
    pgLsn(this: export_default$L<1>): export_default$E<1>;
    pgLsn(this: export_default$L<0 | 1>): export_default$E<0 | 1>;
    pgLsn(this: export_default$L<number>): export_default$E<0 | 1>;
    pgSizePretty(this: export_default$L<1>): export_default$l<1>;
    pgSizePretty(this: export_default$L<0 | 1>): export_default$l<0 | 1>;
    pgSizePretty(this: export_default$L<number>): export_default$l<0 | 1>;
    pow(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    pow(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    pow(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    power(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    power(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    power(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    random(this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    random(this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    random(this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    round(this: export_default$L<1>): export_default$L<1>;
    round(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    round(this: export_default$L<number>): export_default$L<0 | 1>;
    round(this: export_default$L<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$L<1>;
    round(this: export_default$L<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$L<0 | 1>;
    round(this: export_default$L<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$L<0 | 1>;
    scale(this: export_default$L<1>): export_default$10<1>;
    scale(this: export_default$L<0 | 1>): export_default$10<0 | 1>;
    scale(this: export_default$L<number>): export_default$10<0 | 1>;
    sign(this: export_default$L<1>): export_default$L<1>;
    sign(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    sign(this: export_default$L<number>): export_default$L<0 | 1>;
    sqrt(this: export_default$L<1>): export_default$L<1>;
    sqrt(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    sqrt(this: export_default$L<number>): export_default$L<0 | 1>;
    stddev(this: export_default$L<number>): export_default$L<0 | 1>;
    stddevPop(this: export_default$L<number>): export_default$L<0 | 1>;
    stddevSamp(this: export_default$L<number>): export_default$L<0 | 1>;
    sum(this: export_default$L<number>): export_default$L<0 | 1>;
    toChar(this: export_default$L<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    toChar(this: export_default$L<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toChar(this: export_default$L<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    trimScale(this: export_default$L<1>): export_default$L<1>;
    trimScale(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    trimScale(this: export_default$L<number>): export_default$L<0 | 1>;
    trunc(this: export_default$L<1>): export_default$L<1>;
    trunc(this: export_default$L<0 | 1>): export_default$L<0 | 1>;
    trunc(this: export_default$L<number>): export_default$L<0 | 1>;
    trunc(this: export_default$L<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$L<1>;
    trunc(this: export_default$L<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$L<0 | 1>;
    trunc(this: export_default$L<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$L<0 | 1>;
    varPop(this: export_default$L<number>): export_default$L<0 | 1>;
    varSamp(this: export_default$L<number>): export_default$L<0 | 1>;
    variance(this: export_default$L<number>): export_default$L<0 | 1>;
    ["+"](this: export_default$L<1>, a1: export_default$L<1>): export_default$L<1>;
    ["+"](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
    ["+"](this: export_default$L<number>, a1: export_default$L<number>): export_default$L<0 | 1>;
    ["+"](this: export_default$L<1>, a1: export_default$E<1>): export_default$E<1>;
    ["+"](this: export_default$L<0 | 1>, a1: export_default$E<0 | 1>): export_default$E<0 | 1>;
    ["+"](this: export_default$L<number>, a1: export_default$E<number>): export_default$E<0 | 1>;
    ["/"](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    ["/"](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ["/"](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ["="](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    ["%"](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    ["%"](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ["%"](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ["*"](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    ["*"](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ["*"](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ["<>"](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$1g<0 | 1>;
    ["^"](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    ["^"](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ["^"](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ["-"](this: export_default$L<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$L<1>;
    ["-"](this: export_default$L<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
    ["-"](this: export_default$L<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$L<0 | 1>;
}

type Parsed$I = string;
type SerializeParam$I = string;
declare class export_default$K<N extends number> extends Any<Parsed$I, N> {
    static new(v: SerializeParam$I): export_default$K<1>;
    static new(v: null): export_default$K<0>;
    static new(v: Expression): export_default$K<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$K<number> | undefined;
}

type Parsed$H = string;
type SerializeParam$H = string;
declare class export_default$J<N extends number> extends Any<Parsed$H, N> {
    static new(v: SerializeParam$H): export_default$J<1>;
    static new(v: null): export_default$J<0>;
    static new(v: Expression): export_default$J<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$J<number> | undefined;
    nummultirange(this: export_default$J<1>): export_default$K<1>;
    nummultirange(this: export_default$J<0 | 1>): export_default$K<0 | 1>;
    nummultirange(this: export_default$J<number>): export_default$K<0 | 1>;
}

type Parsed$G = string;
type SerializeParam$G = string;
declare class export_default$I<N extends number> extends Any<Parsed$G, N> {
    static new(v: SerializeParam$G): export_default$I<1>;
    static new(v: null): export_default$I<0>;
    static new(v: Expression): export_default$I<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$I<number> | undefined;
    amvalidate(this: export_default$I<1>): export_default$1g<1>;
    amvalidate(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    amvalidate(this: export_default$I<number>): export_default$1g<0 | 1>;
    binaryUpgradeSetMissingValue(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$4<1>;
    binaryUpgradeSetMissingValue(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$4<0 | 1>;
    binaryUpgradeSetMissingValue(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$4<0 | 1>;
    binaryUpgradeSetNextArrayPgTypeOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextArrayPgTypeOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextArrayPgTypeOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextHeapPgClassOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextHeapPgClassOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextHeapPgClassOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextHeapRelfilenode(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextHeapRelfilenode(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextHeapRelfilenode(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextIndexPgClassOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextIndexPgClassOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextIndexPgClassOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextIndexRelfilenode(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextIndexRelfilenode(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextIndexRelfilenode(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextMultirangeArrayPgTypeOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextMultirangeArrayPgTypeOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextMultirangeArrayPgTypeOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextMultirangePgTypeOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextMultirangePgTypeOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextMultirangePgTypeOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextPgAuthidOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextPgAuthidOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextPgAuthidOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextPgEnumOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextPgEnumOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextPgEnumOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextPgTablespaceOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextPgTablespaceOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextPgTablespaceOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextPgTypeOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextPgTypeOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextPgTypeOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextToastPgClassOid(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextToastPgClassOid(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextToastPgClassOid(this: export_default$I<number>): export_default$4<0 | 1>;
    binaryUpgradeSetNextToastRelfilenode(this: export_default$I<1>): export_default$4<1>;
    binaryUpgradeSetNextToastRelfilenode(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeSetNextToastRelfilenode(this: export_default$I<number>): export_default$4<0 | 1>;
    btequalimage(this: export_default$I<1>): export_default$1g<1>;
    btequalimage(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    btequalimage(this: export_default$I<number>): export_default$1g<0 | 1>;
    btoidcmp(this: export_default$I<1>, a1: export_default$I<1>): export_default$10<1>;
    btoidcmp(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$10<0 | 1>;
    btoidcmp(this: export_default$I<number>, a1: export_default$I<number>): export_default$10<0 | 1>;
    btvarstrequalimage(this: export_default$I<1>): export_default$1g<1>;
    btvarstrequalimage(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    btvarstrequalimage(this: export_default$I<number>): export_default$1g<0 | 1>;
    colDescription(this: export_default$I<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    colDescription(this: export_default$I<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    colDescription(this: export_default$I<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    fmgrCValidator(this: export_default$I<1>): export_default$4<1>;
    fmgrCValidator(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    fmgrCValidator(this: export_default$I<number>): export_default$4<0 | 1>;
    fmgrInternalValidator(this: export_default$I<1>): export_default$4<1>;
    fmgrInternalValidator(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    fmgrInternalValidator(this: export_default$I<number>): export_default$4<0 | 1>;
    fmgrSqlValidator(this: export_default$I<1>): export_default$4<1>;
    fmgrSqlValidator(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    fmgrSqlValidator(this: export_default$I<number>): export_default$4<0 | 1>;
    formatType(this: export_default$I<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    formatType(this: export_default$I<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    formatType(this: export_default$I<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasAnyColumnPrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasAnyColumnPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasAnyColumnPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$I<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$12<1> | Input<export_default$12<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$12<number> | Input<export_default$12<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$12<1> | Input<export_default$12<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$12<number> | Input<export_default$12<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasDatabasePrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasDatabasePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasDatabasePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasForeignDataWrapperPrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasForeignDataWrapperPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasForeignDataWrapperPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasFunctionPrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasFunctionPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasFunctionPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasLanguagePrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasLanguagePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasLanguagePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasParameterPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasParameterPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasParameterPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSchemaPrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSchemaPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSchemaPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSequencePrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSequencePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSequencePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasServerPrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasServerPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasServerPrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablePrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablespacePrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablespacePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablespacePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTypePrivilege(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTypePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTypePrivilege(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hashoid(this: export_default$I<1>): export_default$10<1>;
    hashoid(this: export_default$I<0 | 1>): export_default$10<0 | 1>;
    hashoid(this: export_default$I<number>): export_default$10<0 | 1>;
    hashoidextended(this: export_default$I<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashoidextended(this: export_default$I<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashoidextended(this: export_default$I<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    int8(this: export_default$I<1>): export_default$Z<1>;
    int8(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    int8(this: export_default$I<number>): export_default$Z<0 | 1>;
    loCreate(this: export_default$I<1>): export_default$I<1>;
    loCreate(this: export_default$I<0 | 1>): export_default$I<0 | 1>;
    loCreate(this: export_default$I<number>): export_default$I<0 | 1>;
    loExport(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    loExport(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    loExport(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    loFromBytea(this: export_default$I<1>, a1: export_default$1d<1>): export_default$I<1>;
    loFromBytea(this: export_default$I<0 | 1>, a1: export_default$1d<0 | 1>): export_default$I<0 | 1>;
    loFromBytea(this: export_default$I<number>, a1: export_default$1d<number>): export_default$I<0 | 1>;
    loGet(this: export_default$I<1>): export_default$1d<1>;
    loGet(this: export_default$I<0 | 1>): export_default$1d<0 | 1>;
    loGet(this: export_default$I<number>): export_default$1d<0 | 1>;
    loGet(this: export_default$I<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1d<1>;
    loGet(this: export_default$I<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    loGet(this: export_default$I<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1d<0 | 1>;
    loOpen(this: export_default$I<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    loOpen(this: export_default$I<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    loOpen(this: export_default$I<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    loPut(this: export_default$I<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$1d<1>): export_default$4<1>;
    loPut(this: export_default$I<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$1d<0 | 1>): export_default$4<0 | 1>;
    loPut(this: export_default$I<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$1d<number>): export_default$4<0 | 1>;
    loUnlink(this: export_default$I<1>): export_default$10<1>;
    loUnlink(this: export_default$I<0 | 1>): export_default$10<0 | 1>;
    loUnlink(this: export_default$I<number>): export_default$10<0 | 1>;
    makeaclitem(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1m<1>;
    makeaclitem(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1m<0 | 1>;
    makeaclitem(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1m<0 | 1>;
    max(this: export_default$I<number>): export_default$I<0 | 1>;
    objDescription(this: export_default$I<1>): export_default$l<1>;
    objDescription(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    objDescription(this: export_default$I<number>): export_default$l<0 | 1>;
    objDescription(this: export_default$I<1>, a1: export_default$M<1>): export_default$l<1>;
    objDescription(this: export_default$I<0 | 1>, a1: export_default$M<0 | 1>): export_default$l<0 | 1>;
    objDescription(this: export_default$I<number>, a1: export_default$M<number>): export_default$l<0 | 1>;
    oideq(this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    oideq(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    oideq(this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    oidge(this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    oidge(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    oidge(this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    oidgt(this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    oidgt(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    oidgt(this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    oidlarger(this: export_default$I<1>, a1: export_default$I<1>): export_default$I<1>;
    oidlarger(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$I<0 | 1>;
    oidlarger(this: export_default$I<number>, a1: export_default$I<number>): export_default$I<0 | 1>;
    oidle(this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    oidle(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    oidle(this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    oidlt(this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    oidlt(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    oidlt(this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    oidne(this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    oidne(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    oidne(this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    oidsmaller(this: export_default$I<1>, a1: export_default$I<1>): export_default$I<1>;
    oidsmaller(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$I<0 | 1>;
    oidsmaller(this: export_default$I<number>, a1: export_default$I<number>): export_default$I<0 | 1>;
    pgCollationActualVersion(this: export_default$I<1>): export_default$l<1>;
    pgCollationActualVersion(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgCollationActualVersion(this: export_default$I<number>): export_default$l<0 | 1>;
    pgCollationIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgCollationIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgCollationIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgConversionIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgConversionIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgConversionIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgDatabaseCollationActualVersion(this: export_default$I<1>): export_default$l<1>;
    pgDatabaseCollationActualVersion(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgDatabaseCollationActualVersion(this: export_default$I<number>): export_default$l<0 | 1>;
    pgDatabaseSize(this: export_default$I<1>): export_default$Z<1>;
    pgDatabaseSize(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgDatabaseSize(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgDescribeObject(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    pgDescribeObject(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    pgDescribeObject(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    pgFilenodeRelation(this: export_default$I<1>, a1: export_default$I<1>): export_default$w<1>;
    pgFilenodeRelation(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$w<0 | 1>;
    pgFilenodeRelation(this: export_default$I<number>, a1: export_default$I<number>): export_default$w<0 | 1>;
    pgFunctionIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgFunctionIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgFunctionIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgGetConstraintdef(this: export_default$I<1>): export_default$l<1>;
    pgGetConstraintdef(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetConstraintdef(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetConstraintdef(this: export_default$I<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    pgGetConstraintdef(this: export_default$I<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetConstraintdef(this: export_default$I<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetFunctionArgDefault(this: export_default$I<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    pgGetFunctionArgDefault(this: export_default$I<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    pgGetFunctionArgDefault(this: export_default$I<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    pgGetFunctionArguments(this: export_default$I<1>): export_default$l<1>;
    pgGetFunctionArguments(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetFunctionArguments(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetFunctionIdentityArguments(this: export_default$I<1>): export_default$l<1>;
    pgGetFunctionIdentityArguments(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetFunctionIdentityArguments(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetFunctionResult(this: export_default$I<1>): export_default$l<1>;
    pgGetFunctionResult(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetFunctionResult(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetFunctionSqlbody(this: export_default$I<1>): export_default$l<1>;
    pgGetFunctionSqlbody(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetFunctionSqlbody(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetFunctiondef(this: export_default$I<1>): export_default$l<1>;
    pgGetFunctiondef(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetFunctiondef(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetIndexdef(this: export_default$I<1>): export_default$l<1>;
    pgGetIndexdef(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetIndexdef(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetIndexdef(this: export_default$I<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    pgGetIndexdef(this: export_default$I<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetIndexdef(this: export_default$I<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetPartitionConstraintdef(this: export_default$I<1>): export_default$l<1>;
    pgGetPartitionConstraintdef(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetPartitionConstraintdef(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetPartkeydef(this: export_default$I<1>): export_default$l<1>;
    pgGetPartkeydef(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetPartkeydef(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetRuledef(this: export_default$I<1>): export_default$l<1>;
    pgGetRuledef(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetRuledef(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetRuledef(this: export_default$I<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    pgGetRuledef(this: export_default$I<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetRuledef(this: export_default$I<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetStatisticsobjdef(this: export_default$I<1>): export_default$l<1>;
    pgGetStatisticsobjdef(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetStatisticsobjdef(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetStatisticsobjdefColumns(this: export_default$I<1>): export_default$l<1>;
    pgGetStatisticsobjdefColumns(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetStatisticsobjdefColumns(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetStatisticsobjdefExpressions(this: export_default$I<1>): Array$1<1, export_default$l<0 | 1>>;
    pgGetStatisticsobjdefExpressions(this: export_default$I<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
    pgGetStatisticsobjdefExpressions(this: export_default$I<number>): Array$1<0 | 1, export_default$l<0 | 1>>;
    pgGetTriggerdef(this: export_default$I<1>): export_default$l<1>;
    pgGetTriggerdef(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetTriggerdef(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetTriggerdef(this: export_default$I<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    pgGetTriggerdef(this: export_default$I<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetTriggerdef(this: export_default$I<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetUserbyid(this: export_default$I<1>): export_default$M<1>;
    pgGetUserbyid(this: export_default$I<0 | 1>): export_default$M<0 | 1>;
    pgGetUserbyid(this: export_default$I<number>): export_default$M<0 | 1>;
    pgGetViewdef(this: export_default$I<1>): export_default$l<1>;
    pgGetViewdef(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetViewdef(this: export_default$I<number>): export_default$l<0 | 1>;
    pgGetViewdef(this: export_default$I<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    pgGetViewdef(this: export_default$I<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetViewdef(this: export_default$I<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetViewdef(this: export_default$I<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    pgGetViewdef(this: export_default$I<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    pgGetViewdef(this: export_default$I<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    pgHasRole(this: export_default$I<1>, a1: export_default$M<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgHasRole(this: export_default$I<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$I<number>, a1: export_default$M<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgHasRole(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgHasRole(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgHasRole(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgIdentifyObject(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): Record$1<1, {
        type: export_default$l<1>;
        schema: export_default$l<1>;
        name: export_default$l<1>;
        identity: export_default$l<1>;
    }>;
    pgIdentifyObject(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): Record$1<0 | 1, {
        type: export_default$l<0 | 1>;
        schema: export_default$l<0 | 1>;
        name: export_default$l<0 | 1>;
        identity: export_default$l<0 | 1>;
    }>;
    pgIdentifyObject(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): Record$1<0 | 1, {
        type: export_default$l<0 | 1>;
        schema: export_default$l<0 | 1>;
        name: export_default$l<0 | 1>;
        identity: export_default$l<0 | 1>;
    }>;
    pgIdentifyObjectAsAddress(this: export_default$I<1>, a1: export_default$I<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): Record$1<1, {
        type: export_default$l<1>;
        object_names: Array$1<1, export_default$l<0 | 1>>;
        object_args: Array$1<1, export_default$l<0 | 1>>;
    }>;
    pgIdentifyObjectAsAddress(this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): Record$1<0 | 1, {
        type: export_default$l<0 | 1>;
        object_names: Array$1<0 | 1, export_default$l<0 | 1>>;
        object_args: Array$1<0 | 1, export_default$l<0 | 1>>;
    }>;
    pgIdentifyObjectAsAddress(this: export_default$I<number>, a1: export_default$I<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): Record$1<0 | 1, {
        type: export_default$l<0 | 1>;
        object_names: Array$1<0 | 1, export_default$l<0 | 1>>;
        object_args: Array$1<0 | 1, export_default$l<0 | 1>>;
    }>;
    pgIndexamHasProperty(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgIndexamHasProperty(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgIndexamHasProperty(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgIndexamProgressPhasename(this: export_default$I<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$l<1>;
    pgIndexamProgressPhasename(this: export_default$I<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$l<0 | 1>;
    pgIndexamProgressPhasename(this: export_default$I<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$l<0 | 1>;
    pgIsOtherTempSchema(this: export_default$I<1>): export_default$1g<1>;
    pgIsOtherTempSchema(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgIsOtherTempSchema(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgLsTmpdir(this: export_default$I<1>): Setof<{
        from: {
            name: export_default$l<1>;
            size: export_default$Z<1>;
            modification: export_default$h<1>;
        };
    }>;
    pgLsTmpdir(this: export_default$I<0 | 1>): Setof<{
        from: {
            name: export_default$l<0 | 1>;
            size: export_default$Z<0 | 1>;
            modification: export_default$h<0 | 1>;
        };
    }>;
    pgLsTmpdir(this: export_default$I<number>): Setof<{
        from: {
            name: export_default$l<0 | 1>;
            size: export_default$Z<0 | 1>;
            modification: export_default$h<0 | 1>;
        };
    }>;
    pgOpclassIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgOpclassIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgOpclassIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgOperatorIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgOperatorIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgOperatorIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgOpfamilyIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgOpfamilyIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgOpfamilyIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgSequenceParameters(this: export_default$I<1>): Record$1<1, {
        start_value: export_default$Z<1>;
        minimum_value: export_default$Z<1>;
        maximum_value: export_default$Z<1>;
        increment: export_default$Z<1>;
        cycle_option: export_default$1g<1>;
        cache_size: export_default$Z<1>;
        data_type: export_default$I<1>;
    }>;
    pgSequenceParameters(this: export_default$I<0 | 1>): Record$1<0 | 1, {
        start_value: export_default$Z<0 | 1>;
        minimum_value: export_default$Z<0 | 1>;
        maximum_value: export_default$Z<0 | 1>;
        increment: export_default$Z<0 | 1>;
        cycle_option: export_default$1g<0 | 1>;
        cache_size: export_default$Z<0 | 1>;
        data_type: export_default$I<0 | 1>;
    }>;
    pgSequenceParameters(this: export_default$I<number>): Record$1<0 | 1, {
        start_value: export_default$Z<0 | 1>;
        minimum_value: export_default$Z<0 | 1>;
        maximum_value: export_default$Z<0 | 1>;
        increment: export_default$Z<0 | 1>;
        cycle_option: export_default$1g<0 | 1>;
        cache_size: export_default$Z<0 | 1>;
        data_type: export_default$I<0 | 1>;
    }>;
    pgStatGetAnalyzeCount(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetAnalyzeCount(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetAnalyzeCount(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetAutoanalyzeCount(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetAutoanalyzeCount(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetAutoanalyzeCount(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetAutovacuumCount(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetAutovacuumCount(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetAutovacuumCount(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetBlocksFetched(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetBlocksFetched(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetBlocksFetched(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetBlocksHit(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetBlocksHit(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetBlocksHit(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbActiveTime(this: export_default$I<1>): export_default$14<1>;
    pgStatGetDbActiveTime(this: export_default$I<0 | 1>): export_default$14<0 | 1>;
    pgStatGetDbActiveTime(this: export_default$I<number>): export_default$14<0 | 1>;
    pgStatGetDbBlkReadTime(this: export_default$I<1>): export_default$14<1>;
    pgStatGetDbBlkReadTime(this: export_default$I<0 | 1>): export_default$14<0 | 1>;
    pgStatGetDbBlkReadTime(this: export_default$I<number>): export_default$14<0 | 1>;
    pgStatGetDbBlkWriteTime(this: export_default$I<1>): export_default$14<1>;
    pgStatGetDbBlkWriteTime(this: export_default$I<0 | 1>): export_default$14<0 | 1>;
    pgStatGetDbBlkWriteTime(this: export_default$I<number>): export_default$14<0 | 1>;
    pgStatGetDbBlocksFetched(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbBlocksFetched(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbBlocksFetched(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbBlocksHit(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbBlocksHit(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbBlocksHit(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbChecksumFailures(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbChecksumFailures(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbChecksumFailures(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbChecksumLastFailure(this: export_default$I<1>): export_default$h<1>;
    pgStatGetDbChecksumLastFailure(this: export_default$I<0 | 1>): export_default$h<0 | 1>;
    pgStatGetDbChecksumLastFailure(this: export_default$I<number>): export_default$h<0 | 1>;
    pgStatGetDbConflictAll(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbConflictAll(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbConflictAll(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbConflictLock(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbConflictLock(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbConflictLock(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbConflictLogicalslot(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbConflictLogicalslot(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbConflictLogicalslot(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbConflictSnapshot(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbConflictSnapshot(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbConflictSnapshot(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbConflictStartupDeadlock(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbConflictStartupDeadlock(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbConflictStartupDeadlock(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbConflictTablespace(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbConflictTablespace(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbConflictTablespace(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbDeadlocks(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbDeadlocks(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbDeadlocks(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbIdleInTransactionTime(this: export_default$I<1>): export_default$14<1>;
    pgStatGetDbIdleInTransactionTime(this: export_default$I<0 | 1>): export_default$14<0 | 1>;
    pgStatGetDbIdleInTransactionTime(this: export_default$I<number>): export_default$14<0 | 1>;
    pgStatGetDbNumbackends(this: export_default$I<1>): export_default$10<1>;
    pgStatGetDbNumbackends(this: export_default$I<0 | 1>): export_default$10<0 | 1>;
    pgStatGetDbNumbackends(this: export_default$I<number>): export_default$10<0 | 1>;
    pgStatGetDbSessionTime(this: export_default$I<1>): export_default$14<1>;
    pgStatGetDbSessionTime(this: export_default$I<0 | 1>): export_default$14<0 | 1>;
    pgStatGetDbSessionTime(this: export_default$I<number>): export_default$14<0 | 1>;
    pgStatGetDbSessions(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbSessions(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbSessions(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbSessionsAbandoned(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbSessionsAbandoned(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbSessionsAbandoned(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbSessionsFatal(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbSessionsFatal(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbSessionsFatal(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbSessionsKilled(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbSessionsKilled(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbSessionsKilled(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbStatResetTime(this: export_default$I<1>): export_default$h<1>;
    pgStatGetDbStatResetTime(this: export_default$I<0 | 1>): export_default$h<0 | 1>;
    pgStatGetDbStatResetTime(this: export_default$I<number>): export_default$h<0 | 1>;
    pgStatGetDbTempBytes(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbTempBytes(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbTempBytes(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbTempFiles(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbTempFiles(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbTempFiles(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesDeleted(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbTuplesDeleted(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesDeleted(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesFetched(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbTuplesFetched(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesFetched(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesInserted(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbTuplesInserted(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesInserted(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesReturned(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbTuplesReturned(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesReturned(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesUpdated(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbTuplesUpdated(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbTuplesUpdated(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbXactCommit(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbXactCommit(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbXactCommit(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDbXactRollback(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDbXactRollback(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDbXactRollback(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetDeadTuples(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetDeadTuples(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetDeadTuples(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetFunctionCalls(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetFunctionCalls(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetFunctionCalls(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetFunctionSelfTime(this: export_default$I<1>): export_default$14<1>;
    pgStatGetFunctionSelfTime(this: export_default$I<0 | 1>): export_default$14<0 | 1>;
    pgStatGetFunctionSelfTime(this: export_default$I<number>): export_default$14<0 | 1>;
    pgStatGetFunctionTotalTime(this: export_default$I<1>): export_default$14<1>;
    pgStatGetFunctionTotalTime(this: export_default$I<0 | 1>): export_default$14<0 | 1>;
    pgStatGetFunctionTotalTime(this: export_default$I<number>): export_default$14<0 | 1>;
    pgStatGetInsSinceVacuum(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetInsSinceVacuum(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetInsSinceVacuum(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetLastAnalyzeTime(this: export_default$I<1>): export_default$h<1>;
    pgStatGetLastAnalyzeTime(this: export_default$I<0 | 1>): export_default$h<0 | 1>;
    pgStatGetLastAnalyzeTime(this: export_default$I<number>): export_default$h<0 | 1>;
    pgStatGetLastAutoanalyzeTime(this: export_default$I<1>): export_default$h<1>;
    pgStatGetLastAutoanalyzeTime(this: export_default$I<0 | 1>): export_default$h<0 | 1>;
    pgStatGetLastAutoanalyzeTime(this: export_default$I<number>): export_default$h<0 | 1>;
    pgStatGetLastAutovacuumTime(this: export_default$I<1>): export_default$h<1>;
    pgStatGetLastAutovacuumTime(this: export_default$I<0 | 1>): export_default$h<0 | 1>;
    pgStatGetLastAutovacuumTime(this: export_default$I<number>): export_default$h<0 | 1>;
    pgStatGetLastVacuumTime(this: export_default$I<1>): export_default$h<1>;
    pgStatGetLastVacuumTime(this: export_default$I<0 | 1>): export_default$h<0 | 1>;
    pgStatGetLastVacuumTime(this: export_default$I<number>): export_default$h<0 | 1>;
    pgStatGetLastscan(this: export_default$I<1>): export_default$h<1>;
    pgStatGetLastscan(this: export_default$I<0 | 1>): export_default$h<0 | 1>;
    pgStatGetLastscan(this: export_default$I<number>): export_default$h<0 | 1>;
    pgStatGetLiveTuples(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetLiveTuples(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetLiveTuples(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetModSinceAnalyze(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetModSinceAnalyze(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetModSinceAnalyze(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetNumscans(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetNumscans(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetNumscans(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetSubscription(this: export_default$I<1>): Setof<{
        from: {
            subid: export_default$I<1>;
            relid: export_default$I<1>;
            pid: export_default$10<1>;
            leader_pid: export_default$10<1>;
            received_lsn: export_default$E<1>;
            last_msg_send_time: export_default$h<1>;
            last_msg_receipt_time: export_default$h<1>;
            latest_end_lsn: export_default$E<1>;
            latest_end_time: export_default$h<1>;
            worker_type: export_default$l<1>;
        };
    }>;
    pgStatGetSubscription(this: export_default$I<0 | 1>): Setof<{
        from: {
            subid: export_default$I<0 | 1>;
            relid: export_default$I<0 | 1>;
            pid: export_default$10<0 | 1>;
            leader_pid: export_default$10<0 | 1>;
            received_lsn: export_default$E<0 | 1>;
            last_msg_send_time: export_default$h<0 | 1>;
            last_msg_receipt_time: export_default$h<0 | 1>;
            latest_end_lsn: export_default$E<0 | 1>;
            latest_end_time: export_default$h<0 | 1>;
            worker_type: export_default$l<0 | 1>;
        };
    }>;
    pgStatGetSubscription(this: export_default$I<number>): Setof<{
        from: {
            subid: export_default$I<0 | 1>;
            relid: export_default$I<0 | 1>;
            pid: export_default$10<0 | 1>;
            leader_pid: export_default$10<0 | 1>;
            received_lsn: export_default$E<0 | 1>;
            last_msg_send_time: export_default$h<0 | 1>;
            last_msg_receipt_time: export_default$h<0 | 1>;
            latest_end_lsn: export_default$E<0 | 1>;
            latest_end_time: export_default$h<0 | 1>;
            worker_type: export_default$l<0 | 1>;
        };
    }>;
    pgStatGetSubscriptionStats(this: export_default$I<1>): Record$1<1, {
        subid: export_default$I<1>;
        apply_error_count: export_default$Z<1>;
        sync_error_count: export_default$Z<1>;
        stats_reset: export_default$h<1>;
    }>;
    pgStatGetSubscriptionStats(this: export_default$I<0 | 1>): Record$1<0 | 1, {
        subid: export_default$I<0 | 1>;
        apply_error_count: export_default$Z<0 | 1>;
        sync_error_count: export_default$Z<0 | 1>;
        stats_reset: export_default$h<0 | 1>;
    }>;
    pgStatGetSubscriptionStats(this: export_default$I<number>): Record$1<0 | 1, {
        subid: export_default$I<0 | 1>;
        apply_error_count: export_default$Z<0 | 1>;
        sync_error_count: export_default$Z<0 | 1>;
        stats_reset: export_default$h<0 | 1>;
    }>;
    pgStatGetTuplesDeleted(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetTuplesDeleted(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetTuplesDeleted(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetTuplesFetched(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetTuplesFetched(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetTuplesFetched(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetTuplesHotUpdated(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetTuplesHotUpdated(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetTuplesHotUpdated(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetTuplesInserted(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetTuplesInserted(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetTuplesInserted(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetTuplesNewpageUpdated(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetTuplesNewpageUpdated(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetTuplesNewpageUpdated(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetTuplesReturned(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetTuplesReturned(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetTuplesReturned(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetTuplesUpdated(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetTuplesUpdated(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetTuplesUpdated(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetVacuumCount(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetVacuumCount(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetVacuumCount(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactBlocksFetched(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactBlocksFetched(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactBlocksFetched(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactBlocksHit(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactBlocksHit(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactBlocksHit(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactFunctionCalls(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactFunctionCalls(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactFunctionCalls(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactFunctionSelfTime(this: export_default$I<1>): export_default$14<1>;
    pgStatGetXactFunctionSelfTime(this: export_default$I<0 | 1>): export_default$14<0 | 1>;
    pgStatGetXactFunctionSelfTime(this: export_default$I<number>): export_default$14<0 | 1>;
    pgStatGetXactFunctionTotalTime(this: export_default$I<1>): export_default$14<1>;
    pgStatGetXactFunctionTotalTime(this: export_default$I<0 | 1>): export_default$14<0 | 1>;
    pgStatGetXactFunctionTotalTime(this: export_default$I<number>): export_default$14<0 | 1>;
    pgStatGetXactNumscans(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactNumscans(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactNumscans(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesDeleted(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactTuplesDeleted(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesDeleted(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesFetched(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactTuplesFetched(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesFetched(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesHotUpdated(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactTuplesHotUpdated(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesHotUpdated(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesInserted(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactTuplesInserted(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesInserted(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesNewpageUpdated(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactTuplesNewpageUpdated(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesNewpageUpdated(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesReturned(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactTuplesReturned(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesReturned(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesUpdated(this: export_default$I<1>): export_default$Z<1>;
    pgStatGetXactTuplesUpdated(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgStatGetXactTuplesUpdated(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgStatResetSingleFunctionCounters(this: export_default$I<1>): export_default$4<1>;
    pgStatResetSingleFunctionCounters(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    pgStatResetSingleFunctionCounters(this: export_default$I<number>): export_default$4<0 | 1>;
    pgStatResetSingleTableCounters(this: export_default$I<1>): export_default$4<1>;
    pgStatResetSingleTableCounters(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    pgStatResetSingleTableCounters(this: export_default$I<number>): export_default$4<0 | 1>;
    pgStatResetSubscriptionStats(this: export_default$I<1>): export_default$4<1>;
    pgStatResetSubscriptionStats(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    pgStatResetSubscriptionStats(this: export_default$I<number>): export_default$4<0 | 1>;
    pgStatisticsObjIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgStatisticsObjIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgStatisticsObjIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgTableIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgTableIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgTableIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgTablespaceDatabases(this: export_default$I<1>): Setof<{
        from: {};
    }>;
    pgTablespaceDatabases(this: export_default$I<0 | 1>): Setof<{
        from: {};
    }>;
    pgTablespaceDatabases(this: export_default$I<number>): Setof<{
        from: {};
    }>;
    pgTablespaceLocation(this: export_default$I<1>): export_default$l<1>;
    pgTablespaceLocation(this: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgTablespaceLocation(this: export_default$I<number>): export_default$l<0 | 1>;
    pgTablespaceSize(this: export_default$I<1>): export_default$Z<1>;
    pgTablespaceSize(this: export_default$I<0 | 1>): export_default$Z<0 | 1>;
    pgTablespaceSize(this: export_default$I<number>): export_default$Z<0 | 1>;
    pgTsConfigIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgTsConfigIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgTsConfigIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgTsDictIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgTsDictIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgTsDictIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgTsParserIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgTsParserIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgTsParserIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgTsTemplateIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgTsTemplateIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgTsTemplateIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    pgTypeIsVisible(this: export_default$I<1>): export_default$1g<1>;
    pgTypeIsVisible(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgTypeIsVisible(this: export_default$I<number>): export_default$1g<0 | 1>;
    plpgsqlValidator(this: export_default$I<1>): export_default$4<1>;
    plpgsqlValidator(this: export_default$I<0 | 1>): export_default$4<0 | 1>;
    plpgsqlValidator(this: export_default$I<number>): export_default$4<0 | 1>;
    rowSecurityActive(this: export_default$I<1>): export_default$1g<1>;
    rowSecurityActive(this: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    rowSecurityActive(this: export_default$I<number>): export_default$1g<0 | 1>;
    satisfiesHashPartition(this: export_default$I<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: Any<1>): export_default$1g<1>;
    satisfiesHashPartition(this: export_default$I<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: Any<0 | 1>): export_default$1g<0 | 1>;
    satisfiesHashPartition(this: export_default$I<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: Any<number>): export_default$1g<0 | 1>;
    shobjDescription(this: export_default$I<1>, a1: export_default$M<1>): export_default$l<1>;
    shobjDescription(this: export_default$I<0 | 1>, a1: export_default$M<0 | 1>): export_default$l<0 | 1>;
    shobjDescription(this: export_default$I<number>, a1: export_default$M<number>): export_default$l<0 | 1>;
    tsParse(this: export_default$I<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            tokid: export_default$10<1>;
            token: export_default$l<1>;
        };
    }>;
    tsParse(this: export_default$I<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            tokid: export_default$10<0 | 1>;
            token: export_default$l<0 | 1>;
        };
    }>;
    tsParse(this: export_default$I<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            tokid: export_default$10<0 | 1>;
            token: export_default$l<0 | 1>;
        };
    }>;
    tsTokenType(this: export_default$I<1>): Setof<{
        from: {
            tokid: export_default$10<1>;
            alias: export_default$l<1>;
            description: export_default$l<1>;
        };
    }>;
    tsTokenType(this: export_default$I<0 | 1>): Setof<{
        from: {
            tokid: export_default$10<0 | 1>;
            alias: export_default$l<0 | 1>;
            description: export_default$l<0 | 1>;
        };
    }>;
    tsTokenType(this: export_default$I<number>): Setof<{
        from: {
            tokid: export_default$10<0 | 1>;
            alias: export_default$l<0 | 1>;
            description: export_default$l<0 | 1>;
        };
    }>;
    ["="](this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    ["="](this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    [">="](this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    [">"](this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    ["<="](this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    ["<"](this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$I<1>, a1: export_default$I<1>): export_default$1g<1>;
    ["<>"](this: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$I<number>, a1: export_default$I<number>): export_default$1g<0 | 1>;
}

type Parsed$F = string;
type SerializeParam$F = string;
declare class export_default$H<N extends number> extends Any<Parsed$F, N> {
    static new(v: SerializeParam$F): export_default$H<1>;
    static new(v: null): export_default$H<0>;
    static new(v: Expression): export_default$H<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$H<number> | undefined;
    btoidvectorcmp(this: export_default$H<1>, a1: export_default$H<1>): export_default$10<1>;
    btoidvectorcmp(this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$10<0 | 1>;
    btoidvectorcmp(this: export_default$H<number>, a1: export_default$H<number>): export_default$10<0 | 1>;
    hashoidvector(this: export_default$H<1>): export_default$10<1>;
    hashoidvector(this: export_default$H<0 | 1>): export_default$10<0 | 1>;
    hashoidvector(this: export_default$H<number>): export_default$10<0 | 1>;
    hashoidvectorextended(this: export_default$H<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashoidvectorextended(this: export_default$H<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashoidvectorextended(this: export_default$H<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    oidvectoreq(this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    oidvectoreq(this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    oidvectoreq(this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    oidvectorge(this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    oidvectorge(this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    oidvectorge(this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    oidvectorgt(this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    oidvectorgt(this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    oidvectorgt(this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    oidvectorle(this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    oidvectorle(this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    oidvectorle(this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    oidvectorlt(this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    oidvectorlt(this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    oidvectorlt(this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    oidvectorne(this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    oidvectorne(this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    oidvectorne(this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    oidvectortypes(this: export_default$H<1>): export_default$l<1>;
    oidvectortypes(this: export_default$H<0 | 1>): export_default$l<0 | 1>;
    oidvectortypes(this: export_default$H<number>): export_default$l<0 | 1>;
    ["="](this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    ["="](this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    [">="](this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    [">"](this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    ["<="](this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    ["<"](this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$H<1>, a1: export_default$H<1>): export_default$1g<1>;
    ["<>"](this: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$H<number>, a1: export_default$H<number>): export_default$1g<0 | 1>;
}

type Parsed$E = string;
type SerializeParam$E = string;
declare class export_default$G<N extends number> extends Any<Parsed$E, N> {
    static new(v: SerializeParam$E): export_default$G<1>;
    static new(v: null): export_default$G<0>;
    static new(v: Expression): export_default$G<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$G<number> | undefined;
    area(this: export_default$G<1>): export_default$14<1>;
    area(this: export_default$G<0 | 1>): export_default$14<0 | 1>;
    area(this: export_default$G<number>): export_default$14<0 | 1>;
    distPathp(this: export_default$G<1>, a1: export_default$A<1>): export_default$14<1>;
    distPathp(this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    distPathp(this: export_default$G<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    isclosed(this: export_default$G<1>): export_default$1g<1>;
    isclosed(this: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    isclosed(this: export_default$G<number>): export_default$1g<0 | 1>;
    isopen(this: export_default$G<1>): export_default$1g<1>;
    isopen(this: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    isopen(this: export_default$G<number>): export_default$1g<0 | 1>;
    length(this: export_default$G<1>): export_default$14<1>;
    length(this: export_default$G<0 | 1>): export_default$14<0 | 1>;
    length(this: export_default$G<number>): export_default$14<0 | 1>;
    npoints(this: export_default$G<1>): export_default$10<1>;
    npoints(this: export_default$G<0 | 1>): export_default$10<0 | 1>;
    npoints(this: export_default$G<number>): export_default$10<0 | 1>;
    pathAdd(this: export_default$G<1>, a1: export_default$G<1>): export_default$G<1>;
    pathAdd(this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$G<0 | 1>;
    pathAdd(this: export_default$G<number>, a1: export_default$G<number>): export_default$G<0 | 1>;
    pathAddPt(this: export_default$G<1>, a1: export_default$A<1>): export_default$G<1>;
    pathAddPt(this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
    pathAddPt(this: export_default$G<number>, a1: export_default$A<number>): export_default$G<0 | 1>;
    pathContainPt(this: export_default$G<1>, a1: export_default$A<1>): export_default$1g<1>;
    pathContainPt(this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pathContainPt(this: export_default$G<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pathDistance(this: export_default$G<1>, a1: export_default$G<1>): export_default$14<1>;
    pathDistance(this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$14<0 | 1>;
    pathDistance(this: export_default$G<number>, a1: export_default$G<number>): export_default$14<0 | 1>;
    pathDivPt(this: export_default$G<1>, a1: export_default$A<1>): export_default$G<1>;
    pathDivPt(this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
    pathDivPt(this: export_default$G<number>, a1: export_default$A<number>): export_default$G<0 | 1>;
    pathInter(this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    pathInter(this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    pathInter(this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    pathLength(this: export_default$G<1>): export_default$14<1>;
    pathLength(this: export_default$G<0 | 1>): export_default$14<0 | 1>;
    pathLength(this: export_default$G<number>): export_default$14<0 | 1>;
    pathMulPt(this: export_default$G<1>, a1: export_default$A<1>): export_default$G<1>;
    pathMulPt(this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
    pathMulPt(this: export_default$G<number>, a1: export_default$A<number>): export_default$G<0 | 1>;
    pathNEq(this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    pathNEq(this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    pathNEq(this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    pathNGe(this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    pathNGe(this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    pathNGe(this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    pathNGt(this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    pathNGt(this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    pathNGt(this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    pathNLe(this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    pathNLe(this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    pathNLe(this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    pathNLt(this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    pathNLt(this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    pathNLt(this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    pathNpoints(this: export_default$G<1>): export_default$10<1>;
    pathNpoints(this: export_default$G<0 | 1>): export_default$10<0 | 1>;
    pathNpoints(this: export_default$G<number>): export_default$10<0 | 1>;
    pathSubPt(this: export_default$G<1>, a1: export_default$A<1>): export_default$G<1>;
    pathSubPt(this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
    pathSubPt(this: export_default$G<number>, a1: export_default$A<number>): export_default$G<0 | 1>;
    pclose(this: export_default$G<1>): export_default$G<1>;
    pclose(this: export_default$G<0 | 1>): export_default$G<0 | 1>;
    pclose(this: export_default$G<number>): export_default$G<0 | 1>;
    polygon(this: export_default$G<1>): export_default$z<1>;
    polygon(this: export_default$G<0 | 1>): export_default$z<0 | 1>;
    polygon(this: export_default$G<number>): export_default$z<0 | 1>;
    popen(this: export_default$G<1>): export_default$G<1>;
    popen(this: export_default$G<0 | 1>): export_default$G<0 | 1>;
    popen(this: export_default$G<number>): export_default$G<0 | 1>;
    ["<->"](this: export_default$G<1>, a1: export_default$A<1>): export_default$14<1>;
    ["<->"](this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$G<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$G<1>, a1: export_default$G<1>): export_default$14<1>;
    ["<->"](this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$G<number>, a1: export_default$G<number>): export_default$14<0 | 1>;
    ["+"](this: export_default$G<1>, a1: export_default$G<1>): export_default$G<1>;
    ["+"](this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$G<0 | 1>;
    ["+"](this: export_default$G<number>, a1: export_default$G<number>): export_default$G<0 | 1>;
    ["+"](this: export_default$G<1>, a1: export_default$A<1>): export_default$G<1>;
    ["+"](this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
    ["+"](this: export_default$G<number>, a1: export_default$A<number>): export_default$G<0 | 1>;
    ["@>"](this: export_default$G<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["@>"](this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$G<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["/"](this: export_default$G<1>, a1: export_default$A<1>): export_default$G<1>;
    ["/"](this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
    ["/"](this: export_default$G<number>, a1: export_default$A<number>): export_default$G<0 | 1>;
    ["?#"](this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    ["?#"](this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    ["?#"](this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    ["*"](this: export_default$G<1>, a1: export_default$A<1>): export_default$G<1>;
    ["*"](this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
    ["*"](this: export_default$G<number>, a1: export_default$A<number>): export_default$G<0 | 1>;
    ["="](this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    ["="](this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    [">="](this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    [">"](this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    ["<="](this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$G<1>, a1: export_default$G<1>): export_default$1g<1>;
    ["<"](this: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$G<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$G<1>, a1: export_default$A<1>): export_default$G<1>;
    ["-"](this: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
    ["-"](this: export_default$G<number>, a1: export_default$A<number>): export_default$G<0 | 1>;
}

type Parsed$D = string;
type SerializeParam$D = string;
declare class export_default$F<N extends number> extends Any<Parsed$D, N> {
    static new(v: SerializeParam$D): export_default$F<1>;
    static new(v: null): export_default$F<0>;
    static new(v: Expression): export_default$F<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$F<number> | undefined;
}

type Parsed$C = string;
type SerializeParam$C = string;
declare class export_default$E<N extends number> extends Any<Parsed$C, N> {
    static new(v: SerializeParam$C): export_default$E<1>;
    static new(v: null): export_default$E<0>;
    static new(v: Expression): export_default$E<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$E<number> | undefined;
    max(this: export_default$E<number>): export_default$E<0 | 1>;
    pgLsnCmp(this: export_default$E<1>, a1: export_default$E<1>): export_default$10<1>;
    pgLsnCmp(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$10<0 | 1>;
    pgLsnCmp(this: export_default$E<number>, a1: export_default$E<number>): export_default$10<0 | 1>;
    pgLsnEq(this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    pgLsnEq(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    pgLsnEq(this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    pgLsnGe(this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    pgLsnGe(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    pgLsnGe(this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    pgLsnGt(this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    pgLsnGt(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    pgLsnGt(this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    pgLsnHash(this: export_default$E<1>): export_default$10<1>;
    pgLsnHash(this: export_default$E<0 | 1>): export_default$10<0 | 1>;
    pgLsnHash(this: export_default$E<number>): export_default$10<0 | 1>;
    pgLsnHashExtended(this: export_default$E<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    pgLsnHashExtended(this: export_default$E<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    pgLsnHashExtended(this: export_default$E<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    pgLsnLarger(this: export_default$E<1>, a1: export_default$E<1>): export_default$E<1>;
    pgLsnLarger(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$E<0 | 1>;
    pgLsnLarger(this: export_default$E<number>, a1: export_default$E<number>): export_default$E<0 | 1>;
    pgLsnLe(this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    pgLsnLe(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    pgLsnLe(this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    pgLsnLt(this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    pgLsnLt(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    pgLsnLt(this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    pgLsnMi(this: export_default$E<1>, a1: export_default$E<1>): export_default$L<1>;
    pgLsnMi(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$L<0 | 1>;
    pgLsnMi(this: export_default$E<number>, a1: export_default$E<number>): export_default$L<0 | 1>;
    pgLsnMii(this: export_default$E<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$E<1>;
    pgLsnMii(this: export_default$E<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$E<0 | 1>;
    pgLsnMii(this: export_default$E<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$E<0 | 1>;
    pgLsnNe(this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    pgLsnNe(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    pgLsnNe(this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    pgLsnPli(this: export_default$E<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$E<1>;
    pgLsnPli(this: export_default$E<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$E<0 | 1>;
    pgLsnPli(this: export_default$E<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$E<0 | 1>;
    pgLsnSmaller(this: export_default$E<1>, a1: export_default$E<1>): export_default$E<1>;
    pgLsnSmaller(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$E<0 | 1>;
    pgLsnSmaller(this: export_default$E<number>, a1: export_default$E<number>): export_default$E<0 | 1>;
    pgReplicationOriginXactSetup(this: export_default$E<1>, a1: export_default$h<1>): export_default$4<1>;
    pgReplicationOriginXactSetup(this: export_default$E<0 | 1>, a1: export_default$h<0 | 1>): export_default$4<0 | 1>;
    pgReplicationOriginXactSetup(this: export_default$E<number>, a1: export_default$h<number>): export_default$4<0 | 1>;
    pgWalLsnDiff(this: export_default$E<1>, a1: export_default$E<1>): export_default$L<1>;
    pgWalLsnDiff(this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$L<0 | 1>;
    pgWalLsnDiff(this: export_default$E<number>, a1: export_default$E<number>): export_default$L<0 | 1>;
    pgWalfileName(this: export_default$E<1>): export_default$l<1>;
    pgWalfileName(this: export_default$E<0 | 1>): export_default$l<0 | 1>;
    pgWalfileName(this: export_default$E<number>): export_default$l<0 | 1>;
    pgWalfileNameOffset(this: export_default$E<1>): Record$1<1, {
        file_name: export_default$l<1>;
        file_offset: export_default$10<1>;
    }>;
    pgWalfileNameOffset(this: export_default$E<0 | 1>): Record$1<0 | 1, {
        file_name: export_default$l<0 | 1>;
        file_offset: export_default$10<0 | 1>;
    }>;
    pgWalfileNameOffset(this: export_default$E<number>): Record$1<0 | 1, {
        file_name: export_default$l<0 | 1>;
        file_offset: export_default$10<0 | 1>;
    }>;
    ["="](this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    ["="](this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    [">="](this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    [">"](this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    ["<="](this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    ["<"](this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$E<1>, a1: export_default$E<1>): export_default$L<1>;
    ["-"](this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$L<0 | 1>;
    ["-"](this: export_default$E<number>, a1: export_default$E<number>): export_default$L<0 | 1>;
    ["-"](this: export_default$E<1>, a1: export_default$L<1>): export_default$E<1>;
    ["-"](this: export_default$E<0 | 1>, a1: export_default$L<0 | 1>): export_default$E<0 | 1>;
    ["-"](this: export_default$E<number>, a1: export_default$L<number>): export_default$E<0 | 1>;
    ["<>"](this: export_default$E<1>, a1: export_default$E<1>): export_default$1g<1>;
    ["<>"](this: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$E<number>, a1: export_default$E<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$E<1>, a1: export_default$L<1> | Input<export_default$L<0 | 1>>): export_default$E<1>;
    ["+"](this: export_default$E<0 | 1>, a1: export_default$L<0 | 1> | Input<export_default$L<0 | 1>>): export_default$E<0 | 1>;
    ["+"](this: export_default$E<number>, a1: export_default$L<number> | Input<export_default$L<0 | 1>>): export_default$E<0 | 1>;
}

type Parsed$B = string;
type SerializeParam$B = string;
declare class export_default$D<N extends number> extends Any<Parsed$B, N> {
    static new(v: SerializeParam$B): export_default$D<1>;
    static new(v: null): export_default$D<0>;
    static new(v: Expression): export_default$D<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$D<number> | undefined;
    pgMcvListItems(this: export_default$D<1>): Setof<{
        from: {
            index: export_default$10<1>;
            values: Array$1<1, export_default$l<0 | 1>>;
            nulls: Array$1<1, export_default$1g<0 | 1>>;
            frequency: export_default$14<1>;
            base_frequency: export_default$14<1>;
        };
    }>;
    pgMcvListItems(this: export_default$D<0 | 1>): Setof<{
        from: {
            index: export_default$10<0 | 1>;
            values: Array$1<0 | 1, export_default$l<0 | 1>>;
            nulls: Array$1<0 | 1, export_default$1g<0 | 1>>;
            frequency: export_default$14<0 | 1>;
            base_frequency: export_default$14<0 | 1>;
        };
    }>;
    pgMcvListItems(this: export_default$D<number>): Setof<{
        from: {
            index: export_default$10<0 | 1>;
            values: Array$1<0 | 1, export_default$l<0 | 1>>;
            nulls: Array$1<0 | 1, export_default$1g<0 | 1>>;
            frequency: export_default$14<0 | 1>;
            base_frequency: export_default$14<0 | 1>;
        };
    }>;
}

type Parsed$A = string;
type SerializeParam$A = string;
declare class export_default$C<N extends number> extends Any<Parsed$A, N> {
    static new(v: SerializeParam$A): export_default$C<1>;
    static new(v: null): export_default$C<0>;
    static new(v: Expression): export_default$C<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$C<number> | undefined;
    pgGetExpr(this: export_default$C<1>, a1: export_default$I<1>): export_default$l<1>;
    pgGetExpr(this: export_default$C<0 | 1>, a1: export_default$I<0 | 1>): export_default$l<0 | 1>;
    pgGetExpr(this: export_default$C<number>, a1: export_default$I<number>): export_default$l<0 | 1>;
    pgGetExpr(this: export_default$C<1>, a1: export_default$I<1>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    pgGetExpr(this: export_default$C<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetExpr(this: export_default$C<number>, a1: export_default$I<number>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
}

type Parsed$z = string;
type SerializeParam$z = string;
declare class export_default$B<N extends number> extends Any<Parsed$z, N> {
    static new(v: SerializeParam$z): export_default$B<1>;
    static new(v: null): export_default$B<0>;
    static new(v: Expression): export_default$B<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$B<number> | undefined;
    pgSnapshotXip(this: export_default$B<1>): Setof<{
        from: {};
    }>;
    pgSnapshotXip(this: export_default$B<0 | 1>): Setof<{
        from: {};
    }>;
    pgSnapshotXip(this: export_default$B<number>): Setof<{
        from: {};
    }>;
    pgSnapshotXmax(this: export_default$B<1>): export_default$2<1>;
    pgSnapshotXmax(this: export_default$B<0 | 1>): export_default$2<0 | 1>;
    pgSnapshotXmax(this: export_default$B<number>): export_default$2<0 | 1>;
}

type Parsed$y = string;
type SerializeParam$y = string;
declare class export_default$A<N extends number> extends Any<Parsed$y, N> {
    static new(v: SerializeParam$y): export_default$A<1>;
    static new(v: null): export_default$A<0>;
    static new(v: Expression): export_default$A<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$A<number> | undefined;
    box(this: export_default$A<1>): export_default$1f<1>;
    box(this: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    box(this: export_default$A<number>): export_default$1f<0 | 1>;
    box(this: export_default$A<1>, a1: export_default$A<1>): export_default$1f<1>;
    box(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
    box(this: export_default$A<number>, a1: export_default$A<number>): export_default$1f<0 | 1>;
    circle(this: export_default$A<1>, a1: export_default$14<1> | Input<export_default$14<0 | 1>>): export_default$19<1>;
    circle(this: export_default$A<0 | 1>, a1: export_default$14<0 | 1> | Input<export_default$14<0 | 1>>): export_default$19<0 | 1>;
    circle(this: export_default$A<number>, a1: export_default$14<number> | Input<export_default$14<0 | 1>>): export_default$19<0 | 1>;
    closePb(this: export_default$A<1>, a1: export_default$1f<1>): export_default$A<1>;
    closePb(this: export_default$A<0 | 1>, a1: export_default$1f<0 | 1>): export_default$A<0 | 1>;
    closePb(this: export_default$A<number>, a1: export_default$1f<number>): export_default$A<0 | 1>;
    closePl(this: export_default$A<1>, a1: export_default$R<1>): export_default$A<1>;
    closePl(this: export_default$A<0 | 1>, a1: export_default$R<0 | 1>): export_default$A<0 | 1>;
    closePl(this: export_default$A<number>, a1: export_default$R<number>): export_default$A<0 | 1>;
    closePs(this: export_default$A<1>, a1: export_default$Q<1>): export_default$A<1>;
    closePs(this: export_default$A<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    closePs(this: export_default$A<number>, a1: export_default$Q<number>): export_default$A<0 | 1>;
    distPb(this: export_default$A<1>, a1: export_default$1f<1>): export_default$14<1>;
    distPb(this: export_default$A<0 | 1>, a1: export_default$1f<0 | 1>): export_default$14<0 | 1>;
    distPb(this: export_default$A<number>, a1: export_default$1f<number>): export_default$14<0 | 1>;
    distPc(this: export_default$A<1>, a1: export_default$19<1>): export_default$14<1>;
    distPc(this: export_default$A<0 | 1>, a1: export_default$19<0 | 1>): export_default$14<0 | 1>;
    distPc(this: export_default$A<number>, a1: export_default$19<number>): export_default$14<0 | 1>;
    distPl(this: export_default$A<1>, a1: export_default$R<1>): export_default$14<1>;
    distPl(this: export_default$A<0 | 1>, a1: export_default$R<0 | 1>): export_default$14<0 | 1>;
    distPl(this: export_default$A<number>, a1: export_default$R<number>): export_default$14<0 | 1>;
    distPpath(this: export_default$A<1>, a1: export_default$G<1>): export_default$14<1>;
    distPpath(this: export_default$A<0 | 1>, a1: export_default$G<0 | 1>): export_default$14<0 | 1>;
    distPpath(this: export_default$A<number>, a1: export_default$G<number>): export_default$14<0 | 1>;
    distPpoly(this: export_default$A<1>, a1: export_default$z<1>): export_default$14<1>;
    distPpoly(this: export_default$A<0 | 1>, a1: export_default$z<0 | 1>): export_default$14<0 | 1>;
    distPpoly(this: export_default$A<number>, a1: export_default$z<number>): export_default$14<0 | 1>;
    distPs(this: export_default$A<1>, a1: export_default$Q<1>): export_default$14<1>;
    distPs(this: export_default$A<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    distPs(this: export_default$A<number>, a1: export_default$Q<number>): export_default$14<0 | 1>;
    ishorizontal(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    ishorizontal(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ishorizontal(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    isvertical(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    isvertical(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    isvertical(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    line(this: export_default$A<1>, a1: export_default$A<1>): export_default$R<1>;
    line(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$R<0 | 1>;
    line(this: export_default$A<number>, a1: export_default$A<number>): export_default$R<0 | 1>;
    lseg(this: export_default$A<1>, a1: export_default$A<1>): export_default$Q<1>;
    lseg(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$Q<0 | 1>;
    lseg(this: export_default$A<number>, a1: export_default$A<number>): export_default$Q<0 | 1>;
    onPb(this: export_default$A<1>, a1: export_default$1f<1>): export_default$1g<1>;
    onPb(this: export_default$A<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
    onPb(this: export_default$A<number>, a1: export_default$1f<number>): export_default$1g<0 | 1>;
    onPl(this: export_default$A<1>, a1: export_default$R<1>): export_default$1g<1>;
    onPl(this: export_default$A<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
    onPl(this: export_default$A<number>, a1: export_default$R<number>): export_default$1g<0 | 1>;
    onPpath(this: export_default$A<1>, a1: export_default$G<1>): export_default$1g<1>;
    onPpath(this: export_default$A<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
    onPpath(this: export_default$A<number>, a1: export_default$G<number>): export_default$1g<0 | 1>;
    onPs(this: export_default$A<1>, a1: export_default$Q<1>): export_default$1g<1>;
    onPs(this: export_default$A<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
    onPs(this: export_default$A<number>, a1: export_default$Q<number>): export_default$1g<0 | 1>;
    pointAbove(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointAbove(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointAbove(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pointAbove(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointAbove(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointAbove(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pointAdd(this: export_default$A<1>, a1: export_default$A<1>): export_default$A<1>;
    pointAdd(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
    pointAdd(this: export_default$A<number>, a1: export_default$A<number>): export_default$A<0 | 1>;
    pointBelow(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointBelow(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointBelow(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pointBelow(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointBelow(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointBelow(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pointDistance(this: export_default$A<1>, a1: export_default$A<1>): export_default$14<1>;
    pointDistance(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    pointDistance(this: export_default$A<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    pointDiv(this: export_default$A<1>, a1: export_default$A<1>): export_default$A<1>;
    pointDiv(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
    pointDiv(this: export_default$A<number>, a1: export_default$A<number>): export_default$A<0 | 1>;
    pointEq(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointEq(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointEq(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pointHoriz(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointHoriz(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointHoriz(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pointLeft(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointLeft(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointLeft(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pointMul(this: export_default$A<1>, a1: export_default$A<1>): export_default$A<1>;
    pointMul(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
    pointMul(this: export_default$A<number>, a1: export_default$A<number>): export_default$A<0 | 1>;
    pointNe(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointNe(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointNe(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pointRight(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointRight(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointRight(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    pointSub(this: export_default$A<1>, a1: export_default$A<1>): export_default$A<1>;
    pointSub(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
    pointSub(this: export_default$A<number>, a1: export_default$A<number>): export_default$A<0 | 1>;
    pointVert(this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    pointVert(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    pointVert(this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ptContainedCircle(this: export_default$A<1>, a1: export_default$19<1>): export_default$1g<1>;
    ptContainedCircle(this: export_default$A<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
    ptContainedCircle(this: export_default$A<number>, a1: export_default$19<number>): export_default$1g<0 | 1>;
    ptContainedPoly(this: export_default$A<1>, a1: export_default$z<1>): export_default$1g<1>;
    ptContainedPoly(this: export_default$A<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ptContainedPoly(this: export_default$A<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    slope(this: export_default$A<1>, a1: export_default$A<1>): export_default$14<1>;
    slope(this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    slope(this: export_default$A<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    ["##"](this: export_default$A<1>, a1: export_default$1f<1>): export_default$A<1>;
    ["##"](this: export_default$A<0 | 1>, a1: export_default$1f<0 | 1>): export_default$A<0 | 1>;
    ["##"](this: export_default$A<number>, a1: export_default$1f<number>): export_default$A<0 | 1>;
    ["##"](this: export_default$A<1>, a1: export_default$R<1>): export_default$A<1>;
    ["##"](this: export_default$A<0 | 1>, a1: export_default$R<0 | 1>): export_default$A<0 | 1>;
    ["##"](this: export_default$A<number>, a1: export_default$R<number>): export_default$A<0 | 1>;
    ["##"](this: export_default$A<1>, a1: export_default$Q<1>): export_default$A<1>;
    ["##"](this: export_default$A<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
    ["##"](this: export_default$A<number>, a1: export_default$Q<number>): export_default$A<0 | 1>;
    ["<->"](this: export_default$A<1>, a1: export_default$1f<1>): export_default$14<1>;
    ["<->"](this: export_default$A<0 | 1>, a1: export_default$1f<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<number>, a1: export_default$1f<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<1>, a1: export_default$19<1>): export_default$14<1>;
    ["<->"](this: export_default$A<0 | 1>, a1: export_default$19<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<number>, a1: export_default$19<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<1>, a1: export_default$R<1>): export_default$14<1>;
    ["<->"](this: export_default$A<0 | 1>, a1: export_default$R<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<number>, a1: export_default$R<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<1>, a1: export_default$G<1>): export_default$14<1>;
    ["<->"](this: export_default$A<0 | 1>, a1: export_default$G<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<number>, a1: export_default$G<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<1>, a1: export_default$z<1>): export_default$14<1>;
    ["<->"](this: export_default$A<0 | 1>, a1: export_default$z<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<number>, a1: export_default$z<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<1>, a1: export_default$Q<1>): export_default$14<1>;
    ["<->"](this: export_default$A<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<number>, a1: export_default$Q<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<1>, a1: export_default$A<1>): export_default$14<1>;
    ["<->"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$A<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    [">^"](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    [">^"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    [">^"](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["|>>"](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["|>>"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["|>>"](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$A<1>, a1: export_default$A<1>): export_default$A<1>;
    ["+"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
    ["+"](this: export_default$A<number>, a1: export_default$A<number>): export_default$A<0 | 1>;
    ["<^"](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["<^"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["<^"](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["<<|"](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["<<|"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["<<|"](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["/"](this: export_default$A<1>, a1: export_default$A<1>): export_default$A<1>;
    ["/"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
    ["/"](this: export_default$A<number>, a1: export_default$A<number>): export_default$A<0 | 1>;
    ["~="](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["~="](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["~="](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["?-"](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["?-"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["?-"](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["<<"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["*"](this: export_default$A<1>, a1: export_default$A<1>): export_default$A<1>;
    ["*"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
    ["*"](this: export_default$A<number>, a1: export_default$A<number>): export_default$A<0 | 1>;
    ["<>"](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["<>"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    [">>"](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    [">>"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    [">>"](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$A<1>, a1: export_default$A<1>): export_default$A<1>;
    ["-"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
    ["-"](this: export_default$A<number>, a1: export_default$A<number>): export_default$A<0 | 1>;
    ["?|"](this: export_default$A<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["?|"](this: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["?|"](this: export_default$A<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
}

type Parsed$x = string;
type SerializeParam$x = string;
declare class export_default$z<N extends number> extends Any<Parsed$x, N> {
    static new(v: SerializeParam$x): export_default$z<1>;
    static new(v: null): export_default$z<0>;
    static new(v: Expression): export_default$z<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$z<number> | undefined;
    box(this: export_default$z<1>): export_default$1f<1>;
    box(this: export_default$z<0 | 1>): export_default$1f<0 | 1>;
    box(this: export_default$z<number>): export_default$1f<0 | 1>;
    circle(this: export_default$z<1>): export_default$19<1>;
    circle(this: export_default$z<0 | 1>): export_default$19<0 | 1>;
    circle(this: export_default$z<number>): export_default$19<0 | 1>;
    distPolyc(this: export_default$z<1>, a1: export_default$19<1>): export_default$14<1>;
    distPolyc(this: export_default$z<0 | 1>, a1: export_default$19<0 | 1>): export_default$14<0 | 1>;
    distPolyc(this: export_default$z<number>, a1: export_default$19<number>): export_default$14<0 | 1>;
    distPolyp(this: export_default$z<1>, a1: export_default$A<1>): export_default$14<1>;
    distPolyp(this: export_default$z<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    distPolyp(this: export_default$z<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    npoints(this: export_default$z<1>): export_default$10<1>;
    npoints(this: export_default$z<0 | 1>): export_default$10<0 | 1>;
    npoints(this: export_default$z<number>): export_default$10<0 | 1>;
    path(this: export_default$z<1>): export_default$G<1>;
    path(this: export_default$z<0 | 1>): export_default$G<0 | 1>;
    path(this: export_default$z<number>): export_default$G<0 | 1>;
    point(this: export_default$z<1>): export_default$A<1>;
    point(this: export_default$z<0 | 1>): export_default$A<0 | 1>;
    point(this: export_default$z<number>): export_default$A<0 | 1>;
    polyAbove(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyAbove(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyAbove(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polyBelow(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyBelow(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyBelow(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polyCenter(this: export_default$z<1>): export_default$A<1>;
    polyCenter(this: export_default$z<0 | 1>): export_default$A<0 | 1>;
    polyCenter(this: export_default$z<number>): export_default$A<0 | 1>;
    polyContainPt(this: export_default$z<1>, a1: export_default$A<1>): export_default$1g<1>;
    polyContainPt(this: export_default$z<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    polyContainPt(this: export_default$z<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    polyContained(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyContained(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyContained(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polyDistance(this: export_default$z<1>, a1: export_default$z<1>): export_default$14<1>;
    polyDistance(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$14<0 | 1>;
    polyDistance(this: export_default$z<number>, a1: export_default$z<number>): export_default$14<0 | 1>;
    polyLeft(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyLeft(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyLeft(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polyNpoints(this: export_default$z<1>): export_default$10<1>;
    polyNpoints(this: export_default$z<0 | 1>): export_default$10<0 | 1>;
    polyNpoints(this: export_default$z<number>): export_default$10<0 | 1>;
    polyOverabove(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyOverabove(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyOverabove(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polyOverbelow(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyOverbelow(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyOverbelow(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polyOverlap(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyOverlap(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyOverlap(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polyOverleft(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyOverleft(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyOverleft(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polyOverright(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyOverright(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyOverright(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polyRight(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polyRight(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polyRight(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    polySame(this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    polySame(this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    polySame(this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    spgPolyQuadCompress(this: export_default$z<1>): export_default$1f<1>;
    spgPolyQuadCompress(this: export_default$z<0 | 1>): export_default$1f<0 | 1>;
    spgPolyQuadCompress(this: export_default$z<number>): export_default$1f<0 | 1>;
    ["<->"](this: export_default$z<1>, a1: export_default$19<1>): export_default$14<1>;
    ["<->"](this: export_default$z<0 | 1>, a1: export_default$19<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$z<number>, a1: export_default$19<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$z<1>, a1: export_default$A<1>): export_default$14<1>;
    ["<->"](this: export_default$z<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$z<number>, a1: export_default$A<number>): export_default$14<0 | 1>;
    ["<->"](this: export_default$z<1>, a1: export_default$z<1>): export_default$14<1>;
    ["<->"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$14<0 | 1>;
    ["<->"](this: export_default$z<number>, a1: export_default$z<number>): export_default$14<0 | 1>;
    ["|>>"](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    ["|>>"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ["|>>"](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    ["<<|"](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    ["<<|"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ["<<|"](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$z<1>, a1: export_default$A<1>): export_default$1g<1>;
    ["@>"](this: export_default$z<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$z<number>, a1: export_default$A<number>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    ["<<"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ["<<"](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    ["|&>"](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    ["|&>"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ["|&>"](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    ["&<|"](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    ["&<|"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ["&<|"](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    ["&&"](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    ["&&"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ["&&"](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    ["&<"](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    ["&<"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ["&<"](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    ["&>"](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    ["&>"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ["&>"](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    [">>"](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    [">>"](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    [">>"](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
    ["~="](this: export_default$z<1>, a1: export_default$z<1>): export_default$1g<1>;
    ["~="](this: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
    ["~="](this: export_default$z<number>, a1: export_default$z<number>): export_default$1g<0 | 1>;
}

declare class export_default$y<N extends number, R extends {
    [K in string]: Any<unknown, 0 | 1>;
}> extends Any<{
    [K in keyof R]: R[K]["resultType"];
}, N> {
    static parse(v: string): unknown;
    static typeString(): string | undefined;
    asAggregate(): Record$1<number, R> | undefined;
    btrecordcmp<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$10<1>;
    btrecordcmp<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$10<0 | 1>;
    btrecordcmp<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$10<0 | 1>;
    btrecordimagecmp<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$10<1>;
    btrecordimagecmp<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$10<0 | 1>;
    btrecordimagecmp<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$10<0 | 1>;
    hashRecord(this: Record$1<1, R>): export_default$10<1>;
    hashRecord(this: Record$1<0 | 1, R>): export_default$10<0 | 1>;
    hashRecord(this: Record$1<number, R>): export_default$10<0 | 1>;
    hashRecordExtended(this: Record$1<1, R>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashRecordExtended(this: Record$1<0 | 1, R>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashRecordExtended(this: Record$1<number, R>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    recordEq<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordEq<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordEq<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordGe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordGe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordGe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordGt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordGt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordGt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordImageEq<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordImageEq<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordImageEq<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordImageGe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordImageGe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordImageGe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordImageGt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordImageGt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordImageGt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordImageLe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordImageLe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordImageLe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordImageLt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordImageLt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordImageLt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordImageNe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordImageNe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordImageNe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordLe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordLe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordLe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordLt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordLt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordLt<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    recordNe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    recordNe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    recordNe<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    rowToJson(this: Record$1<1, R>): export_default$V<1>;
    rowToJson(this: Record$1<0 | 1, R>): export_default$V<0 | 1>;
    rowToJson(this: Record$1<number, R>): export_default$V<0 | 1>;
    rowToJson(this: Record$1<1, R>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$V<1>;
    rowToJson(this: Record$1<0 | 1, R>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$V<0 | 1>;
    rowToJson(this: Record$1<number, R>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$V<0 | 1>;
    ["="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    [">="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    [">="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    [">="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    [">"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    [">"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    [">"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    ["*="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["*="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["*="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    ["*>="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["*>="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["*>="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    ["*>"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["*>"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["*>"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    ["*<="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["*<="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["*<="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    ["*<"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["*<"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["*<"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    ["*<>"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["*<>"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["*<>"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    ["<="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["<="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["<="]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    ["<"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["<"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["<"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
    ["<>"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<1, R>, a1: Record$1<1, R>): export_default$1g<1>;
    ["<>"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
    ["<>"]<R extends {
        [k in string]: Any<unknown, 0 | 1>;
    }>(this: Record$1<number, R>, a1: Record$1<number, R>): export_default$1g<0 | 1>;
}

type Parsed$w = string;
type SerializeParam$w = string;
declare class export_default$x<N extends number> extends Any<Parsed$w, N> {
    static new(v: SerializeParam$w): export_default$x<1>;
    static new(v: null): export_default$x<0>;
    static new(v: Expression): export_default$x<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$x<number> | undefined;
    cursorToXml(this: export_default$x<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    cursorToXml(this: export_default$x<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    cursorToXml(this: export_default$x<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    cursorToXmlschema(this: export_default$x<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    cursorToXmlschema(this: export_default$x<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    cursorToXmlschema(this: export_default$x<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
}

type Parsed$v = string;
type SerializeParam$v = string;
declare class export_default$w<N extends number> extends Any<Parsed$v, N> {
    static new(v: SerializeParam$v): export_default$w<1>;
    static new(v: null): export_default$w<0>;
    static new(v: Expression): export_default$w<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$w<number> | undefined;
    brinDesummarizeRange(this: export_default$w<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$4<1>;
    brinDesummarizeRange(this: export_default$w<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$4<0 | 1>;
    brinDesummarizeRange(this: export_default$w<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$4<0 | 1>;
    brinSummarizeNewValues(this: export_default$w<1>): export_default$10<1>;
    brinSummarizeNewValues(this: export_default$w<0 | 1>): export_default$10<0 | 1>;
    brinSummarizeNewValues(this: export_default$w<number>): export_default$10<0 | 1>;
    brinSummarizeRange(this: export_default$w<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$10<1>;
    brinSummarizeRange(this: export_default$w<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    brinSummarizeRange(this: export_default$w<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$10<0 | 1>;
    currval(this: export_default$w<1>): export_default$Z<1>;
    currval(this: export_default$w<0 | 1>): export_default$Z<0 | 1>;
    currval(this: export_default$w<number>): export_default$Z<0 | 1>;
    ginCleanPendingList(this: export_default$w<1>): export_default$Z<1>;
    ginCleanPendingList(this: export_default$w<0 | 1>): export_default$Z<0 | 1>;
    ginCleanPendingList(this: export_default$w<number>): export_default$Z<0 | 1>;
    nextval(this: export_default$w<1>): export_default$Z<1>;
    nextval(this: export_default$w<0 | 1>): export_default$Z<0 | 1>;
    nextval(this: export_default$w<number>): export_default$Z<0 | 1>;
    pgColumnIsUpdatable(this: export_default$w<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    pgColumnIsUpdatable(this: export_default$w<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    pgColumnIsUpdatable(this: export_default$w<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    pgExtensionConfigDump(this: export_default$w<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$4<1>;
    pgExtensionConfigDump(this: export_default$w<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$4<0 | 1>;
    pgExtensionConfigDump(this: export_default$w<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$4<0 | 1>;
    pgGetReplicaIdentityIndex(this: export_default$w<1>): export_default$w<1>;
    pgGetReplicaIdentityIndex(this: export_default$w<0 | 1>): export_default$w<0 | 1>;
    pgGetReplicaIdentityIndex(this: export_default$w<number>): export_default$w<0 | 1>;
    pgIndexColumnHasProperty(this: export_default$w<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgIndexColumnHasProperty(this: export_default$w<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgIndexColumnHasProperty(this: export_default$w<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgIndexHasProperty(this: export_default$w<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgIndexHasProperty(this: export_default$w<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgIndexHasProperty(this: export_default$w<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgIndexesSize(this: export_default$w<1>): export_default$Z<1>;
    pgIndexesSize(this: export_default$w<0 | 1>): export_default$Z<0 | 1>;
    pgIndexesSize(this: export_default$w<number>): export_default$Z<0 | 1>;
    pgNextoid(this: export_default$w<1>, a1: export_default$M<1>, a2: export_default$w<1>): export_default$I<1>;
    pgNextoid(this: export_default$w<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$w<0 | 1>): export_default$I<0 | 1>;
    pgNextoid(this: export_default$w<number>, a1: export_default$M<number>, a2: export_default$w<number>): export_default$I<0 | 1>;
    pgPartitionAncestors(this: export_default$w<1>): Setof<{
        from: {
            relid: export_default$w<1>;
        };
    }>;
    pgPartitionAncestors(this: export_default$w<0 | 1>): Setof<{
        from: {
            relid: export_default$w<0 | 1>;
        };
    }>;
    pgPartitionAncestors(this: export_default$w<number>): Setof<{
        from: {
            relid: export_default$w<0 | 1>;
        };
    }>;
    pgPartitionRoot(this: export_default$w<1>): export_default$w<1>;
    pgPartitionRoot(this: export_default$w<0 | 1>): export_default$w<0 | 1>;
    pgPartitionRoot(this: export_default$w<number>): export_default$w<0 | 1>;
    pgPartitionTree(this: export_default$w<1>): Setof<{
        from: {
            relid: export_default$w<1>;
            parentrelid: export_default$w<1>;
            isleaf: export_default$1g<1>;
            level: export_default$10<1>;
        };
    }>;
    pgPartitionTree(this: export_default$w<0 | 1>): Setof<{
        from: {
            relid: export_default$w<0 | 1>;
            parentrelid: export_default$w<0 | 1>;
            isleaf: export_default$1g<0 | 1>;
            level: export_default$10<0 | 1>;
        };
    }>;
    pgPartitionTree(this: export_default$w<number>): Setof<{
        from: {
            relid: export_default$w<0 | 1>;
            parentrelid: export_default$w<0 | 1>;
            isleaf: export_default$1g<0 | 1>;
            level: export_default$10<0 | 1>;
        };
    }>;
    pgRelationFilenode(this: export_default$w<1>): export_default$I<1>;
    pgRelationFilenode(this: export_default$w<0 | 1>): export_default$I<0 | 1>;
    pgRelationFilenode(this: export_default$w<number>): export_default$I<0 | 1>;
    pgRelationFilepath(this: export_default$w<1>): export_default$l<1>;
    pgRelationFilepath(this: export_default$w<0 | 1>): export_default$l<0 | 1>;
    pgRelationFilepath(this: export_default$w<number>): export_default$l<0 | 1>;
    pgRelationIsPublishable(this: export_default$w<1>): export_default$1g<1>;
    pgRelationIsPublishable(this: export_default$w<0 | 1>): export_default$1g<0 | 1>;
    pgRelationIsPublishable(this: export_default$w<number>): export_default$1g<0 | 1>;
    pgRelationIsUpdatable(this: export_default$w<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$10<1>;
    pgRelationIsUpdatable(this: export_default$w<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$10<0 | 1>;
    pgRelationIsUpdatable(this: export_default$w<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$10<0 | 1>;
    pgRelationSize(this: export_default$w<1>): export_default$Z<1>;
    pgRelationSize(this: export_default$w<0 | 1>): export_default$Z<0 | 1>;
    pgRelationSize(this: export_default$w<number>): export_default$Z<0 | 1>;
    pgRelationSize(this: export_default$w<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$Z<1>;
    pgRelationSize(this: export_default$w<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$Z<0 | 1>;
    pgRelationSize(this: export_default$w<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$Z<0 | 1>;
    pgSequenceLastValue(this: export_default$w<1>): export_default$Z<1>;
    pgSequenceLastValue(this: export_default$w<0 | 1>): export_default$Z<0 | 1>;
    pgSequenceLastValue(this: export_default$w<number>): export_default$Z<0 | 1>;
    pgTableSize(this: export_default$w<1>): export_default$Z<1>;
    pgTableSize(this: export_default$w<0 | 1>): export_default$Z<0 | 1>;
    pgTableSize(this: export_default$w<number>): export_default$Z<0 | 1>;
    pgTotalRelationSize(this: export_default$w<1>): export_default$Z<1>;
    pgTotalRelationSize(this: export_default$w<0 | 1>): export_default$Z<0 | 1>;
    pgTotalRelationSize(this: export_default$w<number>): export_default$Z<0 | 1>;
    setval(this: export_default$w<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    setval(this: export_default$w<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    setval(this: export_default$w<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    setval(this: export_default$w<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$Z<1>;
    setval(this: export_default$w<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$Z<0 | 1>;
    setval(this: export_default$w<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$Z<0 | 1>;
    tableToXml(this: export_default$w<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    tableToXml(this: export_default$w<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    tableToXml(this: export_default$w<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    tableToXmlAndXmlschema(this: export_default$w<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    tableToXmlAndXmlschema(this: export_default$w<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    tableToXmlAndXmlschema(this: export_default$w<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    tableToXmlschema(this: export_default$w<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    tableToXmlschema(this: export_default$w<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    tableToXmlschema(this: export_default$w<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
}

type Parsed$u = string;
type SerializeParam$u = string;
declare class export_default$v<N extends number> extends Any<Parsed$u, N> {
    static new(v: SerializeParam$u): export_default$v<1>;
    static new(v: null): export_default$v<0>;
    static new(v: Expression): export_default$v<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$v<number> | undefined;
}

type Parsed$t = string;
type SerializeParam$t = string;
declare class export_default$u<N extends number> extends Any<Parsed$t, N> {
    static new(v: SerializeParam$t): export_default$u<1>;
    static new(v: null): export_default$u<0>;
    static new(v: Expression): export_default$u<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$u<number> | undefined;
    jsonToTsvector(this: export_default$u<1>, a1: export_default$V<1>, a2: export_default$U<1>): export_default$9<1>;
    jsonToTsvector(this: export_default$u<0 | 1>, a1: export_default$V<0 | 1>, a2: export_default$U<0 | 1>): export_default$9<0 | 1>;
    jsonToTsvector(this: export_default$u<number>, a1: export_default$V<number>, a2: export_default$U<number>): export_default$9<0 | 1>;
    jsonbToTsvector(this: export_default$u<1>, a1: export_default$U<1>, a2: export_default$U<1>): export_default$9<1>;
    jsonbToTsvector(this: export_default$u<0 | 1>, a1: export_default$U<0 | 1>, a2: export_default$U<0 | 1>): export_default$9<0 | 1>;
    jsonbToTsvector(this: export_default$u<number>, a1: export_default$U<number>, a2: export_default$U<number>): export_default$9<0 | 1>;
    phrasetoTsquery(this: export_default$u<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$d<1>;
    phrasetoTsquery(this: export_default$u<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
    phrasetoTsquery(this: export_default$u<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
    plaintoTsquery(this: export_default$u<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$d<1>;
    plaintoTsquery(this: export_default$u<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
    plaintoTsquery(this: export_default$u<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
    toTsquery(this: export_default$u<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$d<1>;
    toTsquery(this: export_default$u<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
    toTsquery(this: export_default$u<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
    toTsvector(this: export_default$u<1>, a1: export_default$V<1>): export_default$9<1>;
    toTsvector(this: export_default$u<0 | 1>, a1: export_default$V<0 | 1>): export_default$9<0 | 1>;
    toTsvector(this: export_default$u<number>, a1: export_default$V<number>): export_default$9<0 | 1>;
    toTsvector(this: export_default$u<1>, a1: export_default$U<1>): export_default$9<1>;
    toTsvector(this: export_default$u<0 | 1>, a1: export_default$U<0 | 1>): export_default$9<0 | 1>;
    toTsvector(this: export_default$u<number>, a1: export_default$U<number>): export_default$9<0 | 1>;
    toTsvector(this: export_default$u<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$9<1>;
    toTsvector(this: export_default$u<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$9<0 | 1>;
    toTsvector(this: export_default$u<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$9<0 | 1>;
    tsDebug(this: export_default$u<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            alias: export_default$l<1>;
            description: export_default$l<1>;
            token: export_default$l<1>;
            dictionaries: Array$1<1, export_default$t<0 | 1>>;
            dictionary: export_default$t<1>;
            lexemes: Array$1<1, export_default$l<0 | 1>>;
        };
    }>;
    tsDebug(this: export_default$u<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            alias: export_default$l<0 | 1>;
            description: export_default$l<0 | 1>;
            token: export_default$l<0 | 1>;
            dictionaries: Array$1<0 | 1, export_default$t<0 | 1>>;
            dictionary: export_default$t<0 | 1>;
            lexemes: Array$1<0 | 1, export_default$l<0 | 1>>;
        };
    }>;
    tsDebug(this: export_default$u<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            alias: export_default$l<0 | 1>;
            description: export_default$l<0 | 1>;
            token: export_default$l<0 | 1>;
            dictionaries: Array$1<0 | 1, export_default$t<0 | 1>>;
            dictionary: export_default$t<0 | 1>;
            lexemes: Array$1<0 | 1, export_default$l<0 | 1>>;
        };
    }>;
    tsHeadline(this: export_default$u<1>, a1: export_default$V<1>, a2: export_default$d<1>): export_default$V<1>;
    tsHeadline(this: export_default$u<0 | 1>, a1: export_default$V<0 | 1>, a2: export_default$d<0 | 1>): export_default$V<0 | 1>;
    tsHeadline(this: export_default$u<number>, a1: export_default$V<number>, a2: export_default$d<number>): export_default$V<0 | 1>;
    tsHeadline(this: export_default$u<1>, a1: export_default$V<1>, a2: export_default$d<1>, a3: export_default$l<1>): export_default$V<1>;
    tsHeadline(this: export_default$u<0 | 1>, a1: export_default$V<0 | 1>, a2: export_default$d<0 | 1>, a3: export_default$l<0 | 1>): export_default$V<0 | 1>;
    tsHeadline(this: export_default$u<number>, a1: export_default$V<number>, a2: export_default$d<number>, a3: export_default$l<number>): export_default$V<0 | 1>;
    tsHeadline(this: export_default$u<1>, a1: export_default$U<1>, a2: export_default$d<1>): export_default$U<1>;
    tsHeadline(this: export_default$u<0 | 1>, a1: export_default$U<0 | 1>, a2: export_default$d<0 | 1>): export_default$U<0 | 1>;
    tsHeadline(this: export_default$u<number>, a1: export_default$U<number>, a2: export_default$d<number>): export_default$U<0 | 1>;
    tsHeadline(this: export_default$u<1>, a1: export_default$U<1>, a2: export_default$d<1>, a3: export_default$l<1>): export_default$U<1>;
    tsHeadline(this: export_default$u<0 | 1>, a1: export_default$U<0 | 1>, a2: export_default$d<0 | 1>, a3: export_default$l<0 | 1>): export_default$U<0 | 1>;
    tsHeadline(this: export_default$u<number>, a1: export_default$U<number>, a2: export_default$d<number>, a3: export_default$l<number>): export_default$U<0 | 1>;
    tsHeadline(this: export_default$u<1>, a1: export_default$l<1>, a2: export_default$d<1>): export_default$l<1>;
    tsHeadline(this: export_default$u<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$d<0 | 1>): export_default$l<0 | 1>;
    tsHeadline(this: export_default$u<number>, a1: export_default$l<number>, a2: export_default$d<number>): export_default$l<0 | 1>;
    tsHeadline(this: export_default$u<1>, a1: export_default$l<1>, a2: export_default$d<1>, a3: export_default$l<1>): export_default$l<1>;
    tsHeadline(this: export_default$u<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$d<0 | 1>, a3: export_default$l<0 | 1>): export_default$l<0 | 1>;
    tsHeadline(this: export_default$u<number>, a1: export_default$l<number>, a2: export_default$d<number>, a3: export_default$l<number>): export_default$l<0 | 1>;
    websearchToTsquery(this: export_default$u<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$d<1>;
    websearchToTsquery(this: export_default$u<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
    websearchToTsquery(this: export_default$u<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
}

type Parsed$s = string;
type SerializeParam$s = string;
declare class export_default$t<N extends number> extends Any<Parsed$s, N> {
    static new(v: SerializeParam$s): export_default$t<1>;
    static new(v: null): export_default$t<0>;
    static new(v: Expression): export_default$t<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$t<number> | undefined;
    tsLexize(this: export_default$t<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Array$1<1, export_default$l<0 | 1>>;
    tsLexize(this: export_default$t<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    tsLexize(this: export_default$t<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
}

type Parsed$r = string;
type SerializeParam$r = string;
declare class export_default$s<N extends number> extends Any<Parsed$r, N> {
    static new(v: SerializeParam$r): export_default$s<1>;
    static new(v: null): export_default$s<0>;
    static new(v: Expression): export_default$s<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$s<number> | undefined;
    pgImportSystemCollations(this: export_default$s<1>): export_default$10<1>;
    pgImportSystemCollations(this: export_default$s<0 | 1>): export_default$10<0 | 1>;
    pgImportSystemCollations(this: export_default$s<number>): export_default$10<0 | 1>;
}

type Parsed$q = string;
type SerializeParam$q = string;
declare class export_default$r<N extends number> extends Any<Parsed$q, N> {
    static new(v: SerializeParam$q): export_default$r<1>;
    static new(v: null): export_default$r<0>;
    static new(v: Expression): export_default$r<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$r<number> | undefined;
}

type Parsed$p = string;
type SerializeParam$p = string;
declare class export_default$q<N extends number> extends Any<Parsed$p, N> {
    static new(v: SerializeParam$p): export_default$q<1>;
    static new(v: null): export_default$q<0>;
    static new(v: Expression): export_default$q<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$q<number> | undefined;
}

type Parsed$o = string;
type SerializeParam$o = string;
declare class export_default$p<N extends number> extends Any<Parsed$o, N> {
    static new(v: SerializeParam$o): export_default$p<1>;
    static new(v: null): export_default$p<0>;
    static new(v: Expression): export_default$p<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$p<number> | undefined;
}

type Parsed$n = string;
type SerializeParam$n = string;
declare class export_default$o<N extends number> extends Any<Parsed$n, N> {
    static new(v: SerializeParam$n): export_default$o<1>;
    static new(v: null): export_default$o<0>;
    static new(v: Expression): export_default$o<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$o<number> | undefined;
}

type Parsed$m = string;
type SerializeParam$m = string;
declare class export_default$n<N extends number> extends Any<Parsed$m, N> {
    static new(v: SerializeParam$m): export_default$n<1>;
    static new(v: null): export_default$n<0>;
    static new(v: Expression): export_default$n<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$n<number> | undefined;
}

type Parsed$l = string;
type SerializeParam$l = string;
declare class export_default$m<N extends number> extends Any<Parsed$l, N> {
    static new(v: SerializeParam$l): export_default$m<1>;
    static new(v: null): export_default$m<0>;
    static new(v: Expression): export_default$m<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$m<number> | undefined;
    pgBasetype(this: export_default$m<1>): export_default$m<1>;
    pgBasetype(this: export_default$m<0 | 1>): export_default$m<0 | 1>;
    pgBasetype(this: export_default$m<number>): export_default$m<0 | 1>;
}

type Parsed$k = ReturnType<typeof typeMap["text"]['parse']>;
type SerializeParam$k = Parameters<typeof typeMap["text"]['serialize']>[0];
declare class export_default$l<N extends number> extends Any<Parsed$k, N> {
    static new(v: SerializeParam$k): export_default$l<1>;
    static new(v: null): export_default$l<0>;
    static new(v: Expression): export_default$l<0 | 1>;
    static serializeParamTypes: readonly SerializeParam$k[] | undefined;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$l<number> | undefined;
    ascii(this: export_default$l<1>): export_default$10<1>;
    ascii(this: export_default$l<0 | 1>): export_default$10<0 | 1>;
    ascii(this: export_default$l<number>): export_default$10<0 | 1>;
    binaryUpgradeAddSubRelState(this: export_default$l<1>, a1: export_default$I<1>, a2: export_default$1c<1>, a3: export_default$E<1>): export_default$4<1>;
    binaryUpgradeAddSubRelState(this: export_default$l<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$1c<0 | 1>, a3: export_default$E<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeAddSubRelState(this: export_default$l<number>, a1: export_default$I<number>, a2: export_default$1c<number>, a3: export_default$E<number>): export_default$4<0 | 1>;
    binaryUpgradeCreateEmptyExtension(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>, a4: Array$1<1, export_default$I<0 | 1>>, a5: Array$1<1, export_default$l<0 | 1>>, a6: Array$1<1, export_default$l<0 | 1>>): export_default$4<1>;
    binaryUpgradeCreateEmptyExtension(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a4: Array$1<0 | 1, export_default$I<0 | 1>>, a5: Array$1<0 | 1, export_default$l<0 | 1>>, a6: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$4<0 | 1>;
    binaryUpgradeCreateEmptyExtension(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>, a4: Array$1<number, export_default$I<0 | 1>>, a5: Array$1<number, export_default$l<0 | 1>>, a6: Array$1<number, export_default$l<0 | 1>>): export_default$4<0 | 1>;
    binaryUpgradeReploriginAdvance(this: export_default$l<1>, a1: export_default$E<1>): export_default$4<1>;
    binaryUpgradeReploriginAdvance(this: export_default$l<0 | 1>, a1: export_default$E<0 | 1>): export_default$4<0 | 1>;
    binaryUpgradeReploriginAdvance(this: export_default$l<number>, a1: export_default$E<number>): export_default$4<0 | 1>;
    bitLength(this: export_default$l<1>): export_default$10<1>;
    bitLength(this: export_default$l<0 | 1>): export_default$10<0 | 1>;
    bitLength(this: export_default$l<number>): export_default$10<0 | 1>;
    btrim(this: export_default$l<1>): export_default$l<1>;
    btrim(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    btrim(this: export_default$l<number>): export_default$l<0 | 1>;
    btrim(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    btrim(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    btrim(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    bttextPatternCmp(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    bttextPatternCmp(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    bttextPatternCmp(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    bttextcmp(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    bttextcmp(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    bttextcmp(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    bttextnamecmp(this: export_default$l<1>, a1: export_default$M<1>): export_default$10<1>;
    bttextnamecmp(this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$10<0 | 1>;
    bttextnamecmp(this: export_default$l<number>, a1: export_default$M<number>): export_default$10<0 | 1>;
    char(this: export_default$l<1>): export_default$1c<1>;
    char(this: export_default$l<0 | 1>): export_default$1c<0 | 1>;
    char(this: export_default$l<number>): export_default$1c<0 | 1>;
    charLength(this: export_default$l<1>): export_default$10<1>;
    charLength(this: export_default$l<0 | 1>): export_default$10<0 | 1>;
    charLength(this: export_default$l<number>): export_default$10<0 | 1>;
    characterLength(this: export_default$l<1>): export_default$10<1>;
    characterLength(this: export_default$l<0 | 1>): export_default$10<0 | 1>;
    characterLength(this: export_default$l<number>): export_default$10<0 | 1>;
    concatWs(this: export_default$l<1>, a1: Any<1>): export_default$l<1>;
    concatWs(this: export_default$l<0 | 1>, a1: Any<0 | 1>): export_default$l<0 | 1>;
    concatWs(this: export_default$l<number>, a1: Any<number>): export_default$l<0 | 1>;
    convertTo(this: export_default$l<1>, a1: export_default$M<1>): export_default$1d<1>;
    convertTo(this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1d<0 | 1>;
    convertTo(this: export_default$l<number>, a1: export_default$M<number>): export_default$1d<0 | 1>;
    currentSetting(this: export_default$l<1>): export_default$l<1>;
    currentSetting(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    currentSetting(this: export_default$l<number>): export_default$l<0 | 1>;
    currentSetting(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    currentSetting(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    currentSetting(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    currtid2(this: export_default$l<1>, a1: export_default$k<1>): export_default$k<1>;
    currtid2(this: export_default$l<0 | 1>, a1: export_default$k<0 | 1>): export_default$k<0 | 1>;
    currtid2(this: export_default$l<number>, a1: export_default$k<number>): export_default$k<0 | 1>;
    datePart(this: export_default$l<1>, a1: export_default$18<1>): export_default$14<1>;
    datePart(this: export_default$l<0 | 1>, a1: export_default$18<0 | 1>): export_default$14<0 | 1>;
    datePart(this: export_default$l<number>, a1: export_default$18<number>): export_default$14<0 | 1>;
    datePart(this: export_default$l<1>, a1: export_default$W<1>): export_default$14<1>;
    datePart(this: export_default$l<0 | 1>, a1: export_default$W<0 | 1>): export_default$14<0 | 1>;
    datePart(this: export_default$l<number>, a1: export_default$W<number>): export_default$14<0 | 1>;
    datePart(this: export_default$l<1>, a1: export_default$j<1>): export_default$14<1>;
    datePart(this: export_default$l<0 | 1>, a1: export_default$j<0 | 1>): export_default$14<0 | 1>;
    datePart(this: export_default$l<number>, a1: export_default$j<number>): export_default$14<0 | 1>;
    datePart(this: export_default$l<1>, a1: export_default$i<1>): export_default$14<1>;
    datePart(this: export_default$l<0 | 1>, a1: export_default$i<0 | 1>): export_default$14<0 | 1>;
    datePart(this: export_default$l<number>, a1: export_default$i<number>): export_default$14<0 | 1>;
    datePart(this: export_default$l<1>, a1: export_default$h<1>): export_default$14<1>;
    datePart(this: export_default$l<0 | 1>, a1: export_default$h<0 | 1>): export_default$14<0 | 1>;
    datePart(this: export_default$l<number>, a1: export_default$h<number>): export_default$14<0 | 1>;
    datePart(this: export_default$l<1>, a1: export_default$g<1>): export_default$14<1>;
    datePart(this: export_default$l<0 | 1>, a1: export_default$g<0 | 1>): export_default$14<0 | 1>;
    datePart(this: export_default$l<number>, a1: export_default$g<number>): export_default$14<0 | 1>;
    dateTrunc(this: export_default$l<1>, a1: export_default$W<1>): export_default$W<1>;
    dateTrunc(this: export_default$l<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
    dateTrunc(this: export_default$l<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
    dateTrunc(this: export_default$l<1>, a1: export_default$i<1>): export_default$i<1>;
    dateTrunc(this: export_default$l<0 | 1>, a1: export_default$i<0 | 1>): export_default$i<0 | 1>;
    dateTrunc(this: export_default$l<number>, a1: export_default$i<number>): export_default$i<0 | 1>;
    dateTrunc(this: export_default$l<1>, a1: export_default$h<1>): export_default$h<1>;
    dateTrunc(this: export_default$l<0 | 1>, a1: export_default$h<0 | 1>): export_default$h<0 | 1>;
    dateTrunc(this: export_default$l<number>, a1: export_default$h<number>): export_default$h<0 | 1>;
    dateTrunc(this: export_default$l<1>, a1: export_default$h<1>, a2: export_default$l<1>): export_default$h<1>;
    dateTrunc(this: export_default$l<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$l<0 | 1>): export_default$h<0 | 1>;
    dateTrunc(this: export_default$l<number>, a1: export_default$h<number>, a2: export_default$l<number>): export_default$h<0 | 1>;
    decode(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1d<1>;
    decode(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1d<0 | 1>;
    decode(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1d<0 | 1>;
    extract(this: export_default$l<1>, a1: export_default$18<1>): export_default$L<1>;
    extract(this: export_default$l<0 | 1>, a1: export_default$18<0 | 1>): export_default$L<0 | 1>;
    extract(this: export_default$l<number>, a1: export_default$18<number>): export_default$L<0 | 1>;
    extract(this: export_default$l<1>, a1: export_default$W<1>): export_default$L<1>;
    extract(this: export_default$l<0 | 1>, a1: export_default$W<0 | 1>): export_default$L<0 | 1>;
    extract(this: export_default$l<number>, a1: export_default$W<number>): export_default$L<0 | 1>;
    extract(this: export_default$l<1>, a1: export_default$j<1>): export_default$L<1>;
    extract(this: export_default$l<0 | 1>, a1: export_default$j<0 | 1>): export_default$L<0 | 1>;
    extract(this: export_default$l<number>, a1: export_default$j<number>): export_default$L<0 | 1>;
    extract(this: export_default$l<1>, a1: export_default$i<1>): export_default$L<1>;
    extract(this: export_default$l<0 | 1>, a1: export_default$i<0 | 1>): export_default$L<0 | 1>;
    extract(this: export_default$l<number>, a1: export_default$i<number>): export_default$L<0 | 1>;
    extract(this: export_default$l<1>, a1: export_default$h<1>): export_default$L<1>;
    extract(this: export_default$l<0 | 1>, a1: export_default$h<0 | 1>): export_default$L<0 | 1>;
    extract(this: export_default$l<number>, a1: export_default$h<number>): export_default$L<0 | 1>;
    extract(this: export_default$l<1>, a1: export_default$g<1>): export_default$L<1>;
    extract(this: export_default$l<0 | 1>, a1: export_default$g<0 | 1>): export_default$L<0 | 1>;
    extract(this: export_default$l<number>, a1: export_default$g<number>): export_default$L<0 | 1>;
    format(this: export_default$l<1>): export_default$l<1>;
    format(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    format(this: export_default$l<number>): export_default$l<0 | 1>;
    format(this: export_default$l<1>, a1: Any<1>): export_default$l<1>;
    format(this: export_default$l<0 | 1>, a1: Any<0 | 1>): export_default$l<0 | 1>;
    format(this: export_default$l<number>, a1: Any<number>): export_default$l<0 | 1>;
    ginCmpTslexeme(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    ginCmpTslexeme(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    ginCmpTslexeme(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    ginCompareJsonb(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    ginCompareJsonb(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    ginCompareJsonb(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasAnyColumnPrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasAnyColumnPrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$l<1>, a1: export_default$12<1> | Input<export_default$12<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$l<0 | 1>, a1: export_default$12<0 | 1> | Input<export_default$12<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$l<number>, a1: export_default$12<number> | Input<export_default$12<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasColumnPrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasColumnPrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasDatabasePrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasDatabasePrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasForeignDataWrapperPrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasForeignDataWrapperPrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasFunctionPrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasFunctionPrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasLanguagePrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasLanguagePrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasParameterPrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasParameterPrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasParameterPrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSchemaPrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSchemaPrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasSequencePrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasSequencePrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasServerPrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasServerPrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablePrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablePrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTablespacePrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTablespacePrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    hasTypePrivilege(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hasTypePrivilege(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    hashtext(this: export_default$l<1>): export_default$10<1>;
    hashtext(this: export_default$l<0 | 1>): export_default$10<0 | 1>;
    hashtext(this: export_default$l<number>): export_default$10<0 | 1>;
    hashtextextended(this: export_default$l<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashtextextended(this: export_default$l<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashtextextended(this: export_default$l<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    initcap(this: export_default$l<1>): export_default$l<1>;
    initcap(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    initcap(this: export_default$l<number>): export_default$l<0 | 1>;
    isNormalized(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    isNormalized(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    isNormalized(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    left(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    left(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    left(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    length(this: export_default$l<1>): export_default$10<1>;
    length(this: export_default$l<0 | 1>): export_default$10<0 | 1>;
    length(this: export_default$l<number>): export_default$10<0 | 1>;
    like(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    like(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    like(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    likeEscape(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    likeEscape(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    likeEscape(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    loImport(this: export_default$l<1>): export_default$I<1>;
    loImport(this: export_default$l<0 | 1>): export_default$I<0 | 1>;
    loImport(this: export_default$l<number>): export_default$I<0 | 1>;
    loImport(this: export_default$l<1>, a1: export_default$I<1>): export_default$I<1>;
    loImport(this: export_default$l<0 | 1>, a1: export_default$I<0 | 1>): export_default$I<0 | 1>;
    loImport(this: export_default$l<number>, a1: export_default$I<number>): export_default$I<0 | 1>;
    lower(this: export_default$l<1>): export_default$l<1>;
    lower(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    lower(this: export_default$l<number>): export_default$l<0 | 1>;
    lpad(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    lpad(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    lpad(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    lpad(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    lpad(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    lpad(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    ltrim(this: export_default$l<1>): export_default$l<1>;
    ltrim(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    ltrim(this: export_default$l<number>): export_default$l<0 | 1>;
    ltrim(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    ltrim(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    ltrim(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    max(this: export_default$l<number>): export_default$l<0 | 1>;
    md5(this: export_default$l<1>): export_default$l<1>;
    md5(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    md5(this: export_default$l<number>): export_default$l<0 | 1>;
    name(this: export_default$l<1>): export_default$M<1>;
    name(this: export_default$l<0 | 1>): export_default$M<0 | 1>;
    name(this: export_default$l<number>): export_default$M<0 | 1>;
    normalize(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    normalize(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    normalize(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    notlike(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    notlike(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    notlike(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    octetLength(this: export_default$l<1>): export_default$10<1>;
    octetLength(this: export_default$l<0 | 1>): export_default$10<0 | 1>;
    octetLength(this: export_default$l<number>): export_default$10<0 | 1>;
    overlay(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    overlay(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    overlay(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    overlay(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    overlay(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    overlay(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    parseIdent(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Array$1<1, export_default$l<0 | 1>>;
    parseIdent(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    parseIdent(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    pgBackupStart(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$E<1>;
    pgBackupStart(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$E<0 | 1>;
    pgBackupStart(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$E<0 | 1>;
    pgCreateRestorePoint(this: export_default$l<1>): export_default$E<1>;
    pgCreateRestorePoint(this: export_default$l<0 | 1>): export_default$E<0 | 1>;
    pgCreateRestorePoint(this: export_default$l<number>): export_default$E<0 | 1>;
    pgCurrentLogfile(this: export_default$l<1>): export_default$l<1>;
    pgCurrentLogfile(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    pgCurrentLogfile(this: export_default$l<number>): export_default$l<0 | 1>;
    pgGetObjectAddress(this: export_default$l<1>, a1: Array$1<1, export_default$l<0 | 1>>, a2: Array$1<1, export_default$l<0 | 1>>): Record$1<1, {
        classid: export_default$I<1>;
        objid: export_default$I<1>;
        objsubid: export_default$10<1>;
    }>;
    pgGetObjectAddress(this: export_default$l<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>, a2: Array$1<0 | 1, export_default$l<0 | 1>>): Record$1<0 | 1, {
        classid: export_default$I<0 | 1>;
        objid: export_default$I<0 | 1>;
        objsubid: export_default$10<0 | 1>;
    }>;
    pgGetObjectAddress(this: export_default$l<number>, a1: Array$1<number, export_default$l<0 | 1>>, a2: Array$1<number, export_default$l<0 | 1>>): Record$1<0 | 1, {
        classid: export_default$I<0 | 1>;
        objid: export_default$I<0 | 1>;
        objsubid: export_default$10<0 | 1>;
    }>;
    pgGetSerialSequence(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    pgGetSerialSequence(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    pgGetSerialSequence(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    pgGetViewdef(this: export_default$l<1>): export_default$l<1>;
    pgGetViewdef(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    pgGetViewdef(this: export_default$l<number>): export_default$l<0 | 1>;
    pgGetViewdef(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    pgGetViewdef(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgGetViewdef(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgInputErrorInfo(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Record$1<1, {
        message: export_default$l<1>;
        detail: export_default$l<1>;
        hint: export_default$l<1>;
        sql_error_code: export_default$l<1>;
    }>;
    pgInputErrorInfo(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Record$1<0 | 1, {
        message: export_default$l<0 | 1>;
        detail: export_default$l<0 | 1>;
        hint: export_default$l<0 | 1>;
        sql_error_code: export_default$l<0 | 1>;
    }>;
    pgInputErrorInfo(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Record$1<0 | 1, {
        message: export_default$l<0 | 1>;
        detail: export_default$l<0 | 1>;
        hint: export_default$l<0 | 1>;
        sql_error_code: export_default$l<0 | 1>;
    }>;
    pgInputIsValid(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    pgInputIsValid(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgInputIsValid(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    pgLsDir(this: export_default$l<1>): Setof<{
        from: {};
    }>;
    pgLsDir(this: export_default$l<0 | 1>): Setof<{
        from: {};
    }>;
    pgLsDir(this: export_default$l<number>): Setof<{
        from: {};
    }>;
    pgLsDir(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    pgLsDir(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    pgLsDir(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    pgLsReplslotdir(this: export_default$l<1>): Setof<{
        from: {
            name: export_default$l<1>;
            size: export_default$Z<1>;
            modification: export_default$h<1>;
        };
    }>;
    pgLsReplslotdir(this: export_default$l<0 | 1>): Setof<{
        from: {
            name: export_default$l<0 | 1>;
            size: export_default$Z<0 | 1>;
            modification: export_default$h<0 | 1>;
        };
    }>;
    pgLsReplslotdir(this: export_default$l<number>): Setof<{
        from: {
            name: export_default$l<0 | 1>;
            size: export_default$Z<0 | 1>;
            modification: export_default$h<0 | 1>;
        };
    }>;
    pgNotify(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$4<1>;
    pgNotify(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$4<0 | 1>;
    pgNotify(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$4<0 | 1>;
    pgReadBinaryFile(this: export_default$l<1>): export_default$1d<1>;
    pgReadBinaryFile(this: export_default$l<0 | 1>): export_default$1d<0 | 1>;
    pgReadBinaryFile(this: export_default$l<number>): export_default$1d<0 | 1>;
    pgReadBinaryFile(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1d<1>;
    pgReadBinaryFile(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1d<0 | 1>;
    pgReadBinaryFile(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1d<0 | 1>;
    pgReadBinaryFile(this: export_default$l<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$1d<1>;
    pgReadBinaryFile(this: export_default$l<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$1d<0 | 1>;
    pgReadBinaryFile(this: export_default$l<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$1d<0 | 1>;
    pgReadBinaryFile(this: export_default$l<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1d<1>;
    pgReadBinaryFile(this: export_default$l<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1d<0 | 1>;
    pgReadBinaryFile(this: export_default$l<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1d<0 | 1>;
    pgReadFile(this: export_default$l<1>): export_default$l<1>;
    pgReadFile(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    pgReadFile(this: export_default$l<number>): export_default$l<0 | 1>;
    pgReadFile(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    pgReadFile(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgReadFile(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgReadFile(this: export_default$l<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$l<1>;
    pgReadFile(this: export_default$l<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$l<0 | 1>;
    pgReadFile(this: export_default$l<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$l<0 | 1>;
    pgReadFile(this: export_default$l<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    pgReadFile(this: export_default$l<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgReadFile(this: export_default$l<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a2: export_default$Z<number> | Input<export_default$Z<0 | 1>>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    pgReplicationOriginAdvance(this: export_default$l<1>, a1: export_default$E<1>): export_default$4<1>;
    pgReplicationOriginAdvance(this: export_default$l<0 | 1>, a1: export_default$E<0 | 1>): export_default$4<0 | 1>;
    pgReplicationOriginAdvance(this: export_default$l<number>, a1: export_default$E<number>): export_default$4<0 | 1>;
    pgReplicationOriginCreate(this: export_default$l<1>): export_default$I<1>;
    pgReplicationOriginCreate(this: export_default$l<0 | 1>): export_default$I<0 | 1>;
    pgReplicationOriginCreate(this: export_default$l<number>): export_default$I<0 | 1>;
    pgReplicationOriginDrop(this: export_default$l<1>): export_default$4<1>;
    pgReplicationOriginDrop(this: export_default$l<0 | 1>): export_default$4<0 | 1>;
    pgReplicationOriginDrop(this: export_default$l<number>): export_default$4<0 | 1>;
    pgReplicationOriginOid(this: export_default$l<1>): export_default$I<1>;
    pgReplicationOriginOid(this: export_default$l<0 | 1>): export_default$I<0 | 1>;
    pgReplicationOriginOid(this: export_default$l<number>): export_default$I<0 | 1>;
    pgReplicationOriginProgress(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$E<1>;
    pgReplicationOriginProgress(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$E<0 | 1>;
    pgReplicationOriginProgress(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$E<0 | 1>;
    pgReplicationOriginSessionSetup(this: export_default$l<1>): export_default$4<1>;
    pgReplicationOriginSessionSetup(this: export_default$l<0 | 1>): export_default$4<0 | 1>;
    pgReplicationOriginSessionSetup(this: export_default$l<number>): export_default$4<0 | 1>;
    pgSettingsGetFlags(this: export_default$l<1>): Array$1<1, export_default$l<0 | 1>>;
    pgSettingsGetFlags(this: export_default$l<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
    pgSettingsGetFlags(this: export_default$l<number>): Array$1<0 | 1, export_default$l<0 | 1>>;
    pgSizeBytes(this: export_default$l<1>): export_default$Z<1>;
    pgSizeBytes(this: export_default$l<0 | 1>): export_default$Z<0 | 1>;
    pgSizeBytes(this: export_default$l<number>): export_default$Z<0 | 1>;
    pgSplitWalfileName(this: export_default$l<1>): Record$1<1, {
        segment_number: export_default$L<1>;
        timeline_id: export_default$Z<1>;
    }>;
    pgSplitWalfileName(this: export_default$l<0 | 1>): Record$1<0 | 1, {
        segment_number: export_default$L<0 | 1>;
        timeline_id: export_default$Z<0 | 1>;
    }>;
    pgSplitWalfileName(this: export_default$l<number>): Record$1<0 | 1, {
        segment_number: export_default$L<0 | 1>;
        timeline_id: export_default$Z<0 | 1>;
    }>;
    pgStatFile(this: export_default$l<1>): Record$1<1, {
        size: export_default$Z<1>;
        access: export_default$h<1>;
        modification: export_default$h<1>;
        change: export_default$h<1>;
        creation: export_default$h<1>;
        isdir: export_default$1g<1>;
    }>;
    pgStatFile(this: export_default$l<0 | 1>): Record$1<0 | 1, {
        size: export_default$Z<0 | 1>;
        access: export_default$h<0 | 1>;
        modification: export_default$h<0 | 1>;
        change: export_default$h<0 | 1>;
        creation: export_default$h<0 | 1>;
        isdir: export_default$1g<0 | 1>;
    }>;
    pgStatFile(this: export_default$l<number>): Record$1<0 | 1, {
        size: export_default$Z<0 | 1>;
        access: export_default$h<0 | 1>;
        modification: export_default$h<0 | 1>;
        change: export_default$h<0 | 1>;
        creation: export_default$h<0 | 1>;
        isdir: export_default$1g<0 | 1>;
    }>;
    pgStatFile(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Record$1<1, {
        size: export_default$Z<1>;
        access: export_default$h<1>;
        modification: export_default$h<1>;
        change: export_default$h<1>;
        creation: export_default$h<1>;
        isdir: export_default$1g<1>;
    }>;
    pgStatFile(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        size: export_default$Z<0 | 1>;
        access: export_default$h<0 | 1>;
        modification: export_default$h<0 | 1>;
        change: export_default$h<0 | 1>;
        creation: export_default$h<0 | 1>;
        isdir: export_default$1g<0 | 1>;
    }>;
    pgStatFile(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Record$1<0 | 1, {
        size: export_default$Z<0 | 1>;
        access: export_default$h<0 | 1>;
        modification: export_default$h<0 | 1>;
        change: export_default$h<0 | 1>;
        creation: export_default$h<0 | 1>;
        isdir: export_default$1g<0 | 1>;
    }>;
    pgStatGetProgressInfo(this: export_default$l<1>): Setof<{
        from: {
            pid: export_default$10<1>;
            datid: export_default$I<1>;
            relid: export_default$I<1>;
            param1: export_default$Z<1>;
            param2: export_default$Z<1>;
            param3: export_default$Z<1>;
            param4: export_default$Z<1>;
            param5: export_default$Z<1>;
            param6: export_default$Z<1>;
            param7: export_default$Z<1>;
            param8: export_default$Z<1>;
            param9: export_default$Z<1>;
            param10: export_default$Z<1>;
            param11: export_default$Z<1>;
            param12: export_default$Z<1>;
            param13: export_default$Z<1>;
            param14: export_default$Z<1>;
            param15: export_default$Z<1>;
            param16: export_default$Z<1>;
            param17: export_default$Z<1>;
            param18: export_default$Z<1>;
            param19: export_default$Z<1>;
            param20: export_default$Z<1>;
        };
    }>;
    pgStatGetProgressInfo(this: export_default$l<0 | 1>): Setof<{
        from: {
            pid: export_default$10<0 | 1>;
            datid: export_default$I<0 | 1>;
            relid: export_default$I<0 | 1>;
            param1: export_default$Z<0 | 1>;
            param2: export_default$Z<0 | 1>;
            param3: export_default$Z<0 | 1>;
            param4: export_default$Z<0 | 1>;
            param5: export_default$Z<0 | 1>;
            param6: export_default$Z<0 | 1>;
            param7: export_default$Z<0 | 1>;
            param8: export_default$Z<0 | 1>;
            param9: export_default$Z<0 | 1>;
            param10: export_default$Z<0 | 1>;
            param11: export_default$Z<0 | 1>;
            param12: export_default$Z<0 | 1>;
            param13: export_default$Z<0 | 1>;
            param14: export_default$Z<0 | 1>;
            param15: export_default$Z<0 | 1>;
            param16: export_default$Z<0 | 1>;
            param17: export_default$Z<0 | 1>;
            param18: export_default$Z<0 | 1>;
            param19: export_default$Z<0 | 1>;
            param20: export_default$Z<0 | 1>;
        };
    }>;
    pgStatGetProgressInfo(this: export_default$l<number>): Setof<{
        from: {
            pid: export_default$10<0 | 1>;
            datid: export_default$I<0 | 1>;
            relid: export_default$I<0 | 1>;
            param1: export_default$Z<0 | 1>;
            param2: export_default$Z<0 | 1>;
            param3: export_default$Z<0 | 1>;
            param4: export_default$Z<0 | 1>;
            param5: export_default$Z<0 | 1>;
            param6: export_default$Z<0 | 1>;
            param7: export_default$Z<0 | 1>;
            param8: export_default$Z<0 | 1>;
            param9: export_default$Z<0 | 1>;
            param10: export_default$Z<0 | 1>;
            param11: export_default$Z<0 | 1>;
            param12: export_default$Z<0 | 1>;
            param13: export_default$Z<0 | 1>;
            param14: export_default$Z<0 | 1>;
            param15: export_default$Z<0 | 1>;
            param16: export_default$Z<0 | 1>;
            param17: export_default$Z<0 | 1>;
            param18: export_default$Z<0 | 1>;
            param19: export_default$Z<0 | 1>;
            param20: export_default$Z<0 | 1>;
        };
    }>;
    pgStatGetReplicationSlot(this: export_default$l<1>): Record$1<1, {
        slot_name: export_default$l<1>;
        spill_txns: export_default$Z<1>;
        spill_count: export_default$Z<1>;
        spill_bytes: export_default$Z<1>;
        stream_txns: export_default$Z<1>;
        stream_count: export_default$Z<1>;
        stream_bytes: export_default$Z<1>;
        total_txns: export_default$Z<1>;
        total_bytes: export_default$Z<1>;
        stats_reset: export_default$h<1>;
    }>;
    pgStatGetReplicationSlot(this: export_default$l<0 | 1>): Record$1<0 | 1, {
        slot_name: export_default$l<0 | 1>;
        spill_txns: export_default$Z<0 | 1>;
        spill_count: export_default$Z<0 | 1>;
        spill_bytes: export_default$Z<0 | 1>;
        stream_txns: export_default$Z<0 | 1>;
        stream_count: export_default$Z<0 | 1>;
        stream_bytes: export_default$Z<0 | 1>;
        total_txns: export_default$Z<0 | 1>;
        total_bytes: export_default$Z<0 | 1>;
        stats_reset: export_default$h<0 | 1>;
    }>;
    pgStatGetReplicationSlot(this: export_default$l<number>): Record$1<0 | 1, {
        slot_name: export_default$l<0 | 1>;
        spill_txns: export_default$Z<0 | 1>;
        spill_count: export_default$Z<0 | 1>;
        spill_bytes: export_default$Z<0 | 1>;
        stream_txns: export_default$Z<0 | 1>;
        stream_count: export_default$Z<0 | 1>;
        stream_bytes: export_default$Z<0 | 1>;
        total_txns: export_default$Z<0 | 1>;
        total_bytes: export_default$Z<0 | 1>;
        stats_reset: export_default$h<0 | 1>;
    }>;
    pgStatHaveStats(this: export_default$l<1>, a1: export_default$I<1>, a2: export_default$I<1>): export_default$1g<1>;
    pgStatHaveStats(this: export_default$l<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$I<0 | 1>): export_default$1g<0 | 1>;
    pgStatHaveStats(this: export_default$l<number>, a1: export_default$I<number>, a2: export_default$I<number>): export_default$1g<0 | 1>;
    pgStatResetReplicationSlot(this: export_default$l<1>): export_default$4<1>;
    pgStatResetReplicationSlot(this: export_default$l<0 | 1>): export_default$4<0 | 1>;
    pgStatResetReplicationSlot(this: export_default$l<number>): export_default$4<0 | 1>;
    pgStatResetShared(this: export_default$l<1>): export_default$4<1>;
    pgStatResetShared(this: export_default$l<0 | 1>): export_default$4<0 | 1>;
    pgStatResetShared(this: export_default$l<number>): export_default$4<0 | 1>;
    pgStatResetSlru(this: export_default$l<1>): export_default$4<1>;
    pgStatResetSlru(this: export_default$l<0 | 1>): export_default$4<0 | 1>;
    pgStatResetSlru(this: export_default$l<number>): export_default$4<0 | 1>;
    phrasetoTsquery(this: export_default$l<1>): export_default$d<1>;
    phrasetoTsquery(this: export_default$l<0 | 1>): export_default$d<0 | 1>;
    phrasetoTsquery(this: export_default$l<number>): export_default$d<0 | 1>;
    plaintoTsquery(this: export_default$l<1>): export_default$d<1>;
    plaintoTsquery(this: export_default$l<0 | 1>): export_default$d<0 | 1>;
    plaintoTsquery(this: export_default$l<number>): export_default$d<0 | 1>;
    position(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    position(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    position(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    queryToXml(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    queryToXml(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    queryToXml(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    queryToXmlAndXmlschema(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    queryToXmlAndXmlschema(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    queryToXmlAndXmlschema(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    queryToXmlschema(this: export_default$l<1>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1<1>;
    queryToXmlschema(this: export_default$l<0 | 1>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    queryToXmlschema(this: export_default$l<number>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1<0 | 1>;
    quoteIdent(this: export_default$l<1>): export_default$l<1>;
    quoteIdent(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    quoteIdent(this: export_default$l<number>): export_default$l<0 | 1>;
    quoteLiteral(this: export_default$l<1>): export_default$l<1>;
    quoteLiteral(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    quoteLiteral(this: export_default$l<number>): export_default$l<0 | 1>;
    quoteNullable(this: export_default$l<1>): export_default$l<1>;
    quoteNullable(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    quoteNullable(this: export_default$l<number>): export_default$l<0 | 1>;
    regclass(this: export_default$l<1>): export_default$w<1>;
    regclass(this: export_default$l<0 | 1>): export_default$w<0 | 1>;
    regclass(this: export_default$l<number>): export_default$w<0 | 1>;
    regexpCount(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    regexpCount(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    regexpCount(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    regexpCount(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    regexpCount(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpCount(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpCount(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    regexpCount(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    regexpCount(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    regexpInstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    regexpInstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    regexpInstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    regexpInstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$10<1> | Input<export_default$10<0 | 1>>, a5: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    regexpInstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a5: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$10<number> | Input<export_default$10<0 | 1>>, a5: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$10<1> | Input<export_default$10<0 | 1>>, a5: export_default$l<1> | Input<export_default$l<0 | 1>>, a6: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    regexpInstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a5: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a6: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpInstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$10<number> | Input<export_default$10<0 | 1>>, a5: export_default$l<number> | Input<export_default$l<0 | 1>>, a6: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    regexpLike(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    regexpLike(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    regexpLike(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    regexpLike(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    regexpLike(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    regexpLike(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    regexpMatch(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Array$1<1, export_default$l<0 | 1>>;
    regexpMatch(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    regexpMatch(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    regexpMatch(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): Array$1<1, export_default$l<0 | 1>>;
    regexpMatch(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    regexpMatch(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    regexpMatches(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpMatches(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpMatches(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpMatches(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpMatches(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpMatches(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpReplace(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    regexpReplace(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpReplace(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpReplace(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    regexpReplace(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    regexpReplace(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    regexpReplace(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    regexpReplace(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    regexpReplace(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    regexpReplace(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$10<1> | Input<export_default$10<0 | 1>>, a5: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    regexpReplace(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a5: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpReplace(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$10<number> | Input<export_default$10<0 | 1>>, a5: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpReplace(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    regexpReplace(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpReplace(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpSplitToArray(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Array$1<1, export_default$l<0 | 1>>;
    regexpSplitToArray(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    regexpSplitToArray(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    regexpSplitToArray(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): Array$1<1, export_default$l<0 | 1>>;
    regexpSplitToArray(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    regexpSplitToArray(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    regexpSplitToTable(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpSplitToTable(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpSplitToTable(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpSplitToTable(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpSplitToTable(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpSplitToTable(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    regexpSubstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    regexpSubstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpSubstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpSubstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    regexpSubstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    regexpSubstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    regexpSubstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    regexpSubstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    regexpSubstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    regexpSubstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    regexpSubstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpSubstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    regexpSubstr(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>, a3: export_default$10<1> | Input<export_default$10<0 | 1>>, a4: export_default$l<1> | Input<export_default$l<0 | 1>>, a5: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    regexpSubstr(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a3: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a4: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a5: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    regexpSubstr(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>, a3: export_default$10<number> | Input<export_default$10<0 | 1>>, a4: export_default$l<number> | Input<export_default$l<0 | 1>>, a5: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    repeat(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    repeat(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    repeat(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    replace(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    replace(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    replace(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    reverse(this: export_default$l<1>): export_default$l<1>;
    reverse(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    reverse(this: export_default$l<number>): export_default$l<0 | 1>;
    right(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    right(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    right(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    rowSecurityActive(this: export_default$l<1>): export_default$1g<1>;
    rowSecurityActive(this: export_default$l<0 | 1>): export_default$1g<0 | 1>;
    rowSecurityActive(this: export_default$l<number>): export_default$1g<0 | 1>;
    rpad(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    rpad(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    rpad(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    rpad(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    rpad(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    rpad(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    rtrim(this: export_default$l<1>): export_default$l<1>;
    rtrim(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    rtrim(this: export_default$l<number>): export_default$l<0 | 1>;
    rtrim(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    rtrim(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    rtrim(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    setConfig(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$l<1>;
    setConfig(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    setConfig(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$l<0 | 1>;
    similarEscape(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    similarEscape(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    similarEscape(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    similarToEscape(this: export_default$l<1>): export_default$l<1>;
    similarToEscape(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    similarToEscape(this: export_default$l<number>): export_default$l<0 | 1>;
    similarToEscape(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    similarToEscape(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    similarToEscape(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    splitPart(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    splitPart(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    splitPart(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    startsWith(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    startsWith(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    startsWith(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    stringAgg(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    stringToArray(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Array$1<1, export_default$l<0 | 1>>;
    stringToArray(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    stringToArray(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    stringToArray(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): Array$1<1, export_default$l<0 | 1>>;
    stringToArray(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    stringToArray(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): Array$1<0 | 1, export_default$l<0 | 1>>;
    stringToTable(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    stringToTable(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    stringToTable(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    stringToTable(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    stringToTable(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    stringToTable(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    strpos(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$10<1>;
    strpos(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    strpos(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$10<0 | 1>;
    substr(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    substr(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    substr(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    substr(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    substr(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    substr(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    substring(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    substring(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    substring(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    substring(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    substring(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    substring(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    substring(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    substring(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    substring(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    substring(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    substring(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    substring(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    textGe(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textGe(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textGe(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textGt(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textGt(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textGt(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textLarger(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    textLarger(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    textLarger(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    textLe(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textLe(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textLe(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textLt(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textLt(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textLt(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textPatternGe(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textPatternGe(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textPatternGe(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textPatternGt(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textPatternGt(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textPatternGt(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textPatternLe(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textPatternLe(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textPatternLe(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textPatternLt(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textPatternLt(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textPatternLt(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textSmaller(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    textSmaller(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    textSmaller(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    textanycat<T extends Any>(this: export_default$l<1>, a1: T | Input<T>): export_default$l<1>;
    textanycat<T extends Any>(this: export_default$l<0 | 1>, a1: T | Input<T>): export_default$l<0 | 1>;
    textanycat<T extends Any>(this: export_default$l<number>, a1: T | Input<T>): export_default$l<0 | 1>;
    textcat(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    textcat(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    textcat(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    texteq(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    texteq(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    texteq(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    texteqname(this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    texteqname(this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    texteqname(this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    textgename(this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    textgename(this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    textgename(this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    textgtname(this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    textgtname(this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    textgtname(this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    texticlike(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    texticlike(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    texticlike(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    texticnlike(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    texticnlike(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    texticnlike(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    texticregexeq(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    texticregexeq(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    texticregexeq(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    texticregexne(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    texticregexne(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    texticregexne(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textlen(this: export_default$l<1>): export_default$10<1>;
    textlen(this: export_default$l<0 | 1>): export_default$10<0 | 1>;
    textlen(this: export_default$l<number>): export_default$10<0 | 1>;
    textlename(this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    textlename(this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    textlename(this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    textlike(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textlike(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textlike(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textltname(this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    textltname(this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    textltname(this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    textne(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textne(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textne(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textnename(this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    textnename(this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    textnename(this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    textnlike(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textnlike(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textnlike(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textregexeq(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textregexeq(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textregexeq(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textregexne(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    textregexne(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    textregexne(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    timezone(this: export_default$l<1>, a1: export_default$h<1>): export_default$i<1>;
    timezone(this: export_default$l<0 | 1>, a1: export_default$h<0 | 1>): export_default$i<0 | 1>;
    timezone(this: export_default$l<number>, a1: export_default$h<number>): export_default$i<0 | 1>;
    timezone(this: export_default$l<1>, a1: export_default$i<1>): export_default$h<1>;
    timezone(this: export_default$l<0 | 1>, a1: export_default$i<0 | 1>): export_default$h<0 | 1>;
    timezone(this: export_default$l<number>, a1: export_default$i<number>): export_default$h<0 | 1>;
    timezone(this: export_default$l<1>, a1: export_default$g<1>): export_default$g<1>;
    timezone(this: export_default$l<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
    timezone(this: export_default$l<number>, a1: export_default$g<number>): export_default$g<0 | 1>;
    toAscii(this: export_default$l<1>): export_default$l<1>;
    toAscii(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    toAscii(this: export_default$l<number>): export_default$l<0 | 1>;
    toAscii(this: export_default$l<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$l<1>;
    toAscii(this: export_default$l<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    toAscii(this: export_default$l<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$l<0 | 1>;
    toAscii(this: export_default$l<1>, a1: export_default$M<1>): export_default$l<1>;
    toAscii(this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$l<0 | 1>;
    toAscii(this: export_default$l<number>, a1: export_default$M<number>): export_default$l<0 | 1>;
    toDate(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$18<1>;
    toDate(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$18<0 | 1>;
    toDate(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$18<0 | 1>;
    toNumber(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$L<1>;
    toNumber(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$L<0 | 1>;
    toNumber(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$L<0 | 1>;
    toRegclass(this: export_default$l<1>): export_default$w<1>;
    toRegclass(this: export_default$l<0 | 1>): export_default$w<0 | 1>;
    toRegclass(this: export_default$l<number>): export_default$w<0 | 1>;
    toRegcollation(this: export_default$l<1>): export_default$v<1>;
    toRegcollation(this: export_default$l<0 | 1>): export_default$v<0 | 1>;
    toRegcollation(this: export_default$l<number>): export_default$v<0 | 1>;
    toRegnamespace(this: export_default$l<1>): export_default$s<1>;
    toRegnamespace(this: export_default$l<0 | 1>): export_default$s<0 | 1>;
    toRegnamespace(this: export_default$l<number>): export_default$s<0 | 1>;
    toRegoper(this: export_default$l<1>): export_default$r<1>;
    toRegoper(this: export_default$l<0 | 1>): export_default$r<0 | 1>;
    toRegoper(this: export_default$l<number>): export_default$r<0 | 1>;
    toRegoperator(this: export_default$l<1>): export_default$q<1>;
    toRegoperator(this: export_default$l<0 | 1>): export_default$q<0 | 1>;
    toRegoperator(this: export_default$l<number>): export_default$q<0 | 1>;
    toRegproc(this: export_default$l<1>): export_default$p<1>;
    toRegproc(this: export_default$l<0 | 1>): export_default$p<0 | 1>;
    toRegproc(this: export_default$l<number>): export_default$p<0 | 1>;
    toRegprocedure(this: export_default$l<1>): export_default$o<1>;
    toRegprocedure(this: export_default$l<0 | 1>): export_default$o<0 | 1>;
    toRegprocedure(this: export_default$l<number>): export_default$o<0 | 1>;
    toRegrole(this: export_default$l<1>): export_default$n<1>;
    toRegrole(this: export_default$l<0 | 1>): export_default$n<0 | 1>;
    toRegrole(this: export_default$l<number>): export_default$n<0 | 1>;
    toRegtype(this: export_default$l<1>): export_default$m<1>;
    toRegtype(this: export_default$l<0 | 1>): export_default$m<0 | 1>;
    toRegtype(this: export_default$l<number>): export_default$m<0 | 1>;
    toRegtypemod(this: export_default$l<1>): export_default$10<1>;
    toRegtypemod(this: export_default$l<0 | 1>): export_default$10<0 | 1>;
    toRegtypemod(this: export_default$l<number>): export_default$10<0 | 1>;
    toTimestamp(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$h<1>;
    toTimestamp(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$h<0 | 1>;
    toTimestamp(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$h<0 | 1>;
    toTsquery(this: export_default$l<1>): export_default$d<1>;
    toTsquery(this: export_default$l<0 | 1>): export_default$d<0 | 1>;
    toTsquery(this: export_default$l<number>): export_default$d<0 | 1>;
    toTsvector(this: export_default$l<1>): export_default$9<1>;
    toTsvector(this: export_default$l<0 | 1>): export_default$9<0 | 1>;
    toTsvector(this: export_default$l<number>): export_default$9<0 | 1>;
    translate(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    translate(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    translate(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    tsDebug(this: export_default$l<1>): Setof<{
        from: {
            alias: export_default$l<1>;
            description: export_default$l<1>;
            token: export_default$l<1>;
            dictionaries: Array$1<1, export_default$t<0 | 1>>;
            dictionary: export_default$t<1>;
            lexemes: Array$1<1, export_default$l<0 | 1>>;
        };
    }>;
    tsDebug(this: export_default$l<0 | 1>): Setof<{
        from: {
            alias: export_default$l<0 | 1>;
            description: export_default$l<0 | 1>;
            token: export_default$l<0 | 1>;
            dictionaries: Array$1<0 | 1, export_default$t<0 | 1>>;
            dictionary: export_default$t<0 | 1>;
            lexemes: Array$1<0 | 1, export_default$l<0 | 1>>;
        };
    }>;
    tsDebug(this: export_default$l<number>): Setof<{
        from: {
            alias: export_default$l<0 | 1>;
            description: export_default$l<0 | 1>;
            token: export_default$l<0 | 1>;
            dictionaries: Array$1<0 | 1, export_default$t<0 | 1>>;
            dictionary: export_default$t<0 | 1>;
            lexemes: Array$1<0 | 1, export_default$l<0 | 1>>;
        };
    }>;
    tsHeadline(this: export_default$l<1>, a1: export_default$d<1>): export_default$l<1>;
    tsHeadline(this: export_default$l<0 | 1>, a1: export_default$d<0 | 1>): export_default$l<0 | 1>;
    tsHeadline(this: export_default$l<number>, a1: export_default$d<number>): export_default$l<0 | 1>;
    tsHeadline(this: export_default$l<1>, a1: export_default$d<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    tsHeadline(this: export_default$l<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    tsHeadline(this: export_default$l<number>, a1: export_default$d<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    tsMatchTq(this: export_default$l<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsMatchTq(this: export_default$l<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsMatchTq(this: export_default$l<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsMatchTt(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    tsMatchTt(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    tsMatchTt(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    tsParse(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            tokid: export_default$10<1>;
            token: export_default$l<1>;
        };
    }>;
    tsParse(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            tokid: export_default$10<0 | 1>;
            token: export_default$l<0 | 1>;
        };
    }>;
    tsParse(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            tokid: export_default$10<0 | 1>;
            token: export_default$l<0 | 1>;
        };
    }>;
    tsStat(this: export_default$l<1>): Setof<{
        from: {
            word: export_default$l<1>;
            ndoc: export_default$10<1>;
            nentry: export_default$10<1>;
        };
    }>;
    tsStat(this: export_default$l<0 | 1>): Setof<{
        from: {
            word: export_default$l<0 | 1>;
            ndoc: export_default$10<0 | 1>;
            nentry: export_default$10<0 | 1>;
        };
    }>;
    tsStat(this: export_default$l<number>): Setof<{
        from: {
            word: export_default$l<0 | 1>;
            ndoc: export_default$10<0 | 1>;
            nentry: export_default$10<0 | 1>;
        };
    }>;
    tsStat(this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            word: export_default$l<1>;
            ndoc: export_default$10<1>;
            nentry: export_default$10<1>;
        };
    }>;
    tsStat(this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            word: export_default$l<0 | 1>;
            ndoc: export_default$10<0 | 1>;
            nentry: export_default$10<0 | 1>;
        };
    }>;
    tsStat(this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {
            word: export_default$l<0 | 1>;
            ndoc: export_default$10<0 | 1>;
            nentry: export_default$10<0 | 1>;
        };
    }>;
    tsTokenType(this: export_default$l<1>): Setof<{
        from: {
            tokid: export_default$10<1>;
            alias: export_default$l<1>;
            description: export_default$l<1>;
        };
    }>;
    tsTokenType(this: export_default$l<0 | 1>): Setof<{
        from: {
            tokid: export_default$10<0 | 1>;
            alias: export_default$l<0 | 1>;
            description: export_default$l<0 | 1>;
        };
    }>;
    tsTokenType(this: export_default$l<number>): Setof<{
        from: {
            tokid: export_default$10<0 | 1>;
            alias: export_default$l<0 | 1>;
            description: export_default$l<0 | 1>;
        };
    }>;
    unicodeAssigned(this: export_default$l<1>): export_default$1g<1>;
    unicodeAssigned(this: export_default$l<0 | 1>): export_default$1g<0 | 1>;
    unicodeAssigned(this: export_default$l<number>): export_default$1g<0 | 1>;
    unistr(this: export_default$l<1>): export_default$l<1>;
    unistr(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    unistr(this: export_default$l<number>): export_default$l<0 | 1>;
    upper(this: export_default$l<1>): export_default$l<1>;
    upper(this: export_default$l<0 | 1>): export_default$l<0 | 1>;
    upper(this: export_default$l<number>): export_default$l<0 | 1>;
    websearchToTsquery(this: export_default$l<1>): export_default$d<1>;
    websearchToTsquery(this: export_default$l<0 | 1>): export_default$d<0 | 1>;
    websearchToTsquery(this: export_default$l<number>): export_default$d<0 | 1>;
    xml(this: export_default$l<1>): export_default$1<1>;
    xml(this: export_default$l<0 | 1>): export_default$1<0 | 1>;
    xml(this: export_default$l<number>): export_default$1<0 | 1>;
    xmlIsWellFormed(this: export_default$l<1>): export_default$1g<1>;
    xmlIsWellFormed(this: export_default$l<0 | 1>): export_default$1g<0 | 1>;
    xmlIsWellFormed(this: export_default$l<number>): export_default$1g<0 | 1>;
    xmlIsWellFormedContent(this: export_default$l<1>): export_default$1g<1>;
    xmlIsWellFormedContent(this: export_default$l<0 | 1>): export_default$1g<0 | 1>;
    xmlIsWellFormedContent(this: export_default$l<number>): export_default$1g<0 | 1>;
    xmlIsWellFormedDocument(this: export_default$l<1>): export_default$1g<1>;
    xmlIsWellFormedDocument(this: export_default$l<0 | 1>): export_default$1g<0 | 1>;
    xmlIsWellFormedDocument(this: export_default$l<number>): export_default$1g<0 | 1>;
    xmlcomment(this: export_default$l<1>): export_default$1<1>;
    xmlcomment(this: export_default$l<0 | 1>): export_default$1<0 | 1>;
    xmlcomment(this: export_default$l<number>): export_default$1<0 | 1>;
    xmlexists(this: export_default$l<1>, a1: export_default$1<1>): export_default$1g<1>;
    xmlexists(this: export_default$l<0 | 1>, a1: export_default$1<0 | 1>): export_default$1g<0 | 1>;
    xmlexists(this: export_default$l<number>, a1: export_default$1<number>): export_default$1g<0 | 1>;
    xmltext(this: export_default$l<1>): export_default$1<1>;
    xmltext(this: export_default$l<0 | 1>): export_default$1<0 | 1>;
    xmltext(this: export_default$l<number>): export_default$1<0 | 1>;
    xpath(this: export_default$l<1>, a1: export_default$1<1>): Array$1<1, export_default$1<0 | 1>>;
    xpath(this: export_default$l<0 | 1>, a1: export_default$1<0 | 1>): Array$1<0 | 1, export_default$1<0 | 1>>;
    xpath(this: export_default$l<number>, a1: export_default$1<number>): Array$1<0 | 1, export_default$1<0 | 1>>;
    xpath(this: export_default$l<1>, a1: export_default$1<1>, a2: Array$1<1, export_default$l<0 | 1>>): Array$1<1, export_default$1<0 | 1>>;
    xpath(this: export_default$l<0 | 1>, a1: export_default$1<0 | 1>, a2: Array$1<0 | 1, export_default$l<0 | 1>>): Array$1<0 | 1, export_default$1<0 | 1>>;
    xpath(this: export_default$l<number>, a1: export_default$1<number>, a2: Array$1<number, export_default$l<0 | 1>>): Array$1<0 | 1, export_default$1<0 | 1>>;
    xpathExists(this: export_default$l<1>, a1: export_default$1<1>): export_default$1g<1>;
    xpathExists(this: export_default$l<0 | 1>, a1: export_default$1<0 | 1>): export_default$1g<0 | 1>;
    xpathExists(this: export_default$l<number>, a1: export_default$1<number>): export_default$1g<0 | 1>;
    xpathExists(this: export_default$l<1>, a1: export_default$1<1>, a2: Array$1<1, export_default$l<0 | 1>>): export_default$1g<1>;
    xpathExists(this: export_default$l<0 | 1>, a1: export_default$1<0 | 1>, a2: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    xpathExists(this: export_default$l<number>, a1: export_default$1<number>, a2: Array$1<number, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["^@"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["^@"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["^@"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    [">="](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    [">="](this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    [">="](this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    [">"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    [">"](this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    [">"](this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["<="](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<="](this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    ["<="](this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["<"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<"](this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    ["<"](this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    ["~>=~"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~>=~"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~>=~"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~>~"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~>~"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~>~"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~<=~"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~<=~"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~<=~"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~<~"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~<~"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~<~"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    ["="](this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    ["~~*"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~~*"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~~*"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~*"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~~*"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~*"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~*"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~*"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~*"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~*"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~*"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~*"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~~"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~~"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~~"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$l<1>, a1: export_default$M<1>): export_default$1g<1>;
    ["<>"](this: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$l<number>, a1: export_default$M<number>): export_default$1g<0 | 1>;
    ["!~~"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~~"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~~"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["~"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["~"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["!~"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["!~"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["@@"](this: export_default$l<1>, a1: export_default$d<1>): export_default$1g<1>;
    ["@@"](this: export_default$l<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    ["@@"](this: export_default$l<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    ["@@"](this: export_default$l<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    ["@@"](this: export_default$l<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    ["@@"](this: export_default$l<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
}

type Parsed$j = string;
type SerializeParam$j = string;
declare class export_default$k<N extends number> extends Any<Parsed$j, N> {
    static new(v: SerializeParam$j): export_default$k<1>;
    static new(v: null): export_default$k<0>;
    static new(v: Expression): export_default$k<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$k<number> | undefined;
    bttidcmp(this: export_default$k<1>, a1: export_default$k<1>): export_default$10<1>;
    bttidcmp(this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$10<0 | 1>;
    bttidcmp(this: export_default$k<number>, a1: export_default$k<number>): export_default$10<0 | 1>;
    hashtid(this: export_default$k<1>): export_default$10<1>;
    hashtid(this: export_default$k<0 | 1>): export_default$10<0 | 1>;
    hashtid(this: export_default$k<number>): export_default$10<0 | 1>;
    hashtidextended(this: export_default$k<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashtidextended(this: export_default$k<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashtidextended(this: export_default$k<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    max(this: export_default$k<number>): export_default$k<0 | 1>;
    tideq(this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    tideq(this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    tideq(this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    tidge(this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    tidge(this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    tidge(this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    tidgt(this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    tidgt(this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    tidgt(this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    tidlarger(this: export_default$k<1>, a1: export_default$k<1>): export_default$k<1>;
    tidlarger(this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$k<0 | 1>;
    tidlarger(this: export_default$k<number>, a1: export_default$k<number>): export_default$k<0 | 1>;
    tidle(this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    tidle(this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    tidle(this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    tidlt(this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    tidlt(this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    tidlt(this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    tidne(this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    tidne(this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    tidne(this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    tidsmaller(this: export_default$k<1>, a1: export_default$k<1>): export_default$k<1>;
    tidsmaller(this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$k<0 | 1>;
    tidsmaller(this: export_default$k<number>, a1: export_default$k<number>): export_default$k<0 | 1>;
    ["="](this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    ["="](this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    [">="](this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    [">"](this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    ["<="](this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    ["<"](this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$k<1>, a1: export_default$k<1>): export_default$1g<1>;
    ["<>"](this: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$k<number>, a1: export_default$k<number>): export_default$1g<0 | 1>;
}

type Parsed$i = string;
type SerializeParam$i = string;
declare class export_default$j<N extends number> extends Any<Parsed$i, N> {
    static new(v: SerializeParam$i): export_default$j<1>;
    static new(v: null): export_default$j<0>;
    static new(v: Expression): export_default$j<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$j<number> | undefined;
    inRange(this: export_default$j<1>, a1: export_default$j<1>, a2: export_default$W<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$j<number>, a1: export_default$j<number>, a2: export_default$W<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    interval(this: export_default$j<1>): export_default$W<1>;
    interval(this: export_default$j<0 | 1>): export_default$W<0 | 1>;
    interval(this: export_default$j<number>): export_default$W<0 | 1>;
    max(this: export_default$j<number>): export_default$j<0 | 1>;
    overlaps(this: export_default$j<1>, a1: export_default$W<1>, a2: export_default$j<1>, a3: export_default$W<1>): export_default$1g<1>;
    overlaps(this: export_default$j<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$j<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$j<number>, a1: export_default$W<number>, a2: export_default$j<number>, a3: export_default$W<number>): export_default$1g<0 | 1>;
    overlaps(this: export_default$j<1>, a1: export_default$W<1>, a2: export_default$j<1>, a3: export_default$j<1>): export_default$1g<1>;
    overlaps(this: export_default$j<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$j<0 | 1>, a3: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$j<number>, a1: export_default$W<number>, a2: export_default$j<number>, a3: export_default$j<number>): export_default$1g<0 | 1>;
    overlaps(this: export_default$j<1>, a1: export_default$j<1>, a2: export_default$j<1>, a3: export_default$W<1>): export_default$1g<1>;
    overlaps(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>, a2: export_default$j<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$j<number>, a1: export_default$j<number>, a2: export_default$j<number>, a3: export_default$W<number>): export_default$1g<0 | 1>;
    overlaps(this: export_default$j<1>, a1: export_default$j<1>, a2: export_default$j<1>, a3: export_default$j<1>): export_default$1g<1>;
    overlaps(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>, a2: export_default$j<0 | 1>, a3: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$j<number>, a1: export_default$j<number>, a2: export_default$j<number>, a3: export_default$j<number>): export_default$1g<0 | 1>;
    time(this: export_default$j<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$j<1>;
    time(this: export_default$j<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$j<0 | 1>;
    time(this: export_default$j<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$j<0 | 1>;
    timeCmp(this: export_default$j<1>, a1: export_default$j<1>): export_default$10<1>;
    timeCmp(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$10<0 | 1>;
    timeCmp(this: export_default$j<number>, a1: export_default$j<number>): export_default$10<0 | 1>;
    timeEq(this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    timeEq(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    timeEq(this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    timeGe(this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    timeGe(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    timeGe(this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    timeGt(this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    timeGt(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    timeGt(this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    timeHash(this: export_default$j<1>): export_default$10<1>;
    timeHash(this: export_default$j<0 | 1>): export_default$10<0 | 1>;
    timeHash(this: export_default$j<number>): export_default$10<0 | 1>;
    timeHashExtended(this: export_default$j<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    timeHashExtended(this: export_default$j<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    timeHashExtended(this: export_default$j<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    timeLarger(this: export_default$j<1>, a1: export_default$j<1>): export_default$j<1>;
    timeLarger(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$j<0 | 1>;
    timeLarger(this: export_default$j<number>, a1: export_default$j<number>): export_default$j<0 | 1>;
    timeLe(this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    timeLe(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    timeLe(this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    timeLt(this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    timeLt(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    timeLt(this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    timeMiInterval(this: export_default$j<1>, a1: export_default$W<1>): export_default$j<1>;
    timeMiInterval(this: export_default$j<0 | 1>, a1: export_default$W<0 | 1>): export_default$j<0 | 1>;
    timeMiInterval(this: export_default$j<number>, a1: export_default$W<number>): export_default$j<0 | 1>;
    timeMiTime(this: export_default$j<1>, a1: export_default$j<1>): export_default$W<1>;
    timeMiTime(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$W<0 | 1>;
    timeMiTime(this: export_default$j<number>, a1: export_default$j<number>): export_default$W<0 | 1>;
    timeNe(this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    timeNe(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    timeNe(this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    timePlInterval(this: export_default$j<1>, a1: export_default$W<1>): export_default$j<1>;
    timePlInterval(this: export_default$j<0 | 1>, a1: export_default$W<0 | 1>): export_default$j<0 | 1>;
    timePlInterval(this: export_default$j<number>, a1: export_default$W<number>): export_default$j<0 | 1>;
    timeSmaller(this: export_default$j<1>, a1: export_default$j<1>): export_default$j<1>;
    timeSmaller(this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$j<0 | 1>;
    timeSmaller(this: export_default$j<number>, a1: export_default$j<number>): export_default$j<0 | 1>;
    timedatePl(this: export_default$j<1>, a1: export_default$18<1>): export_default$i<1>;
    timedatePl(this: export_default$j<0 | 1>, a1: export_default$18<0 | 1>): export_default$i<0 | 1>;
    timedatePl(this: export_default$j<number>, a1: export_default$18<number>): export_default$i<0 | 1>;
    timetz(this: export_default$j<1>): export_default$g<1>;
    timetz(this: export_default$j<0 | 1>): export_default$g<0 | 1>;
    timetz(this: export_default$j<number>): export_default$g<0 | 1>;
    ["="](this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    ["="](this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    [">="](this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    [">"](this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    ["<="](this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    ["<"](this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$j<1>, a1: export_default$W<1>): export_default$j<1>;
    ["-"](this: export_default$j<0 | 1>, a1: export_default$W<0 | 1>): export_default$j<0 | 1>;
    ["-"](this: export_default$j<number>, a1: export_default$W<number>): export_default$j<0 | 1>;
    ["-"](this: export_default$j<1>, a1: export_default$j<1>): export_default$W<1>;
    ["-"](this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$W<0 | 1>;
    ["-"](this: export_default$j<number>, a1: export_default$j<number>): export_default$W<0 | 1>;
    ["<>"](this: export_default$j<1>, a1: export_default$j<1>): export_default$1g<1>;
    ["<>"](this: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$j<number>, a1: export_default$j<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$j<1>, a1: export_default$W<1>): export_default$j<1>;
    ["+"](this: export_default$j<0 | 1>, a1: export_default$W<0 | 1>): export_default$j<0 | 1>;
    ["+"](this: export_default$j<number>, a1: export_default$W<number>): export_default$j<0 | 1>;
    ["+"](this: export_default$j<1>, a1: export_default$18<1>): export_default$i<1>;
    ["+"](this: export_default$j<0 | 1>, a1: export_default$18<0 | 1>): export_default$i<0 | 1>;
    ["+"](this: export_default$j<number>, a1: export_default$18<number>): export_default$i<0 | 1>;
}

type Parsed$h = string;
type SerializeParam$h = string;
declare class export_default$i<N extends number> extends Any<Parsed$h, N> {
    static new(v: SerializeParam$h): export_default$i<1>;
    static new(v: null): export_default$i<0>;
    static new(v: Expression): export_default$i<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$i<number> | undefined;
    age(this: export_default$i<1>): export_default$W<1>;
    age(this: export_default$i<0 | 1>): export_default$W<0 | 1>;
    age(this: export_default$i<number>): export_default$W<0 | 1>;
    age(this: export_default$i<1>, a1: export_default$i<1>): export_default$W<1>;
    age(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$W<0 | 1>;
    age(this: export_default$i<number>, a1: export_default$i<number>): export_default$W<0 | 1>;
    date(this: export_default$i<1>): export_default$18<1>;
    date(this: export_default$i<0 | 1>): export_default$18<0 | 1>;
    date(this: export_default$i<number>): export_default$18<0 | 1>;
    generateSeries(this: export_default$i<1>, a1: export_default$i<1>, a2: export_default$W<1>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$W<0 | 1>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$i<number>, a1: export_default$i<number>, a2: export_default$W<number>): Setof<{
        from: {};
    }>;
    inRange(this: export_default$i<1>, a1: export_default$i<1>, a2: export_default$W<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$i<number>, a1: export_default$i<number>, a2: export_default$W<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    isfinite(this: export_default$i<1>): export_default$1g<1>;
    isfinite(this: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    isfinite(this: export_default$i<number>): export_default$1g<0 | 1>;
    max(this: export_default$i<number>): export_default$i<0 | 1>;
    overlaps(this: export_default$i<1>, a1: export_default$W<1>, a2: export_default$i<1>, a3: export_default$W<1>): export_default$1g<1>;
    overlaps(this: export_default$i<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$i<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$i<number>, a1: export_default$W<number>, a2: export_default$i<number>, a3: export_default$W<number>): export_default$1g<0 | 1>;
    overlaps(this: export_default$i<1>, a1: export_default$W<1>, a2: export_default$i<1>, a3: export_default$i<1>): export_default$1g<1>;
    overlaps(this: export_default$i<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$i<0 | 1>, a3: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$i<number>, a1: export_default$W<number>, a2: export_default$i<number>, a3: export_default$i<number>): export_default$1g<0 | 1>;
    overlaps(this: export_default$i<1>, a1: export_default$i<1>, a2: export_default$i<1>, a3: export_default$W<1>): export_default$1g<1>;
    overlaps(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$i<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$i<number>, a1: export_default$i<number>, a2: export_default$i<number>, a3: export_default$W<number>): export_default$1g<0 | 1>;
    overlaps(this: export_default$i<1>, a1: export_default$i<1>, a2: export_default$i<1>, a3: export_default$i<1>): export_default$1g<1>;
    overlaps(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$i<0 | 1>, a3: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$i<number>, a1: export_default$i<number>, a2: export_default$i<number>, a3: export_default$i<number>): export_default$1g<0 | 1>;
    time(this: export_default$i<1>): export_default$j<1>;
    time(this: export_default$i<0 | 1>): export_default$j<0 | 1>;
    time(this: export_default$i<number>): export_default$j<0 | 1>;
    timestamp(this: export_default$i<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$i<1>;
    timestamp(this: export_default$i<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$i<0 | 1>;
    timestamp(this: export_default$i<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$i<0 | 1>;
    timestampCmp(this: export_default$i<1>, a1: export_default$i<1>): export_default$10<1>;
    timestampCmp(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$10<0 | 1>;
    timestampCmp(this: export_default$i<number>, a1: export_default$i<number>): export_default$10<0 | 1>;
    timestampCmpDate(this: export_default$i<1>, a1: export_default$18<1>): export_default$10<1>;
    timestampCmpDate(this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$10<0 | 1>;
    timestampCmpDate(this: export_default$i<number>, a1: export_default$18<number>): export_default$10<0 | 1>;
    timestampCmpTimestamptz(this: export_default$i<1>, a1: export_default$h<1>): export_default$10<1>;
    timestampCmpTimestamptz(this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$10<0 | 1>;
    timestampCmpTimestamptz(this: export_default$i<number>, a1: export_default$h<number>): export_default$10<0 | 1>;
    timestampEq(this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestampEq(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestampEq(this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestampEqDate(this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestampEqDate(this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestampEqDate(this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestampEqTimestamptz(this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestampEqTimestamptz(this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestampEqTimestamptz(this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestampGe(this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestampGe(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestampGe(this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestampGeDate(this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestampGeDate(this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestampGeDate(this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestampGeTimestamptz(this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestampGeTimestamptz(this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestampGeTimestamptz(this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestampGt(this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestampGt(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestampGt(this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestampGtDate(this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestampGtDate(this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestampGtDate(this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestampGtTimestamptz(this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestampGtTimestamptz(this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestampGtTimestamptz(this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestampHash(this: export_default$i<1>): export_default$10<1>;
    timestampHash(this: export_default$i<0 | 1>): export_default$10<0 | 1>;
    timestampHash(this: export_default$i<number>): export_default$10<0 | 1>;
    timestampHashExtended(this: export_default$i<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    timestampHashExtended(this: export_default$i<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    timestampHashExtended(this: export_default$i<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    timestampLarger(this: export_default$i<1>, a1: export_default$i<1>): export_default$i<1>;
    timestampLarger(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$i<0 | 1>;
    timestampLarger(this: export_default$i<number>, a1: export_default$i<number>): export_default$i<0 | 1>;
    timestampLe(this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestampLe(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestampLe(this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestampLeDate(this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestampLeDate(this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestampLeDate(this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestampLeTimestamptz(this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestampLeTimestamptz(this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestampLeTimestamptz(this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestampLt(this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestampLt(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestampLt(this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestampLtDate(this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestampLtDate(this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestampLtDate(this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestampLtTimestamptz(this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestampLtTimestamptz(this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestampLtTimestamptz(this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestampMi(this: export_default$i<1>, a1: export_default$i<1>): export_default$W<1>;
    timestampMi(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$W<0 | 1>;
    timestampMi(this: export_default$i<number>, a1: export_default$i<number>): export_default$W<0 | 1>;
    timestampMiInterval(this: export_default$i<1>, a1: export_default$W<1>): export_default$i<1>;
    timestampMiInterval(this: export_default$i<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
    timestampMiInterval(this: export_default$i<number>, a1: export_default$W<number>): export_default$i<0 | 1>;
    timestampNe(this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestampNe(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestampNe(this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestampNeDate(this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestampNeDate(this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestampNeDate(this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestampNeTimestamptz(this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestampNeTimestamptz(this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestampNeTimestamptz(this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestampPlInterval(this: export_default$i<1>, a1: export_default$W<1>): export_default$i<1>;
    timestampPlInterval(this: export_default$i<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
    timestampPlInterval(this: export_default$i<number>, a1: export_default$W<number>): export_default$i<0 | 1>;
    timestampSmaller(this: export_default$i<1>, a1: export_default$i<1>): export_default$i<1>;
    timestampSmaller(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$i<0 | 1>;
    timestampSmaller(this: export_default$i<number>, a1: export_default$i<number>): export_default$i<0 | 1>;
    timestamptz(this: export_default$i<1>): export_default$h<1>;
    timestamptz(this: export_default$i<0 | 1>): export_default$h<0 | 1>;
    timestamptz(this: export_default$i<number>): export_default$h<0 | 1>;
    timezone(this: export_default$i<1>): export_default$h<1>;
    timezone(this: export_default$i<0 | 1>): export_default$h<0 | 1>;
    timezone(this: export_default$i<number>): export_default$h<0 | 1>;
    toChar(this: export_default$i<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    toChar(this: export_default$i<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toChar(this: export_default$i<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    tsrange(this: export_default$i<1>, a1: export_default$i<1>): export_default$c<1>;
    tsrange(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$c<0 | 1>;
    tsrange(this: export_default$i<number>, a1: export_default$i<number>): export_default$c<0 | 1>;
    tsrange(this: export_default$i<1>, a1: export_default$i<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$c<1>;
    tsrange(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$c<0 | 1>;
    tsrange(this: export_default$i<number>, a1: export_default$i<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$c<0 | 1>;
    tsrangeSubdiff(this: export_default$i<1>, a1: export_default$i<1>): export_default$14<1>;
    tsrangeSubdiff(this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$14<0 | 1>;
    tsrangeSubdiff(this: export_default$i<number>, a1: export_default$i<number>): export_default$14<0 | 1>;
    ["="](this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["="](this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["="](this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["="](this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    [">="](this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    [">="](this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    [">="](this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    [">"](this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    [">"](this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    [">"](this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["<="](this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["<="](this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["<="](this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["<"](this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["<"](this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["<"](this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$i<1>, a1: export_default$i<1>): export_default$W<1>;
    ["-"](this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$W<0 | 1>;
    ["-"](this: export_default$i<number>, a1: export_default$i<number>): export_default$W<0 | 1>;
    ["-"](this: export_default$i<1>, a1: export_default$W<1>): export_default$i<1>;
    ["-"](this: export_default$i<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
    ["-"](this: export_default$i<number>, a1: export_default$W<number>): export_default$i<0 | 1>;
    ["<>"](this: export_default$i<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["<>"](this: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$i<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$i<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["<>"](this: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$i<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$i<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["<>"](this: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$i<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$i<1>, a1: export_default$W<1>): export_default$i<1>;
    ["+"](this: export_default$i<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
    ["+"](this: export_default$i<number>, a1: export_default$W<number>): export_default$i<0 | 1>;
}

type Parsed$g = string;
type SerializeParam$g = string;
declare class export_default$h<N extends number> extends Any<Parsed$g, N> {
    static new(v: SerializeParam$g): export_default$h<1>;
    static new(v: null): export_default$h<0>;
    static new(v: Expression): export_default$h<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$h<number> | undefined;
    age(this: export_default$h<1>): export_default$W<1>;
    age(this: export_default$h<0 | 1>): export_default$W<0 | 1>;
    age(this: export_default$h<number>): export_default$W<0 | 1>;
    age(this: export_default$h<1>, a1: export_default$h<1>): export_default$W<1>;
    age(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$W<0 | 1>;
    age(this: export_default$h<number>, a1: export_default$h<number>): export_default$W<0 | 1>;
    date(this: export_default$h<1>): export_default$18<1>;
    date(this: export_default$h<0 | 1>): export_default$18<0 | 1>;
    date(this: export_default$h<number>): export_default$18<0 | 1>;
    dateAdd(this: export_default$h<1>, a1: export_default$W<1>): export_default$h<1>;
    dateAdd(this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
    dateAdd(this: export_default$h<number>, a1: export_default$W<number>): export_default$h<0 | 1>;
    dateAdd(this: export_default$h<1>, a1: export_default$W<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$h<1>;
    dateAdd(this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$h<0 | 1>;
    dateAdd(this: export_default$h<number>, a1: export_default$W<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$h<0 | 1>;
    dateSubtract(this: export_default$h<1>, a1: export_default$W<1>): export_default$h<1>;
    dateSubtract(this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
    dateSubtract(this: export_default$h<number>, a1: export_default$W<number>): export_default$h<0 | 1>;
    dateSubtract(this: export_default$h<1>, a1: export_default$W<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$h<1>;
    dateSubtract(this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$h<0 | 1>;
    dateSubtract(this: export_default$h<number>, a1: export_default$W<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$h<0 | 1>;
    generateSeries(this: export_default$h<1>, a1: export_default$h<1>, a2: export_default$W<1>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$W<0 | 1>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$h<number>, a1: export_default$h<number>, a2: export_default$W<number>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$h<1>, a1: export_default$h<1>, a2: export_default$W<1>, a3: export_default$l<1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSeries(this: export_default$h<number>, a1: export_default$h<number>, a2: export_default$W<number>, a3: export_default$l<number> | Input<export_default$l<0 | 1>>): Setof<{
        from: {};
    }>;
    inRange(this: export_default$h<1>, a1: export_default$h<1>, a2: export_default$W<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$h<number>, a1: export_default$h<number>, a2: export_default$W<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    isfinite(this: export_default$h<1>): export_default$1g<1>;
    isfinite(this: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    isfinite(this: export_default$h<number>): export_default$1g<0 | 1>;
    max(this: export_default$h<number>): export_default$h<0 | 1>;
    overlaps(this: export_default$h<1>, a1: export_default$W<1>, a2: export_default$h<1>, a3: export_default$W<1>): export_default$1g<1>;
    overlaps(this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$h<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$h<number>, a1: export_default$W<number>, a2: export_default$h<number>, a3: export_default$W<number>): export_default$1g<0 | 1>;
    overlaps(this: export_default$h<1>, a1: export_default$W<1>, a2: export_default$h<1>, a3: export_default$h<1>): export_default$1g<1>;
    overlaps(this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$h<0 | 1>, a3: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$h<number>, a1: export_default$W<number>, a2: export_default$h<number>, a3: export_default$h<number>): export_default$1g<0 | 1>;
    overlaps(this: export_default$h<1>, a1: export_default$h<1>, a2: export_default$h<1>, a3: export_default$W<1>): export_default$1g<1>;
    overlaps(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$h<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$h<number>, a1: export_default$h<number>, a2: export_default$h<number>, a3: export_default$W<number>): export_default$1g<0 | 1>;
    overlaps(this: export_default$h<1>, a1: export_default$h<1>, a2: export_default$h<1>, a3: export_default$h<1>): export_default$1g<1>;
    overlaps(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$h<0 | 1>, a3: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$h<number>, a1: export_default$h<number>, a2: export_default$h<number>, a3: export_default$h<number>): export_default$1g<0 | 1>;
    pgSleepUntil(this: export_default$h<1>): export_default$4<1>;
    pgSleepUntil(this: export_default$h<0 | 1>): export_default$4<0 | 1>;
    pgSleepUntil(this: export_default$h<number>): export_default$4<0 | 1>;
    time(this: export_default$h<1>): export_default$j<1>;
    time(this: export_default$h<0 | 1>): export_default$j<0 | 1>;
    time(this: export_default$h<number>): export_default$j<0 | 1>;
    timestamp(this: export_default$h<1>): export_default$i<1>;
    timestamp(this: export_default$h<0 | 1>): export_default$i<0 | 1>;
    timestamp(this: export_default$h<number>): export_default$i<0 | 1>;
    timestamptz(this: export_default$h<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$h<1>;
    timestamptz(this: export_default$h<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$h<0 | 1>;
    timestamptz(this: export_default$h<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$h<0 | 1>;
    timestamptzCmp(this: export_default$h<1>, a1: export_default$h<1>): export_default$10<1>;
    timestamptzCmp(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$10<0 | 1>;
    timestamptzCmp(this: export_default$h<number>, a1: export_default$h<number>): export_default$10<0 | 1>;
    timestamptzCmpDate(this: export_default$h<1>, a1: export_default$18<1>): export_default$10<1>;
    timestamptzCmpDate(this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$10<0 | 1>;
    timestamptzCmpDate(this: export_default$h<number>, a1: export_default$18<number>): export_default$10<0 | 1>;
    timestamptzCmpTimestamp(this: export_default$h<1>, a1: export_default$i<1>): export_default$10<1>;
    timestamptzCmpTimestamp(this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$10<0 | 1>;
    timestamptzCmpTimestamp(this: export_default$h<number>, a1: export_default$i<number>): export_default$10<0 | 1>;
    timestamptzEq(this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestamptzEq(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestamptzEq(this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestamptzEqDate(this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestamptzEqDate(this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestamptzEqDate(this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestamptzEqTimestamp(this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestamptzEqTimestamp(this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestamptzEqTimestamp(this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestamptzGe(this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestamptzGe(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestamptzGe(this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestamptzGeDate(this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestamptzGeDate(this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestamptzGeDate(this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestamptzGeTimestamp(this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestamptzGeTimestamp(this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestamptzGeTimestamp(this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestamptzGt(this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestamptzGt(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestamptzGt(this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestamptzGtDate(this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestamptzGtDate(this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestamptzGtDate(this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestamptzGtTimestamp(this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestamptzGtTimestamp(this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestamptzGtTimestamp(this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestamptzLarger(this: export_default$h<1>, a1: export_default$h<1>): export_default$h<1>;
    timestamptzLarger(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$h<0 | 1>;
    timestamptzLarger(this: export_default$h<number>, a1: export_default$h<number>): export_default$h<0 | 1>;
    timestamptzLe(this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestamptzLe(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestamptzLe(this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestamptzLeDate(this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestamptzLeDate(this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestamptzLeDate(this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestamptzLeTimestamp(this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestamptzLeTimestamp(this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestamptzLeTimestamp(this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestamptzLt(this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestamptzLt(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestamptzLt(this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestamptzLtDate(this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestamptzLtDate(this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestamptzLtDate(this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestamptzLtTimestamp(this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestamptzLtTimestamp(this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestamptzLtTimestamp(this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestamptzMi(this: export_default$h<1>, a1: export_default$h<1>): export_default$W<1>;
    timestamptzMi(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$W<0 | 1>;
    timestamptzMi(this: export_default$h<number>, a1: export_default$h<number>): export_default$W<0 | 1>;
    timestamptzMiInterval(this: export_default$h<1>, a1: export_default$W<1>): export_default$h<1>;
    timestamptzMiInterval(this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
    timestamptzMiInterval(this: export_default$h<number>, a1: export_default$W<number>): export_default$h<0 | 1>;
    timestamptzNe(this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    timestamptzNe(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    timestamptzNe(this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    timestamptzNeDate(this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    timestamptzNeDate(this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    timestamptzNeDate(this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    timestamptzNeTimestamp(this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    timestamptzNeTimestamp(this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    timestamptzNeTimestamp(this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    timestamptzPlInterval(this: export_default$h<1>, a1: export_default$W<1>): export_default$h<1>;
    timestamptzPlInterval(this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
    timestamptzPlInterval(this: export_default$h<number>, a1: export_default$W<number>): export_default$h<0 | 1>;
    timestamptzSmaller(this: export_default$h<1>, a1: export_default$h<1>): export_default$h<1>;
    timestamptzSmaller(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$h<0 | 1>;
    timestamptzSmaller(this: export_default$h<number>, a1: export_default$h<number>): export_default$h<0 | 1>;
    timetz(this: export_default$h<1>): export_default$g<1>;
    timetz(this: export_default$h<0 | 1>): export_default$g<0 | 1>;
    timetz(this: export_default$h<number>): export_default$g<0 | 1>;
    timezone(this: export_default$h<1>): export_default$i<1>;
    timezone(this: export_default$h<0 | 1>): export_default$i<0 | 1>;
    timezone(this: export_default$h<number>): export_default$i<0 | 1>;
    toChar(this: export_default$h<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    toChar(this: export_default$h<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    toChar(this: export_default$h<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    tstzrange(this: export_default$h<1>, a1: export_default$h<1>): export_default$a<1>;
    tstzrange(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$a<0 | 1>;
    tstzrange(this: export_default$h<number>, a1: export_default$h<number>): export_default$a<0 | 1>;
    tstzrange(this: export_default$h<1>, a1: export_default$h<1>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$a<1>;
    tstzrange(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$a<0 | 1>;
    tstzrange(this: export_default$h<number>, a1: export_default$h<number>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$a<0 | 1>;
    tstzrangeSubdiff(this: export_default$h<1>, a1: export_default$h<1>): export_default$14<1>;
    tstzrangeSubdiff(this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$14<0 | 1>;
    tstzrangeSubdiff(this: export_default$h<number>, a1: export_default$h<number>): export_default$14<0 | 1>;
    ["="](this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["="](this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["="](this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["="](this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    [">="](this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    [">="](this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    [">="](this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    [">"](this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    [">"](this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    [">"](this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["<="](this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["<="](this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["<="](this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["<"](this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["<"](this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["<"](this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$h<1>, a1: export_default$h<1>): export_default$W<1>;
    ["-"](this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$W<0 | 1>;
    ["-"](this: export_default$h<number>, a1: export_default$h<number>): export_default$W<0 | 1>;
    ["-"](this: export_default$h<1>, a1: export_default$W<1>): export_default$h<1>;
    ["-"](this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
    ["-"](this: export_default$h<number>, a1: export_default$W<number>): export_default$h<0 | 1>;
    ["<>"](this: export_default$h<1>, a1: export_default$h<1>): export_default$1g<1>;
    ["<>"](this: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$h<number>, a1: export_default$h<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$h<1>, a1: export_default$18<1>): export_default$1g<1>;
    ["<>"](this: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$h<number>, a1: export_default$18<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$h<1>, a1: export_default$i<1>): export_default$1g<1>;
    ["<>"](this: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$h<number>, a1: export_default$i<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$h<1>, a1: export_default$W<1>): export_default$h<1>;
    ["+"](this: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
    ["+"](this: export_default$h<number>, a1: export_default$W<number>): export_default$h<0 | 1>;
}

type Parsed$f = string;
type SerializeParam$f = string;
declare class export_default$g<N extends number> extends Any<Parsed$f, N> {
    static new(v: SerializeParam$f): export_default$g<1>;
    static new(v: null): export_default$g<0>;
    static new(v: Expression): export_default$g<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$g<number> | undefined;
    inRange(this: export_default$g<1>, a1: export_default$g<1>, a2: export_default$W<1>, a3: export_default$1g<1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$1g<1>;
    inRange(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    inRange(this: export_default$g<number>, a1: export_default$g<number>, a2: export_default$W<number>, a3: export_default$1g<number> | Input<export_default$1g<0 | 1>>, a4: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$1g<0 | 1>;
    max(this: export_default$g<number>): export_default$g<0 | 1>;
    overlaps(this: export_default$g<1>, a1: export_default$g<1>, a2: export_default$g<1>, a3: export_default$g<1>): export_default$1g<1>;
    overlaps(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>, a2: export_default$g<0 | 1>, a3: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    overlaps(this: export_default$g<number>, a1: export_default$g<number>, a2: export_default$g<number>, a3: export_default$g<number>): export_default$1g<0 | 1>;
    time(this: export_default$g<1>): export_default$j<1>;
    time(this: export_default$g<0 | 1>): export_default$j<0 | 1>;
    time(this: export_default$g<number>): export_default$j<0 | 1>;
    timetz(this: export_default$g<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$g<1>;
    timetz(this: export_default$g<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$g<0 | 1>;
    timetz(this: export_default$g<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$g<0 | 1>;
    timetzCmp(this: export_default$g<1>, a1: export_default$g<1>): export_default$10<1>;
    timetzCmp(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$10<0 | 1>;
    timetzCmp(this: export_default$g<number>, a1: export_default$g<number>): export_default$10<0 | 1>;
    timetzEq(this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    timetzEq(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    timetzEq(this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    timetzGe(this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    timetzGe(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    timetzGe(this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    timetzGt(this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    timetzGt(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    timetzGt(this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    timetzHash(this: export_default$g<1>): export_default$10<1>;
    timetzHash(this: export_default$g<0 | 1>): export_default$10<0 | 1>;
    timetzHash(this: export_default$g<number>): export_default$10<0 | 1>;
    timetzHashExtended(this: export_default$g<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    timetzHashExtended(this: export_default$g<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    timetzHashExtended(this: export_default$g<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    timetzLarger(this: export_default$g<1>, a1: export_default$g<1>): export_default$g<1>;
    timetzLarger(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
    timetzLarger(this: export_default$g<number>, a1: export_default$g<number>): export_default$g<0 | 1>;
    timetzLe(this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    timetzLe(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    timetzLe(this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    timetzLt(this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    timetzLt(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    timetzLt(this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    timetzMiInterval(this: export_default$g<1>, a1: export_default$W<1>): export_default$g<1>;
    timetzMiInterval(this: export_default$g<0 | 1>, a1: export_default$W<0 | 1>): export_default$g<0 | 1>;
    timetzMiInterval(this: export_default$g<number>, a1: export_default$W<number>): export_default$g<0 | 1>;
    timetzNe(this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    timetzNe(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    timetzNe(this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    timetzPlInterval(this: export_default$g<1>, a1: export_default$W<1>): export_default$g<1>;
    timetzPlInterval(this: export_default$g<0 | 1>, a1: export_default$W<0 | 1>): export_default$g<0 | 1>;
    timetzPlInterval(this: export_default$g<number>, a1: export_default$W<number>): export_default$g<0 | 1>;
    timetzSmaller(this: export_default$g<1>, a1: export_default$g<1>): export_default$g<1>;
    timetzSmaller(this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
    timetzSmaller(this: export_default$g<number>, a1: export_default$g<number>): export_default$g<0 | 1>;
    timetzdatePl(this: export_default$g<1>, a1: export_default$18<1>): export_default$h<1>;
    timetzdatePl(this: export_default$g<0 | 1>, a1: export_default$18<0 | 1>): export_default$h<0 | 1>;
    timetzdatePl(this: export_default$g<number>, a1: export_default$18<number>): export_default$h<0 | 1>;
    timezone(this: export_default$g<1>): export_default$g<1>;
    timezone(this: export_default$g<0 | 1>): export_default$g<0 | 1>;
    timezone(this: export_default$g<number>): export_default$g<0 | 1>;
    ["="](this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    ["="](this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    [">="](this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    [">"](this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    ["<="](this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    ["<"](this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    ["-"](this: export_default$g<1>, a1: export_default$W<1>): export_default$g<1>;
    ["-"](this: export_default$g<0 | 1>, a1: export_default$W<0 | 1>): export_default$g<0 | 1>;
    ["-"](this: export_default$g<number>, a1: export_default$W<number>): export_default$g<0 | 1>;
    ["<>"](this: export_default$g<1>, a1: export_default$g<1>): export_default$1g<1>;
    ["<>"](this: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$g<number>, a1: export_default$g<number>): export_default$1g<0 | 1>;
    ["+"](this: export_default$g<1>, a1: export_default$W<1>): export_default$g<1>;
    ["+"](this: export_default$g<0 | 1>, a1: export_default$W<0 | 1>): export_default$g<0 | 1>;
    ["+"](this: export_default$g<number>, a1: export_default$W<number>): export_default$g<0 | 1>;
    ["+"](this: export_default$g<1>, a1: export_default$18<1>): export_default$h<1>;
    ["+"](this: export_default$g<0 | 1>, a1: export_default$18<0 | 1>): export_default$h<0 | 1>;
    ["+"](this: export_default$g<number>, a1: export_default$18<number>): export_default$h<0 | 1>;
}

type Parsed$e = string;
type SerializeParam$e = string;
declare class export_default$f<N extends number> extends Any<Parsed$e, N> {
    static new(v: SerializeParam$e): export_default$f<1>;
    static new(v: null): export_default$f<0>;
    static new(v: Expression): export_default$f<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$f<number> | undefined;
}

type Parsed$d = string;
type SerializeParam$d = string;
declare class export_default$e<N extends number> extends Any<Parsed$d, N> {
    static new(v: SerializeParam$d): export_default$e<1>;
    static new(v: null): export_default$e<0>;
    static new(v: Expression): export_default$e<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$e<number> | undefined;
}

type Parsed$c = string;
type SerializeParam$c = string;
declare class export_default$d<N extends number> extends Any<Parsed$c, N> {
    static new(v: SerializeParam$c): export_default$d<1>;
    static new(v: null): export_default$d<0>;
    static new(v: Expression): export_default$d<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$d<number> | undefined;
    numnode(this: export_default$d<1>): export_default$10<1>;
    numnode(this: export_default$d<0 | 1>): export_default$10<0 | 1>;
    numnode(this: export_default$d<number>): export_default$10<0 | 1>;
    querytree(this: export_default$d<1>): export_default$l<1>;
    querytree(this: export_default$d<0 | 1>): export_default$l<0 | 1>;
    querytree(this: export_default$d<number>): export_default$l<0 | 1>;
    tsMatchQv(this: export_default$d<1>, a1: export_default$9<1>): export_default$1g<1>;
    tsMatchQv(this: export_default$d<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    tsMatchQv(this: export_default$d<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    tsMatchQv(this: export_default$d<1>, a1: export_default$9<1>): export_default$1g<1>;
    tsMatchQv(this: export_default$d<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    tsMatchQv(this: export_default$d<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    tsRewrite(this: export_default$d<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$d<1>;
    tsRewrite(this: export_default$d<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
    tsRewrite(this: export_default$d<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$d<0 | 1>;
    tsRewrite(this: export_default$d<1>, a1: export_default$d<1>, a2: export_default$d<1>): export_default$d<1>;
    tsRewrite(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$d<0 | 1>): export_default$d<0 | 1>;
    tsRewrite(this: export_default$d<number>, a1: export_default$d<number>, a2: export_default$d<number>): export_default$d<0 | 1>;
    tsqMcontained(this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsqMcontained(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsqMcontained(this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsqMcontains(this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsqMcontains(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsqMcontains(this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsqueryAnd(this: export_default$d<1>, a1: export_default$d<1>): export_default$d<1>;
    tsqueryAnd(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$d<0 | 1>;
    tsqueryAnd(this: export_default$d<number>, a1: export_default$d<number>): export_default$d<0 | 1>;
    tsqueryCmp(this: export_default$d<1>, a1: export_default$d<1>): export_default$10<1>;
    tsqueryCmp(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$10<0 | 1>;
    tsqueryCmp(this: export_default$d<number>, a1: export_default$d<number>): export_default$10<0 | 1>;
    tsqueryEq(this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsqueryEq(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsqueryEq(this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsqueryGe(this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsqueryGe(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsqueryGe(this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsqueryGt(this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsqueryGt(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsqueryGt(this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsqueryLe(this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsqueryLe(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsqueryLe(this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsqueryLt(this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsqueryLt(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsqueryLt(this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsqueryNe(this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsqueryNe(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsqueryNe(this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsqueryNot(this: export_default$d<1>): export_default$d<1>;
    tsqueryNot(this: export_default$d<0 | 1>): export_default$d<0 | 1>;
    tsqueryNot(this: export_default$d<number>): export_default$d<0 | 1>;
    tsqueryOr(this: export_default$d<1>, a1: export_default$d<1>): export_default$d<1>;
    tsqueryOr(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$d<0 | 1>;
    tsqueryOr(this: export_default$d<number>, a1: export_default$d<number>): export_default$d<0 | 1>;
    tsqueryPhrase(this: export_default$d<1>, a1: export_default$d<1>): export_default$d<1>;
    tsqueryPhrase(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$d<0 | 1>;
    tsqueryPhrase(this: export_default$d<number>, a1: export_default$d<number>): export_default$d<0 | 1>;
    tsqueryPhrase(this: export_default$d<1>, a1: export_default$d<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$d<1>;
    tsqueryPhrase(this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$d<0 | 1>;
    tsqueryPhrase(this: export_default$d<number>, a1: export_default$d<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$d<0 | 1>;
    ["@@"](this: export_default$d<1>, a1: export_default$9<1>): export_default$1g<1>;
    ["@@"](this: export_default$d<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    ["@@"](this: export_default$d<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    ["@@@"](this: export_default$d<1>, a1: export_default$9<1>): export_default$1g<1>;
    ["@@@"](this: export_default$d<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    ["@@@"](this: export_default$d<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    ["@>"](this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    ["@>"](this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    ["&&"](this: export_default$d<1>, a1: export_default$d<1>): export_default$d<1>;
    ["&&"](this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$d<0 | 1>;
    ["&&"](this: export_default$d<number>, a1: export_default$d<number>): export_default$d<0 | 1>;
    ["="](this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    ["="](this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    [">="](this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    [">"](this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    ["<="](this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    ["<"](this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$d<1>, a1: export_default$d<1>): export_default$1g<1>;
    ["<>"](this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$d<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    ["<->"](this: export_default$d<1>, a1: export_default$d<1>): export_default$d<1>;
    ["<->"](this: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$d<0 | 1>;
    ["<->"](this: export_default$d<number>, a1: export_default$d<number>): export_default$d<0 | 1>;
}

type Parsed$b = string;
type SerializeParam$b = string;
declare class export_default$c<N extends number> extends Any<Parsed$b, N> {
    static new(v: SerializeParam$b): export_default$c<1>;
    static new(v: null): export_default$c<0>;
    static new(v: Expression): export_default$c<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$c<number> | undefined;
    tsmultirange(this: export_default$c<1>): export_default$e<1>;
    tsmultirange(this: export_default$c<0 | 1>): export_default$e<0 | 1>;
    tsmultirange(this: export_default$c<number>): export_default$e<0 | 1>;
}

type Parsed$a = string;
type SerializeParam$a = string;
declare class export_default$b<N extends number> extends Any<Parsed$a, N> {
    static new(v: SerializeParam$a): export_default$b<1>;
    static new(v: null): export_default$b<0>;
    static new(v: Expression): export_default$b<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$b<number> | undefined;
}

type Parsed$9 = string;
type SerializeParam$9 = string;
declare class export_default$a<N extends number> extends Any<Parsed$9, N> {
    static new(v: SerializeParam$9): export_default$a<1>;
    static new(v: null): export_default$a<0>;
    static new(v: Expression): export_default$a<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$a<number> | undefined;
    tstzmultirange(this: export_default$a<1>): export_default$b<1>;
    tstzmultirange(this: export_default$a<0 | 1>): export_default$b<0 | 1>;
    tstzmultirange(this: export_default$a<number>): export_default$b<0 | 1>;
}

type Parsed$8 = string;
type SerializeParam$8 = string;
declare class export_default$9<N extends number> extends Any<Parsed$8, N> {
    static new(v: SerializeParam$8): export_default$9<1>;
    static new(v: null): export_default$9<0>;
    static new(v: Expression): export_default$9<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$9<number> | undefined;
    length(this: export_default$9<1>): export_default$10<1>;
    length(this: export_default$9<0 | 1>): export_default$10<0 | 1>;
    length(this: export_default$9<number>): export_default$10<0 | 1>;
    setweight(this: export_default$9<1>, a1: export_default$1c<1>): export_default$9<1>;
    setweight(this: export_default$9<0 | 1>, a1: export_default$1c<0 | 1>): export_default$9<0 | 1>;
    setweight(this: export_default$9<number>, a1: export_default$1c<number>): export_default$9<0 | 1>;
    setweight(this: export_default$9<1>, a1: export_default$1c<1>, a2: Array$1<1, export_default$l<0 | 1>>): export_default$9<1>;
    setweight(this: export_default$9<0 | 1>, a1: export_default$1c<0 | 1>, a2: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$9<0 | 1>;
    setweight(this: export_default$9<number>, a1: export_default$1c<number>, a2: Array$1<number, export_default$l<0 | 1>>): export_default$9<0 | 1>;
    strip(this: export_default$9<1>): export_default$9<1>;
    strip(this: export_default$9<0 | 1>): export_default$9<0 | 1>;
    strip(this: export_default$9<number>): export_default$9<0 | 1>;
    tsDelete(this: export_default$9<1>, a1: Array$1<1, export_default$l<0 | 1>>): export_default$9<1>;
    tsDelete(this: export_default$9<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$9<0 | 1>;
    tsDelete(this: export_default$9<number>, a1: Array$1<number, export_default$l<0 | 1>>): export_default$9<0 | 1>;
    tsDelete(this: export_default$9<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$9<1>;
    tsDelete(this: export_default$9<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$9<0 | 1>;
    tsDelete(this: export_default$9<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$9<0 | 1>;
    tsFilter(this: export_default$9<1>, a1: Array$1<1, export_default$1c<0 | 1>>): export_default$9<1>;
    tsFilter(this: export_default$9<0 | 1>, a1: Array$1<0 | 1, export_default$1c<0 | 1>>): export_default$9<0 | 1>;
    tsFilter(this: export_default$9<number>, a1: Array$1<number, export_default$1c<0 | 1>>): export_default$9<0 | 1>;
    tsMatchVq(this: export_default$9<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsMatchVq(this: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsMatchVq(this: export_default$9<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsMatchVq(this: export_default$9<1>, a1: export_default$d<1>): export_default$1g<1>;
    tsMatchVq(this: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    tsMatchVq(this: export_default$9<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    tsRank(this: export_default$9<1>, a1: export_default$d<1>): export_default$15<1>;
    tsRank(this: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$15<0 | 1>;
    tsRank(this: export_default$9<number>, a1: export_default$d<number>): export_default$15<0 | 1>;
    tsRank(this: export_default$9<1>, a1: export_default$d<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$15<1>;
    tsRank(this: export_default$9<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$15<0 | 1>;
    tsRank(this: export_default$9<number>, a1: export_default$d<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$15<0 | 1>;
    tsRankCd(this: export_default$9<1>, a1: export_default$d<1>): export_default$15<1>;
    tsRankCd(this: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$15<0 | 1>;
    tsRankCd(this: export_default$9<number>, a1: export_default$d<number>): export_default$15<0 | 1>;
    tsRankCd(this: export_default$9<1>, a1: export_default$d<1>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$15<1>;
    tsRankCd(this: export_default$9<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$15<0 | 1>;
    tsRankCd(this: export_default$9<number>, a1: export_default$d<number>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$15<0 | 1>;
    tsvectorCmp(this: export_default$9<1>, a1: export_default$9<1>): export_default$10<1>;
    tsvectorCmp(this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$10<0 | 1>;
    tsvectorCmp(this: export_default$9<number>, a1: export_default$9<number>): export_default$10<0 | 1>;
    tsvectorConcat(this: export_default$9<1>, a1: export_default$9<1>): export_default$9<1>;
    tsvectorConcat(this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$9<0 | 1>;
    tsvectorConcat(this: export_default$9<number>, a1: export_default$9<number>): export_default$9<0 | 1>;
    tsvectorEq(this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    tsvectorEq(this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    tsvectorEq(this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    tsvectorGe(this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    tsvectorGe(this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    tsvectorGe(this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    tsvectorGt(this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    tsvectorGt(this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    tsvectorGt(this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    tsvectorLe(this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    tsvectorLe(this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    tsvectorLe(this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    tsvectorLt(this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    tsvectorLt(this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    tsvectorLt(this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    tsvectorNe(this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    tsvectorNe(this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    tsvectorNe(this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    tsvectorToArray(this: export_default$9<1>): Array$1<1, export_default$l<0 | 1>>;
    tsvectorToArray(this: export_default$9<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
    tsvectorToArray(this: export_default$9<number>): Array$1<0 | 1, export_default$l<0 | 1>>;
    unnest(this: export_default$9<1>): Setof<{
        from: {
            lexeme: export_default$l<1>;
            positions: Array$1<1, export_default$12<0 | 1>>;
            weights: Array$1<1, export_default$l<0 | 1>>;
        };
    }>;
    unnest(this: export_default$9<0 | 1>): Setof<{
        from: {
            lexeme: export_default$l<0 | 1>;
            positions: Array$1<0 | 1, export_default$12<0 | 1>>;
            weights: Array$1<0 | 1, export_default$l<0 | 1>>;
        };
    }>;
    unnest(this: export_default$9<number>): Setof<{
        from: {
            lexeme: export_default$l<0 | 1>;
            positions: Array$1<0 | 1, export_default$12<0 | 1>>;
            weights: Array$1<0 | 1, export_default$l<0 | 1>>;
        };
    }>;
    ["@@@"](this: export_default$9<1>, a1: export_default$d<1>): export_default$1g<1>;
    ["@@@"](this: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    ["@@@"](this: export_default$9<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    ["@@"](this: export_default$9<1>, a1: export_default$d<1>): export_default$1g<1>;
    ["@@"](this: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
    ["@@"](this: export_default$9<number>, a1: export_default$d<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    ["="](this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    [">="](this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    [">"](this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    ["<="](this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    ["<"](this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$9<1>, a1: export_default$9<1>): export_default$1g<1>;
    ["<>"](this: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$9<number>, a1: export_default$9<number>): export_default$1g<0 | 1>;
}

type Parsed$7 = string;
type SerializeParam$7 = string;
declare class export_default$8<N extends number> extends Any<Parsed$7, N> {
    static new(v: SerializeParam$7): export_default$8<1>;
    static new(v: null): export_default$8<0>;
    static new(v: Expression): export_default$8<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$8<number> | undefined;
    txidSnapshotXip(this: export_default$8<1>): Setof<{
        from: {};
    }>;
    txidSnapshotXip(this: export_default$8<0 | 1>): Setof<{
        from: {};
    }>;
    txidSnapshotXip(this: export_default$8<number>): Setof<{
        from: {};
    }>;
    txidSnapshotXmax(this: export_default$8<1>): export_default$Z<1>;
    txidSnapshotXmax(this: export_default$8<0 | 1>): export_default$Z<0 | 1>;
    txidSnapshotXmax(this: export_default$8<number>): export_default$Z<0 | 1>;
}

type Parsed$6 = string;
type SerializeParam$6 = string;
declare class export_default$7<N extends number> extends Any<Parsed$6, N> {
    static new(v: SerializeParam$6): export_default$7<1>;
    static new(v: null): export_default$7<0>;
    static new(v: Expression): export_default$7<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$7<number> | undefined;
    uuidCmp(this: export_default$7<1>, a1: export_default$7<1>): export_default$10<1>;
    uuidCmp(this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$10<0 | 1>;
    uuidCmp(this: export_default$7<number>, a1: export_default$7<number>): export_default$10<0 | 1>;
    uuidEq(this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    uuidEq(this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    uuidEq(this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    uuidExtractTimestamp(this: export_default$7<1>): export_default$h<1>;
    uuidExtractTimestamp(this: export_default$7<0 | 1>): export_default$h<0 | 1>;
    uuidExtractTimestamp(this: export_default$7<number>): export_default$h<0 | 1>;
    uuidExtractVersion(this: export_default$7<1>): export_default$12<1>;
    uuidExtractVersion(this: export_default$7<0 | 1>): export_default$12<0 | 1>;
    uuidExtractVersion(this: export_default$7<number>): export_default$12<0 | 1>;
    uuidGe(this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    uuidGe(this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    uuidGe(this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    uuidGt(this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    uuidGt(this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    uuidGt(this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    uuidHash(this: export_default$7<1>): export_default$10<1>;
    uuidHash(this: export_default$7<0 | 1>): export_default$10<0 | 1>;
    uuidHash(this: export_default$7<number>): export_default$10<0 | 1>;
    uuidHashExtended(this: export_default$7<1>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    uuidHashExtended(this: export_default$7<0 | 1>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    uuidHashExtended(this: export_default$7<number>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    uuidLe(this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    uuidLe(this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    uuidLe(this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    uuidLt(this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    uuidLt(this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    uuidLt(this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    uuidNe(this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    uuidNe(this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    uuidNe(this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    ["="](this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    [">="](this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    [">"](this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    ["<="](this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    ["<"](this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$7<1>, a1: export_default$7<1>): export_default$1g<1>;
    ["<>"](this: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$7<number>, a1: export_default$7<number>): export_default$1g<0 | 1>;
}

type Parsed$5 = string;
type SerializeParam$5 = string;
declare class export_default$6<N extends number> extends Any<Parsed$5, N> {
    static new(v: SerializeParam$5): export_default$6<1>;
    static new(v: null): export_default$6<0>;
    static new(v: Expression): export_default$6<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$6<number> | undefined;
    bitcat(this: export_default$6<1>, a1: export_default$6<1>): export_default$6<1>;
    bitcat(this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$6<0 | 1>;
    bitcat(this: export_default$6<number>, a1: export_default$6<number>): export_default$6<0 | 1>;
    varbit(this: export_default$6<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$6<1>;
    varbit(this: export_default$6<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$6<0 | 1>;
    varbit(this: export_default$6<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$6<0 | 1>;
    varbitcmp(this: export_default$6<1>, a1: export_default$6<1>): export_default$10<1>;
    varbitcmp(this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$10<0 | 1>;
    varbitcmp(this: export_default$6<number>, a1: export_default$6<number>): export_default$10<0 | 1>;
    varbiteq(this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    varbiteq(this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    varbiteq(this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    varbitge(this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    varbitge(this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    varbitge(this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    varbitgt(this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    varbitgt(this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    varbitgt(this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    varbitle(this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    varbitle(this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    varbitle(this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    varbitlt(this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    varbitlt(this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    varbitlt(this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    varbitne(this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    varbitne(this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    varbitne(this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    ["="](this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    [">="](this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    [">"](this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    ["<="](this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    ["<"](this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$6<1>, a1: export_default$6<1>): export_default$1g<1>;
    ["<>"](this: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$6<number>, a1: export_default$6<number>): export_default$1g<0 | 1>;
}

type Parsed$4 = string;
type SerializeParam$4 = string;
declare class export_default$5<N extends number> extends Any<Parsed$4, N> {
    static new(v: SerializeParam$4): export_default$5<1>;
    static new(v: null): export_default$5<0>;
    static new(v: Expression): export_default$5<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$5<number> | undefined;
    name(this: export_default$5<1>): export_default$M<1>;
    name(this: export_default$5<0 | 1>): export_default$M<0 | 1>;
    name(this: export_default$5<number>): export_default$M<0 | 1>;
    varchar(this: export_default$5<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$5<1>;
    varchar(this: export_default$5<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$5<0 | 1>;
    varchar(this: export_default$5<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$5<0 | 1>;
}

type Parsed$3 = string;
type SerializeParam$3 = string;
declare class export_default$4<N extends number> extends Any<Parsed$3, N> {
    static new(v: SerializeParam$3): export_default$4<1>;
    static new(v: null): export_default$4<0>;
    static new(v: Expression): export_default$4<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$4<number> | undefined;
}

type Parsed$2 = string;
type SerializeParam$2 = string;
declare class export_default$3<N extends number> extends Any<Parsed$2, N> {
    static new(v: SerializeParam$2): export_default$3<1>;
    static new(v: null): export_default$3<0>;
    static new(v: Expression): export_default$3<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$3<number> | undefined;
    age(this: export_default$3<1>): export_default$10<1>;
    age(this: export_default$3<0 | 1>): export_default$10<0 | 1>;
    age(this: export_default$3<number>): export_default$10<0 | 1>;
    mxidAge(this: export_default$3<1>): export_default$10<1>;
    mxidAge(this: export_default$3<0 | 1>): export_default$10<0 | 1>;
    mxidAge(this: export_default$3<number>): export_default$10<0 | 1>;
    pgGetMultixactMembers(this: export_default$3<1>): Setof<{
        from: {
            xid: export_default$3<1>;
            mode: export_default$l<1>;
        };
    }>;
    pgGetMultixactMembers(this: export_default$3<0 | 1>): Setof<{
        from: {
            xid: export_default$3<0 | 1>;
            mode: export_default$l<0 | 1>;
        };
    }>;
    pgGetMultixactMembers(this: export_default$3<number>): Setof<{
        from: {
            xid: export_default$3<0 | 1>;
            mode: export_default$l<0 | 1>;
        };
    }>;
    pgXactCommitTimestamp(this: export_default$3<1>): export_default$h<1>;
    pgXactCommitTimestamp(this: export_default$3<0 | 1>): export_default$h<0 | 1>;
    pgXactCommitTimestamp(this: export_default$3<number>): export_default$h<0 | 1>;
    xideq(this: export_default$3<1>, a1: export_default$3<1>): export_default$1g<1>;
    xideq(this: export_default$3<0 | 1>, a1: export_default$3<0 | 1>): export_default$1g<0 | 1>;
    xideq(this: export_default$3<number>, a1: export_default$3<number>): export_default$1g<0 | 1>;
    xideqint4(this: export_default$3<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    xideqint4(this: export_default$3<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    xideqint4(this: export_default$3<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    xidneq(this: export_default$3<1>, a1: export_default$3<1>): export_default$1g<1>;
    xidneq(this: export_default$3<0 | 1>, a1: export_default$3<0 | 1>): export_default$1g<0 | 1>;
    xidneq(this: export_default$3<number>, a1: export_default$3<number>): export_default$1g<0 | 1>;
    xidneqint4(this: export_default$3<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    xidneqint4(this: export_default$3<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    xidneqint4(this: export_default$3<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$3<1>, a1: export_default$3<1>): export_default$1g<1>;
    ["="](this: export_default$3<0 | 1>, a1: export_default$3<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$3<number>, a1: export_default$3<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$3<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["="](this: export_default$3<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["="](this: export_default$3<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$3<1>, a1: export_default$3<1>): export_default$1g<1>;
    ["<>"](this: export_default$3<0 | 1>, a1: export_default$3<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$3<number>, a1: export_default$3<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$3<1>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$1g<1>;
    ["<>"](this: export_default$3<0 | 1>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$3<number>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$1g<0 | 1>;
}

type Parsed$1 = string;
type SerializeParam$1 = string;
declare class export_default$2<N extends number> extends Any<Parsed$1, N> {
    static new(v: SerializeParam$1): export_default$2<1>;
    static new(v: null): export_default$2<0>;
    static new(v: Expression): export_default$2<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$2<number> | undefined;
    max(this: export_default$2<number>): export_default$2<0 | 1>;
    pgVisibleInSnapshot(this: export_default$2<1>, a1: export_default$B<1>): export_default$1g<1>;
    pgVisibleInSnapshot(this: export_default$2<0 | 1>, a1: export_default$B<0 | 1>): export_default$1g<0 | 1>;
    pgVisibleInSnapshot(this: export_default$2<number>, a1: export_default$B<number>): export_default$1g<0 | 1>;
    pgXactStatus(this: export_default$2<1>): export_default$l<1>;
    pgXactStatus(this: export_default$2<0 | 1>): export_default$l<0 | 1>;
    pgXactStatus(this: export_default$2<number>): export_default$l<0 | 1>;
    xid(this: export_default$2<1>): export_default$3<1>;
    xid(this: export_default$2<0 | 1>): export_default$3<0 | 1>;
    xid(this: export_default$2<number>): export_default$3<0 | 1>;
    xid8Larger(this: export_default$2<1>, a1: export_default$2<1>): export_default$2<1>;
    xid8Larger(this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$2<0 | 1>;
    xid8Larger(this: export_default$2<number>, a1: export_default$2<number>): export_default$2<0 | 1>;
    xid8Smaller(this: export_default$2<1>, a1: export_default$2<1>): export_default$2<1>;
    xid8Smaller(this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$2<0 | 1>;
    xid8Smaller(this: export_default$2<number>, a1: export_default$2<number>): export_default$2<0 | 1>;
    xid8Cmp(this: export_default$2<1>, a1: export_default$2<1>): export_default$10<1>;
    xid8Cmp(this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$10<0 | 1>;
    xid8Cmp(this: export_default$2<number>, a1: export_default$2<number>): export_default$10<0 | 1>;
    xid8Eq(this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    xid8Eq(this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    xid8Eq(this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    xid8Ge(this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    xid8Ge(this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    xid8Ge(this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    xid8Gt(this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    xid8Gt(this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    xid8Gt(this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    xid8Le(this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    xid8Le(this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    xid8Le(this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    xid8Lt(this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    xid8Lt(this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    xid8Lt(this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    xid8Ne(this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    xid8Ne(this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    xid8Ne(this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    ["="](this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    ["="](this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    ["="](this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    [">="](this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    [">="](this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    [">="](this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    [">"](this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    [">"](this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    [">"](this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    ["<="](this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    ["<="](this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    ["<="](this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    ["<"](this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    ["<"](this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    ["<"](this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$2<1>, a1: export_default$2<1>): export_default$1g<1>;
    ["<>"](this: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
    ["<>"](this: export_default$2<number>, a1: export_default$2<number>): export_default$1g<0 | 1>;
}

type Parsed = string;
type SerializeParam = string;
declare class export_default$1<N extends number> extends Any<Parsed, N> {
    static new(v: SerializeParam): export_default$1<1>;
    static new(v: null): export_default$1<0>;
    static new(v: Expression): export_default$1<0 | 1>;
    static parse(v: string): string;
    static typeString(): string | undefined;
    asAggregate(): export_default$1<number> | undefined;
    text(this: export_default$1<1>): export_default$l<1>;
    text(this: export_default$1<0 | 1>): export_default$l<0 | 1>;
    text(this: export_default$1<number>): export_default$l<0 | 1>;
    xmlagg(this: export_default$1<number>): export_default$1<0 | 1>;
    xmlconcat2(this: export_default$1<1>, a1: export_default$1<1>): export_default$1<1>;
    xmlconcat2(this: export_default$1<0 | 1>, a1: export_default$1<0 | 1>): export_default$1<0 | 1>;
    xmlconcat2(this: export_default$1<number>, a1: export_default$1<number>): export_default$1<0 | 1>;
    xmlvalidate(this: export_default$1<1>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$1g<1>;
    xmlvalidate(this: export_default$1<0 | 1>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
    xmlvalidate(this: export_default$1<number>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$1g<0 | 1>;
}

declare class export_default<N extends number, T extends Any> extends Any<NonNullable<T["resultType"]>[], N> {
    static parse(v: string): unknown;
    static typeString(): string | undefined;
    asAggregate(): Array$1<number, T> | undefined;
    arrayAgg(this: Array$1<number, T>): Array$1<0 | 1, T>;
    arrayAppend<T extends Any>(this: Array$1<1, T>, a1: T | Input<T>): Array$1<1, T>;
    arrayAppend<T extends Any>(this: Array$1<0 | 1, T>, a1: T | Input<T>): Array$1<0 | 1, T>;
    arrayAppend<T extends Any>(this: Array$1<number, T>, a1: T | Input<T>): Array$1<0 | 1, T>;
    arrayCat<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): Array$1<1, T>;
    arrayCat<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
    arrayCat<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): Array$1<0 | 1, T>;
    arrayDims(this: Array$1<1, T>): export_default$l<1>;
    arrayDims(this: Array$1<0 | 1, T>): export_default$l<0 | 1>;
    arrayDims(this: Array$1<number, T>): export_default$l<0 | 1>;
    arrayEq<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    arrayEq<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    arrayEq<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    arrayGe<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    arrayGe<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    arrayGe<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    arrayGt<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    arrayGt<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    arrayGt<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    arrayLarger<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): Array$1<1, T>;
    arrayLarger<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
    arrayLarger<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): Array$1<0 | 1, T>;
    arrayLe<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    arrayLe<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    arrayLe<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    arrayLength(this: Array$1<1, T>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    arrayLength(this: Array$1<0 | 1, T>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    arrayLength(this: Array$1<number, T>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    arrayLower(this: Array$1<1, T>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    arrayLower(this: Array$1<0 | 1, T>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    arrayLower(this: Array$1<number, T>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    arrayLt<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    arrayLt<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    arrayLt<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    arrayNdims(this: Array$1<1, T>): export_default$10<1>;
    arrayNdims(this: Array$1<0 | 1, T>): export_default$10<0 | 1>;
    arrayNdims(this: Array$1<number, T>): export_default$10<0 | 1>;
    arrayNe<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    arrayNe<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    arrayNe<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    arrayPosition<T extends Any>(this: Array$1<1, T>, a1: T | Input<T>): export_default$10<1>;
    arrayPosition<T extends Any>(this: Array$1<0 | 1, T>, a1: T | Input<T>): export_default$10<0 | 1>;
    arrayPosition<T extends Any>(this: Array$1<number, T>, a1: T | Input<T>): export_default$10<0 | 1>;
    arrayPosition<T extends Any>(this: Array$1<1, T>, a1: T | Input<T>, a2: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    arrayPosition<T extends Any>(this: Array$1<0 | 1, T>, a1: T | Input<T>, a2: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    arrayPosition<T extends Any>(this: Array$1<number, T>, a1: T | Input<T>, a2: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    arrayPositions<T extends Any>(this: Array$1<1, T>, a1: T | Input<T>): Array$1<1, export_default$10<0 | 1>>;
    arrayPositions<T extends Any>(this: Array$1<0 | 1, T>, a1: T | Input<T>): Array$1<0 | 1, export_default$10<0 | 1>>;
    arrayPositions<T extends Any>(this: Array$1<number, T>, a1: T | Input<T>): Array$1<0 | 1, export_default$10<0 | 1>>;
    arrayRemove<T extends Any>(this: Array$1<1, T>, a1: T | Input<T>): Array$1<1, T>;
    arrayRemove<T extends Any>(this: Array$1<0 | 1, T>, a1: T | Input<T>): Array$1<0 | 1, T>;
    arrayRemove<T extends Any>(this: Array$1<number, T>, a1: T | Input<T>): Array$1<0 | 1, T>;
    arrayReplace<T extends Any>(this: Array$1<1, T>, a1: T | Input<T>, a2: T | Input<T>): Array$1<1, T>;
    arrayReplace<T extends Any>(this: Array$1<0 | 1, T>, a1: T | Input<T>, a2: T | Input<T>): Array$1<0 | 1, T>;
    arrayReplace<T extends Any>(this: Array$1<number, T>, a1: T | Input<T>, a2: T | Input<T>): Array$1<0 | 1, T>;
    arraySample(this: Array$1<1, T>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): Array$1<1, T>;
    arraySample(this: Array$1<0 | 1, T>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): Array$1<0 | 1, T>;
    arraySample(this: Array$1<number, T>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): Array$1<0 | 1, T>;
    arrayShuffle(this: Array$1<1, T>): Array$1<1, T>;
    arrayShuffle(this: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
    arrayShuffle(this: Array$1<number, T>): Array$1<0 | 1, T>;
    arraySmaller<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): Array$1<1, T>;
    arraySmaller<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
    arraySmaller<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): Array$1<0 | 1, T>;
    arrayToJson(this: Array$1<1, T>): export_default$V<1>;
    arrayToJson(this: Array$1<0 | 1, T>): export_default$V<0 | 1>;
    arrayToJson(this: Array$1<number, T>): export_default$V<0 | 1>;
    arrayToJson(this: Array$1<1, T>, a1: export_default$1g<1> | Input<export_default$1g<0 | 1>>): export_default$V<1>;
    arrayToJson(this: Array$1<0 | 1, T>, a1: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): export_default$V<0 | 1>;
    arrayToJson(this: Array$1<number, T>, a1: export_default$1g<number> | Input<export_default$1g<0 | 1>>): export_default$V<0 | 1>;
    arrayToString(this: Array$1<1, T>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    arrayToString(this: Array$1<0 | 1, T>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    arrayToString(this: Array$1<number, T>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    arrayToString(this: Array$1<1, T>, a1: export_default$l<1> | Input<export_default$l<0 | 1>>, a2: export_default$l<1> | Input<export_default$l<0 | 1>>): export_default$l<1>;
    arrayToString(this: Array$1<0 | 1, T>, a1: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>, a2: export_default$l<0 | 1> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    arrayToString(this: Array$1<number, T>, a1: export_default$l<number> | Input<export_default$l<0 | 1>>, a2: export_default$l<number> | Input<export_default$l<0 | 1>>): export_default$l<0 | 1>;
    arrayUpper(this: Array$1<1, T>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): export_default$10<1>;
    arrayUpper(this: Array$1<0 | 1, T>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    arrayUpper(this: Array$1<number, T>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): export_default$10<0 | 1>;
    arraycontained<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    arraycontained<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    arraycontained<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    arraycontains<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    arraycontains<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    arraycontains<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    arrayoverlap<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    arrayoverlap<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    arrayoverlap<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    btarraycmp<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$10<1>;
    btarraycmp<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$10<0 | 1>;
    btarraycmp<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$10<0 | 1>;
    cardinality(this: Array$1<1, T>): export_default$10<1>;
    cardinality(this: Array$1<0 | 1, T>): export_default$10<0 | 1>;
    cardinality(this: Array$1<number, T>): export_default$10<0 | 1>;
    generateSubscripts(this: Array$1<1, T>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSubscripts(this: Array$1<0 | 1, T>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSubscripts(this: Array$1<number, T>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSubscripts(this: Array$1<1, T>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSubscripts(this: Array$1<0 | 1, T>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>, a2: export_default$1g<0 | 1> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    generateSubscripts(this: Array$1<number, T>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>, a2: export_default$1g<number> | Input<export_default$1g<0 | 1>>): Setof<{
        from: {};
    }>;
    hashArray(this: Array$1<1, T>): export_default$10<1>;
    hashArray(this: Array$1<0 | 1, T>): export_default$10<0 | 1>;
    hashArray(this: Array$1<number, T>): export_default$10<0 | 1>;
    hashArrayExtended(this: Array$1<1, T>, a1: export_default$Z<1> | Input<export_default$Z<0 | 1>>): export_default$Z<1>;
    hashArrayExtended(this: Array$1<0 | 1, T>, a1: export_default$Z<0 | 1> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    hashArrayExtended(this: Array$1<number, T>, a1: export_default$Z<number> | Input<export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
    max(this: Array$1<number, T>): Array$1<0 | 1, T>;
    trimArray(this: Array$1<1, T>, a1: export_default$10<1> | Input<export_default$10<0 | 1>>): Array$1<1, T>;
    trimArray(this: Array$1<0 | 1, T>, a1: export_default$10<0 | 1> | Input<export_default$10<0 | 1>>): Array$1<0 | 1, T>;
    trimArray(this: Array$1<number, T>, a1: export_default$10<number> | Input<export_default$10<0 | 1>>): Array$1<0 | 1, T>;
    unnest(this: Array$1<1, T>): Setof<{
        from: {};
    }>;
    unnest(this: Array$1<0 | 1, T>): Setof<{
        from: {};
    }>;
    unnest(this: Array$1<number, T>): Setof<{
        from: {};
    }>;
    ["="]<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    ["="]<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    ["="]<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    [">="]<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    [">="]<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    [">="]<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    [">"]<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    [">"]<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    [">"]<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    ["<="]<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    ["<="]<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    ["<="]<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    ["<"]<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    ["<"]<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    ["<"]<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    ["<>"]<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    ["<>"]<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    ["<>"]<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    ["@>"]<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    ["@>"]<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: Array$1<1, T>, a1: Array$1<1, T>): export_default$1g<1>;
    ["&&"]<T extends Any>(this: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
    ["&&"]<T extends Any>(this: Array$1<number, T>, a1: Array$1<number, T>): export_default$1g<0 | 1>;
}

type ClassType<T> = {
    typeString(): string | undefined;
    subtype(): UseSubtype | undefined;
    parse(v: string): unknown;
    prototype: T;
};
type ArrayClass<T extends Any> = {
    new (v: string): Array$1<number, T>;
    ["new"](v: string): Array$1<1, T>;
    ["new"](v: null): Array$1<0, T>;
    ["new"](v: Expression): Array$1<0 | 1, T>;
    typeString(): string | undefined;
    subtype(): UseSubtype | undefined;
    parse(v: string): T["resultType"][];
};
declare class Array$1<N extends number, T extends Any> extends export_default<N, T> {
    static of<C extends ClassType<Any>>(subtype: C): ArrayClass<C["prototype"]>;
}

type Aggregate<T> = T extends Any ? NonNullable<ReturnType<T["asAggregate"]>> : never;
type AggregateOfRow<T extends RowLike | Scalar> = T extends Scalar ? Aggregate<T> : {
    [K in keyof T]: Aggregate<T[K]>;
};

type RowLike = {
    [key: string]: Any<unknown, 0 | 1>;
};
type RowLikeRelaxed = {
    [key: string]: Any<unknown, 0 | 1> | Primitive;
};
type Scalar = Any;
type ScalarRelaxed = Any<unknown, 0 | 1> | Primitive;
declare const isScalar: (value: unknown) => value is Scalar;
declare const isScalarRelaxed: (value: unknown) => value is ScalarRelaxed;
type ScalarResult<R extends Scalar> = R extends Any<infer R, infer Nullable> ? Nullable extends 0 ? null : Nullable extends 1 ? R : R | null : never;
type RowLikeResult<R extends RowLike | Scalar> = R extends Scalar ? RowLike : {
    [K in keyof R]: R extends RowLike ? ScalarResult<R[K]> : never;
};
declare abstract class SelectableExpression extends Expression {
    schema: RowLike;
    constructor(schema: RowLike);
    tableColumnAlias(): RawBuilder<unknown>;
}
declare class TableReferenceExpression extends SelectableExpression {
    table: QueryAlias;
    constructor(table: QueryAlias, schema: RowLike);
    compile(ctx: Context): RawBuilder<unknown>;
}
declare class ValuesExpression extends SelectableExpression {
    values: [RowLike, ...RowLike[]];
    constructor(values: [RowLike, ...RowLike[]]);
    compile(ctx: Context): RawBuilder<unknown>;
}
declare class SubqueryExpression extends SelectableExpression {
    subquery: Setof<any>;
    constructor(subquery: Setof<any>);
    compile(ctx: Context): RawBuilder<unknown>;
}
declare const aliasRowLike: <R extends RowLike>(queryAlias: QueryAlias, row: R) => R;
declare const aliasScalar: <S extends Scalar>(queryAlias: QueryAlias, scalar: S) => Any<unknown, 0 | 1>;
declare class ColumnAliasExpression extends Expression {
    alias: QueryAlias;
    column: string;
    constructor(alias: QueryAlias, column: string);
    compile(ctx: Context): RawBuilder<unknown>;
}
type JoinTables<Q extends Query> = {
    [key in keyof Q["joins"]]: ResultType<NonNullable<Q["joins"]>[key]["table"]["query"]>;
};
type ResultType<Q extends Query> = Q["select"] extends RowLike | Scalar ? Q["select"] : Q["from"];
declare const resultType: <Q extends Query>(query: Q) => ResultType<Q>;
type AwaitedResultType<Q extends Query> = Q["select"] extends Record$1<0 | 1, infer RL> ? RowLikeResult<RL>[] : Q["select"] extends Scalar ? ScalarResult<Q["select"]>[] : Q["select"] extends RowLike ? RowLikeResult<Q["select"]>[] : RowLikeResult<Q["from"]>[];
type Query = {
    select?: RowLike | Scalar;
    from: RowLike | Scalar;
    joins?: {
        [key: string]: {
            table: Setof<any>;
            row: RowLike;
            on: export_default$1g<0 | 1>;
        };
    };
    wheres?: [export_default$1g<0 | 1>, ...export_default$1g<0 | 1>[]];
    groupBy?: Any<unknown, 0 | 1>[];
};
type BindedSetof<Q extends Query> = typeof Setof<Q> & {
    "new"(fromExpr: Expression): Setof<Q>;
};
type SelectArgs<Q extends Query> = Q["groupBy"] extends unknown[] ? [AggregateOfRow<Q["from"]>, NonNullable<Q["groupBy"]>] : [
    Q["from"] extends RowLike ? Record$1<1, Q["from"]> & Q["from"] : Q["from"],
    JoinTables<Q>
];
declare class Setof<Q extends Query> extends Expression {
    rawFromExpr: Expression;
    fromAlias: QueryAlias;
    joinAliases: {
        [key: string]: QueryAlias;
    };
    query: Q;
    fromRow: RowLike | Scalar;
    constructor(rawFromExpr: Expression, fromAlias: QueryAlias, joinAliases: {
        [key: string]: QueryAlias;
    }, query: Q, fromRow: RowLike | Scalar);
    static of<R extends RowLike>(fromRow: R): {
        new (rawFromExpr: Expression, fromAlias: QueryAlias, joinAliases: {
            [key: string]: QueryAlias;
        }, query: {
            from: R;
            select: R;
            wheres: undefined;
            groupBy: undefined;
        }, fromRow: RowLike | Scalar): {
            rawFromExpr: Expression;
            fromAlias: QueryAlias;
            joinAliases: {
                [key: string]: QueryAlias;
            };
            query: {
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            };
            fromRow: RowLike | Scalar;
            toSelectArgs(): [R extends RowLike ? Record$1<1, R> & R : R, JoinTables<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            }>];
            select<S extends RowLikeRelaxed | ScalarRelaxed>(fn: (from_0: R extends RowLike ? Record$1<1, R> & R : R, from_1: JoinTables<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            }>) => S): Setof<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            } & {
                select: MaybePrimitiveToSqlType<S>;
            }>;
            where(fn: (from_0: R extends RowLike ? Record$1<1, R> & R : R, from_1: JoinTables<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            }>) => export_default$1g<0 | 1> | boolean): Setof<never>;
            groupBy<G extends Any<unknown, 0 | 1>[]>(fn: (from: R) => G): Setof<never>;
            joinTables(): JoinTables<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            }>;
            join<J extends Query, A extends string>(j: Setof<J>, as: A, on: (from: R, js: JoinTables<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            }> & { [a in A]: ResultType<J>; }) => export_default$1g<0 | 1> | boolean): Setof<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            } & {
                joins: {
                    [as]: {
                        table: Setof<J_1>;
                        on: export_default$1g<0 | 1> | export_default$1g<1>;
                        row: RowLike;
                    };
                };
            }>;
            subquery(): Setof<{
                from: ResultType<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                }>;
            }>;
            tableColumnAlias(): RawBuilder<unknown>;
            compile(ctxIn: Context): RawBuilder<unknown>;
            debug(): /*elided*/ any;
            execute(db: Kysely<any>): Promise<AwaitedResultType<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            }>>;
            scalar<S extends Scalar>(this: Setof<{
                select: S;
                from: Query["from"];
            }>): S;
        };
        "new"(fromExpr: Expression): Setof<{
            from: R;
        }>;
        of<R extends RowLike>(fromRow: R): /*elided*/ any;
        ofSchema(fromRow: {
            [key: string]: typeof Any<unknown>;
        }): {
            new (rawFromExpr: Expression, fromAlias: QueryAlias, joinAliases: {
                [key: string]: QueryAlias;
            }, query: {
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            }, fromRow: RowLike | Scalar): {
                rawFromExpr: Expression;
                fromAlias: QueryAlias;
                joinAliases: {
                    [key: string]: QueryAlias;
                };
                query: {
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                };
                fromRow: RowLike | Scalar;
                toSelectArgs(): [Record$1<1, RowLike> & RowLike, JoinTables<{
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                }>];
                select<S extends RowLikeRelaxed | ScalarRelaxed>(fn: (from_0: Record$1<1, RowLike> & RowLike, from_1: JoinTables<{
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                }>) => S): Setof<{
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                } & {
                    select: MaybePrimitiveToSqlType<S>;
                }>;
                where(fn: (from_0: Record$1<1, RowLike> & RowLike, from_1: JoinTables<{
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                }>) => export_default$1g<0 | 1> | boolean): Setof<never>;
                groupBy<G extends Any<unknown, 0 | 1>[]>(fn: (from: RowLike) => G): Setof<never>;
                joinTables(): JoinTables<{
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                }>;
                join<J extends Query, A extends string>(j: Setof<J>, as: A, on: (from: RowLike, js: JoinTables<{
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                }> & { [a in A]: ResultType<J>; }) => export_default$1g<0 | 1> | boolean): Setof<{
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                } & {
                    joins: {
                        [as]: {
                            table: Setof<J_1>;
                            on: export_default$1g<0 | 1> | export_default$1g<1>;
                            row: RowLike;
                        };
                    };
                }>;
                subquery(): Setof<{
                    from: RowLike;
                }>;
                tableColumnAlias(): RawBuilder<unknown>;
                compile(ctxIn: Context): RawBuilder<unknown>;
                debug(): /*elided*/ any;
                execute(db: Kysely<any>): Promise<{
                    [x: string]: unknown;
                }[]>;
                scalar<S extends Scalar>(this: Setof<{
                    select: S;
                    from: Query["from"];
                }>): S;
            };
            "new"(fromExpr: Expression): Setof<{
                from: RowLike;
            }>;
            of<R extends RowLike>(fromRow: R): /*elided*/ any;
            ofSchema(fromRow: {
                [key: string]: typeof Any<unknown>;
            }): /*elided*/ any;
        };
    };
    static ofSchema(fromRow: {
        [key: string]: typeof Any<unknown>;
    }): {
        new (rawFromExpr: Expression, fromAlias: QueryAlias, joinAliases: {
            [key: string]: QueryAlias;
        }, query: {
            from: RowLike;
            select: RowLike;
            wheres: undefined;
            groupBy: undefined;
        }, fromRow: RowLike | Scalar): {
            rawFromExpr: Expression;
            fromAlias: QueryAlias;
            joinAliases: {
                [key: string]: QueryAlias;
            };
            query: {
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            };
            fromRow: RowLike | Scalar;
            toSelectArgs(): [Record$1<1, RowLike> & RowLike, JoinTables<{
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            }>];
            select<S extends RowLikeRelaxed | ScalarRelaxed>(fn: (from_0: Record$1<1, RowLike> & RowLike, from_1: JoinTables<{
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            }>) => S): Setof<{
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            } & {
                select: MaybePrimitiveToSqlType<S>;
            }>;
            where(fn: (from_0: Record$1<1, RowLike> & RowLike, from_1: JoinTables<{
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            }>) => export_default$1g<0 | 1> | boolean): Setof<never>;
            groupBy<G extends Any<unknown, 0 | 1>[]>(fn: (from: RowLike) => G): Setof<never>;
            joinTables(): JoinTables<{
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            }>;
            join<J extends Query, A extends string>(j: Setof<J>, as: A, on: (from: RowLike, js: JoinTables<{
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            }> & { [a in A]: ResultType<J>; }) => export_default$1g<0 | 1> | boolean): Setof<{
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            } & {
                joins: {
                    [as]: {
                        table: Setof<J_1>;
                        on: export_default$1g<0 | 1> | export_default$1g<1>;
                        row: RowLike;
                    };
                };
            }>;
            subquery(): Setof<{
                from: RowLike;
            }>;
            tableColumnAlias(): RawBuilder<unknown>;
            compile(ctxIn: Context): RawBuilder<unknown>;
            debug(): /*elided*/ any;
            execute(db: Kysely<any>): Promise<{
                [x: string]: unknown;
            }[]>;
            scalar<S extends Scalar>(this: Setof<{
                select: S;
                from: Query["from"];
            }>): S;
        };
        "new"(fromExpr: Expression): Setof<{
            from: RowLike;
        }>;
        of<R extends RowLike>(fromRow: R): {
            new (rawFromExpr: Expression, fromAlias: QueryAlias, joinAliases: {
                [key: string]: QueryAlias;
            }, query: {
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            }, fromRow: RowLike | Scalar): {
                rawFromExpr: Expression;
                fromAlias: QueryAlias;
                joinAliases: {
                    [key: string]: QueryAlias;
                };
                query: {
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                };
                fromRow: RowLike | Scalar;
                toSelectArgs(): [R extends RowLike ? Record$1<1, R> & R : R, JoinTables<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                }>];
                select<S extends RowLikeRelaxed | ScalarRelaxed>(fn: (from_0: R extends RowLike ? Record$1<1, R> & R : R, from_1: JoinTables<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                }>) => S): Setof<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                } & {
                    select: MaybePrimitiveToSqlType<S>;
                }>;
                where(fn: (from_0: R extends RowLike ? Record$1<1, R> & R : R, from_1: JoinTables<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                }>) => export_default$1g<0 | 1> | boolean): Setof<never>;
                groupBy<G extends Any<unknown, 0 | 1>[]>(fn: (from: R) => G): Setof<never>;
                joinTables(): JoinTables<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                }>;
                join<J extends Query, A extends string>(j: Setof<J>, as: A, on: (from: R, js: JoinTables<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                }> & { [a in A]: ResultType<J>; }) => export_default$1g<0 | 1> | boolean): Setof<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                } & {
                    joins: {
                        [as]: {
                            table: Setof<J_1>;
                            on: export_default$1g<0 | 1> | export_default$1g<1>;
                            row: RowLike;
                        };
                    };
                }>;
                subquery(): Setof<{
                    from: ResultType<{
                        from: R;
                        select: R;
                        wheres: undefined;
                        groupBy: undefined;
                    }>;
                }>;
                tableColumnAlias(): RawBuilder<unknown>;
                compile(ctxIn: Context): RawBuilder<unknown>;
                debug(): /*elided*/ any;
                execute(db: Kysely<any>): Promise<AwaitedResultType<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                }>>;
                scalar<S extends Scalar>(this: Setof<{
                    select: S;
                    from: Query["from"];
                }>): S;
            };
            "new"(fromExpr: Expression): Setof<{
                from: R;
            }>;
            of<R extends RowLike>(fromRow: R): /*elided*/ any;
            ofSchema(fromRow: {
                [key: string]: typeof Any<unknown>;
            }): /*elided*/ any;
        };
        ofSchema(fromRow: {
            [key: string]: typeof Any<unknown>;
        }): /*elided*/ any;
    };
    toSelectArgs(): SelectArgs<Q>;
    select<S extends RowLikeRelaxed | ScalarRelaxed>(fn: (...from: SelectArgs<Q>) => S): Setof<Q & {
        select: MaybePrimitiveToSqlType<S>;
    }>;
    where(fn: (...from: SelectArgs<Q>) => export_default$1g<0 | 1> | boolean): Setof<Q & {
        wheres: [export_default$1g<0 | 1>, ...export_default$1g<0 | 1>[], export_default$1g<0 | 1> | export_default$1g<1>] | [export_default$1g<0 | 1> | export_default$1g<1>];
    }>;
    groupBy<G extends Any<unknown, 0 | 1>[]>(fn: (from: Q["from"]) => G): Setof<Q & {
        groupBy: [...(Q["groupBy"] extends unknown[] ? Q["groupBy"] : []), ...G];
    }>;
    joinTables(): JoinTables<Q>;
    join<J extends Query, A extends string>(j: Setof<J>, as: A, on: (from: Q["from"], js: JoinTables<Q> & {
        [a in A]: ResultType<J>;
    }) => export_default$1g<0 | 1> | boolean): Setof<Q & {
        joins: Q["joins"] & {
            [as]: {
                table: Setof<J>;
                on: export_default$1g<0 | 1> | export_default$1g<1>;
                row: RowLike;
            };
        };
    }>;
    subquery(): Setof<{
        from: ResultType<Q>;
    }>;
    tableColumnAlias(): RawBuilder<unknown>;
    compile(ctxIn: Context): RawBuilder<unknown>;
    debug(): this;
    execute(db: Kysely<any>): Promise<AwaitedResultType<Q>>;
    scalar<S extends Scalar>(this: Setof<{
        select: S;
        from: Query["from"];
    }>): S;
}
declare const values: <R extends RowLike>(...input: [R, ...R[]]) => Setof<{
    from: R;
}>;

type SchemaPrototype<S extends Schema> = {
    [key in keyof S]: S[key]["prototype"];
};
type RecordClass<T extends {
    [key in string]: Any<unknown, 0 | 1>;
}> = {
    new (v: string): Record$1<number, T> & T;
    ["new"](v: string): Record$1<1, T> & T;
    ["new"](v: null): Record$1<0, T> & T;
    ["new"](v: Expression): Record$1<0 | 1, T> & T;
    prototype: Record$1<0 | 1, T> & T;
    typeString(): string | undefined;
    subtype(): UseSubtype | undefined;
    parse(v: string): {
        [key in keyof T]: T[key]["resultType"];
    };
};
declare abstract class Record$1<N extends number, T extends RowLike> extends export_default$y<N, T> {
    abstract schema: {
        [K in keyof T]: ReturnType<T[K]["getClass"]>;
    };
    static of<S extends Schema>(schema: S): RecordClass<SchemaPrototype<S>>;
}

type Primitive = string | number | boolean | bigint;
type PrimitiveToSqlType<T extends Primitive> = T extends string ? export_default$l<1> : T extends number ? export_default$14<1> : T extends boolean ? export_default$1g<1> : T extends bigint ? export_default$L<1> : never;
type MaybePrimitiveToSqlType<T extends Primitive | Any | RowLikeRelaxed> = T extends Primitive ? PrimitiveToSqlType<T> : T extends Any ? T : T extends RowLikeRelaxed ? Record$1<1, {
    [K in keyof T]: MaybePrimitiveToSqlType<T[K]>;
}> : never;

declare const Generated: unique symbol;
declare class RawTableReferenceExpression extends SelectableExpression {
    table: string;
    constructor(table: string, schema: RowLike);
    compile(_ctx: Context): kysely.RawBuilder<unknown>;
}
type InstanceType<C> = C extends {
    new (...args: any[]): infer R;
} ? R : never;
type DbSchema = {
    [key: string]: TableSchema;
};
type TableSchema = {
    [key: string]: typeof Any<unknown, 0 | 1>;
};
type TableSchemaToRowLike<T extends TableSchema> = {
    [key in keyof T]: InstanceType<T[key]> & (T[key] extends typeof Generated ? typeof Generated : InstanceType<T[key]>);
};
type Database<DB extends DbSchema> = {
    [t in keyof DB]: Table<{
        from: TableSchemaToRowLike<DB[t]>;
    }>;
};
declare const database: <DB extends DbSchema>(schema: DB) => Database<DB>;
type InsertColumns<R extends RowLike> = {
    [key in keyof R as R[key] extends typeof Generated ? never : key]: R[key];
};
declare class Table<Q extends Query> extends Setof<Q> {
    rawFromExpr: RawTableReferenceExpression;
    fromAlias: QueryAlias;
    joinAliases: Record<string, QueryAlias>;
    query: Q;
    fromRow: RowLike;
    constructor(rawFromExpr: RawTableReferenceExpression, fromAlias: QueryAlias, joinAliases: Record<string, QueryAlias>, query: Q, fromRow: RowLike);
    static of<R extends RowLike>(fromRow: R): {
        new (rawFromExpr: RawTableReferenceExpression, fromAlias: QueryAlias, joinAliases: Record<string, QueryAlias>, query: {
            from: R;
            select: R;
            wheres: undefined;
            groupBy: undefined;
        }, fromRow: RowLike): {
            rawFromExpr: RawTableReferenceExpression;
            fromAlias: QueryAlias;
            joinAliases: Record<string, QueryAlias>;
            query: {
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            };
            fromRow: RowLike;
            insert<Q2 extends {
                from: RowLike;
                select: ResultType<Q2> extends RowLike ? InsertColumns<RowLike & ResultType<Q2>> : never;
            } | {
                from: ResultType<Q2> extends RowLike ? InsertColumns<RowLike & ResultType<Q2>> : never;
            }>(expr: Setof<Q2>): {
                execute: (db: Kysely<any>) => Promise<AwaitedResultType<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                }>>;
            };
            update<A extends {
                where: (t: R) => export_default$1g<0 | 1>;
                from?: ((t: R) => Setof<Query>) | undefined;
            }>(arg: A): UpdateBuilder<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            }, A>;
            toSelectArgs(): [R extends RowLike ? Record$1<1, R> & R : R, {}];
            select<S extends RowLikeRelaxed | ScalarRelaxed>(fn: (from_0: R extends RowLike ? Record$1<1, R> & R : R, from_1: {}) => S): Setof<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            } & {
                select: MaybePrimitiveToSqlType<S>;
            }>;
            where(fn: (from_0: R extends RowLike ? Record$1<1, R> & R : R, from_1: {}) => export_default$1g<0 | 1> | boolean): Setof<never>;
            groupBy<G extends Any<unknown, 0 | 1>[]>(fn: (from: R) => G): Setof<never>;
            joinTables(): {};
            join<J extends Query, A extends string>(j: Setof<J>, as: A, on: (from: R, js: {} & { [a in A]: ResultType<J>; }) => export_default$1g<0 | 1> | boolean): Setof<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            } & {
                joins: {
                    [as]: {
                        table: Setof<J_1>;
                        on: export_default$1g<0 | 1> | export_default$1g<1>;
                        row: RowLike;
                    };
                };
            }>;
            subquery(): Setof<{
                from: ResultType<{
                    from: R;
                    select: R;
                    wheres: undefined;
                    groupBy: undefined;
                }>;
            }>;
            tableColumnAlias(): kysely.RawBuilder<unknown>;
            compile(ctxIn: Context): kysely.RawBuilder<unknown>;
            debug(): /*elided*/ any;
            execute(db: Kysely<any>): Promise<AwaitedResultType<{
                from: R;
                select: R;
                wheres: undefined;
                groupBy: undefined;
            }>>;
            scalar<S extends Scalar>(this: Setof<{
                select: S;
                from: Query["from"];
            }>): S;
        };
        "new"(fromExpr: RawTableReferenceExpression): Table<{
            from: R;
        }>;
        of<R extends RowLike>(fromRow: R): /*elided*/ any;
        ofSchema(fromRow: {
            [key: string]: typeof Any<unknown>;
        }): {
            new (rawFromExpr: Expression, fromAlias: QueryAlias, joinAliases: {
                [key: string]: QueryAlias;
            }, query: {
                from: RowLike;
                select: RowLike;
                wheres: undefined;
                groupBy: undefined;
            }, fromRow: RowLike | Scalar): {
                rawFromExpr: Expression;
                fromAlias: QueryAlias;
                joinAliases: {
                    [key: string]: QueryAlias;
                };
                query: {
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                };
                fromRow: RowLike | Scalar;
                toSelectArgs(): [Record$1<1, RowLike> & RowLike, {}];
                select<S extends RowLikeRelaxed | ScalarRelaxed>(fn: (from_0: Record$1<1, RowLike> & RowLike, from_1: {}) => S): Setof<{
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                } & {
                    select: MaybePrimitiveToSqlType<S>;
                }>;
                where(fn: (from_0: Record$1<1, RowLike> & RowLike, from_1: {}) => export_default$1g<0 | 1> | boolean): Setof<never>;
                groupBy<G extends Any<unknown, 0 | 1>[]>(fn: (from: RowLike) => G): Setof<never>;
                joinTables(): {};
                join<J extends Query, A extends string>(j: Setof<J>, as: A, on: (from: RowLike, js: {} & { [a in A]: ResultType<J>; }) => export_default$1g<0 | 1> | boolean): Setof<{
                    from: RowLike;
                    select: RowLike;
                    wheres: undefined;
                    groupBy: undefined;
                } & {
                    joins: {
                        [as]: {
                            table: Setof<J_1>;
                            on: export_default$1g<0 | 1> | export_default$1g<1>;
                            row: RowLike;
                        };
                    };
                }>;
                subquery(): Setof<{
                    from: RowLike;
                }>;
                tableColumnAlias(): kysely.RawBuilder<unknown>;
                compile(ctxIn: Context): kysely.RawBuilder<unknown>;
                debug(): /*elided*/ any;
                execute(db: Kysely<any>): Promise<{
                    [x: string]: unknown;
                }[]>;
                scalar<S extends Scalar>(this: Setof<{
                    select: S;
                    from: Query["from"];
                }>): S;
            };
            "new"(fromExpr: Expression): Setof<{
                from: RowLike;
            }>;
            of<R_1 extends RowLike>(fromRow: R_1): {
                new (rawFromExpr: Expression, fromAlias: QueryAlias, joinAliases: {
                    [key: string]: QueryAlias;
                }, query: {
                    from: R_1;
                    select: R_1;
                    wheres: undefined;
                    groupBy: undefined;
                }, fromRow: RowLike | Scalar): {
                    rawFromExpr: Expression;
                    fromAlias: QueryAlias;
                    joinAliases: {
                        [key: string]: QueryAlias;
                    };
                    query: {
                        from: R_1;
                        select: R_1;
                        wheres: undefined;
                        groupBy: undefined;
                    };
                    fromRow: RowLike | Scalar;
                    toSelectArgs(): [R_1 extends RowLike ? Record$1<1, R_1> & R_1 : R_1, {}];
                    select<S extends RowLikeRelaxed | ScalarRelaxed>(fn: (from_0: R_1 extends RowLike ? Record$1<1, R_1> & R_1 : R_1, from_1: {}) => S): Setof<{
                        from: R_1;
                        select: R_1;
                        wheres: undefined;
                        groupBy: undefined;
                    } & {
                        select: MaybePrimitiveToSqlType<S>;
                    }>;
                    where(fn: (from_0: R_1 extends RowLike ? Record$1<1, R_1> & R_1 : R_1, from_1: {}) => export_default$1g<0 | 1> | boolean): Setof<never>;
                    groupBy<G extends Any<unknown, 0 | 1>[]>(fn: (from: R_1) => G): Setof<never>;
                    joinTables(): {};
                    join<J extends Query, A extends string>(j: Setof<J>, as: A, on: (from: R_1, js: {} & { [a in A]: ResultType<J>; }) => export_default$1g<0 | 1> | boolean): Setof<{
                        from: R_1;
                        select: R_1;
                        wheres: undefined;
                        groupBy: undefined;
                    } & {
                        joins: {
                            [as]: {
                                table: Setof<J_1>;
                                on: export_default$1g<0 | 1> | export_default$1g<1>;
                                row: RowLike;
                            };
                        };
                    }>;
                    subquery(): Setof<{
                        from: ResultType<{
                            from: R_1;
                            select: R_1;
                            wheres: undefined;
                            groupBy: undefined;
                        }>;
                    }>;
                    tableColumnAlias(): kysely.RawBuilder<unknown>;
                    compile(ctxIn: Context): kysely.RawBuilder<unknown>;
                    debug(): /*elided*/ any;
                    execute(db: Kysely<any>): Promise<AwaitedResultType<{
                        from: R_1;
                        select: R_1;
                        wheres: undefined;
                        groupBy: undefined;
                    }>>;
                    scalar<S extends Scalar>(this: Setof<{
                        select: S;
                        from: Query["from"];
                    }>): S;
                };
                "new"(fromExpr: Expression): Setof<{
                    from: R_1;
                }>;
                of<R_1 extends RowLike>(fromRow: R_1): /*elided*/ any;
                ofSchema(fromRow: {
                    [key: string]: typeof Any<unknown>;
                }): /*elided*/ any;
            };
            ofSchema(fromRow: {
                [key: string]: typeof Any<unknown>;
            }): /*elided*/ any;
        };
    };
    insert<Q2 extends {
        from: RowLike;
        select: ResultType<Q2> extends RowLike ? InsertColumns<ResultType<Q2>> : never;
    } | {
        from: ResultType<Q2> extends RowLike ? InsertColumns<ResultType<Q2>> : never;
    }>(expr: Setof<Q2>): {
        execute: (db: Kysely<any>) => Promise<AwaitedResultType<Q>>;
    };
    update<A extends {
        where: (t: Q["from"]) => export_default$1g<0 | 1>;
        from?: (t: Q["from"]) => Setof<Query>;
    }>(arg: A): UpdateBuilder<Q, A>;
}
declare class UpdateBuilder<Q extends Query, A extends {
    where: (t: Q["from"]) => export_default$1g<0 | 1>;
    from?: (t: Q["from"]) => Setof<Query>;
}> {
    table: Table<Q>;
    arg: A;
    constructor(table: Table<Q>, arg: A);
    set(setCb: (t: Q["from"], ...f: A["from"] extends (t: Q["from"]) => infer R ? R extends Setof<Query> ? SelectArgs<R["query"]> : [] : []) => Partial<Q["from"]>): {
        execute(db: Kysely<any>): Promise<AwaitedResultType<Q>>;
    };
}

declare class SelectableFunctionExpression extends SelectableExpression {
    fnExpr: FunctionExpression;
    constructor(fnExpr: FunctionExpression, schema: RowLike);
    compile(ctx: Context): kysely.RawBuilder<unknown>;
}
type TypedFunctionDefinition = {
    ret: typeof Any<unknown, number> | BindedSetof<any>;
    args: (typeof Any<unknown>)[];
    isOperator: boolean;
} | ((args: {
    T: typeof Any<unknown, number>;
    R: Schema;
}) => {
    ret: typeof Any<unknown, number> | BindedSetof<any>;
    args: (typeof Any<unknown, number>)[];
    isOperator: boolean;
});
declare const sqlFunction: (name: string, defn: TypedFunctionDefinition[], args: unknown[]) => Any | Setof<any>;

declare function riFKeyCascadeDel(): export_default$f<0 | 1>;
declare function riFKeyCascadeUpd(): export_default$f<0 | 1>;
declare function riFKeyCheckIns(): export_default$f<0 | 1>;
declare function riFKeyCheckUpd(): export_default$f<0 | 1>;
declare function riFKeyNoactionDel(): export_default$f<0 | 1>;
declare function riFKeyNoactionUpd(): export_default$f<0 | 1>;
declare function riFKeyRestrictDel(): export_default$f<0 | 1>;
declare function riFKeyRestrictUpd(): export_default$f<0 | 1>;
declare function riFKeySetdefaultDel(): export_default$f<0 | 1>;
declare function riFKeySetdefaultUpd(): export_default$f<0 | 1>;
declare function riFKeySetnullDel(): export_default$f<0 | 1>;
declare function riFKeySetnullUpd(): export_default$f<0 | 1>;
declare function abbrev(a0: export_default$1a<0 | 1>): export_default$l<0 | 1>;
declare function abbrev(a0: export_default$13<0 | 1>): export_default$l<0 | 1>;
declare function abs(a0: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function abs(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function abs(a0: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function abs(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function abs(a0: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function abs(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function aclcontains(a0: Array$1<0 | 1, export_default$1m<0 | 1>>, a1: export_default$1m<0 | 1>): export_default$1g<0 | 1>;
declare function acldefault(a0: export_default$1c<0 | 1>, a1: export_default$I<0 | 1>): Array$1<0 | 1, export_default$1m<0 | 1>>;
declare function aclexplode(a0: Array$1<0 | 1, export_default$1m<0 | 1>>): Setof<{
    from: {
        grantor: export_default$I<0 | 1>;
        grantee: export_default$I<0 | 1>;
        privilege_type: export_default$l<0 | 1>;
        is_grantable: export_default$1g<0 | 1>;
    };
}>;
declare function aclinsert(a0: Array$1<0 | 1, export_default$1m<0 | 1>>, a1: export_default$1m<0 | 1>): Array$1<0 | 1, export_default$1m<0 | 1>>;
declare function aclitemeq(a0: export_default$1m<0 | 1>, a1: export_default$1m<0 | 1>): export_default$1g<0 | 1>;
declare function aclremove(a0: Array$1<0 | 1, export_default$1m<0 | 1>>, a1: export_default$1m<0 | 1>): Array$1<0 | 1, export_default$1m<0 | 1>>;
declare function acos(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function acosd(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function acosh(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function age(a0: export_default$3<0 | 1>): export_default$10<0 | 1>;
declare function age(a0: export_default$i<0 | 1>): export_default$W<0 | 1>;
declare function age(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$W<0 | 1>;
declare function age(a0: export_default$h<0 | 1>): export_default$W<0 | 1>;
declare function age(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$W<0 | 1>;
declare function amvalidate(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function anyValue<T extends Any>(a0: T): T;
declare function anyValueTransfn<T extends Any>(a0: T, a1: T): T;
declare function anytextcat<T extends Any>(a0: T, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function area(a0: export_default$1f<0 | 1>): export_default$14<0 | 1>;
declare function area(a0: export_default$19<0 | 1>): export_default$14<0 | 1>;
declare function area(a0: export_default$G<0 | 1>): export_default$14<0 | 1>;
declare function arrayAgg<T extends Any>(a0: Array$1<number, T>): Array$1<0 | 1, T>;
declare function arrayAgg<T extends Any>(a0: T): Array$1<0 | 1, T>;
declare function arrayAppend<T extends Any>(a0: Array$1<0 | 1, T>, a1: T): Array$1<0 | 1, T>;
declare function arrayCat<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
declare function arrayDims<T extends Any>(a0: Array$1<0 | 1, T>): export_default$l<0 | 1>;
declare function arrayEq<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
declare function arrayFill<T extends Any>(a0: T, a1: Array$1<0 | 1, export_default$10<0 | 1>>): Array$1<0 | 1, T>;
declare function arrayFill<T extends Any>(a0: T, a1: Array$1<0 | 1, export_default$10<0 | 1>>, a2: Array$1<0 | 1, export_default$10<0 | 1>>): Array$1<0 | 1, T>;
declare function arrayGe<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
declare function arrayGt<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
declare function arrayLarger<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
declare function arrayLe<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
declare function arrayLength<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function arrayLower<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function arrayLt<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
declare function arrayNdims<T extends Any>(a0: Array$1<0 | 1, T>): export_default$10<0 | 1>;
declare function arrayNe<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
declare function arrayPosition<T extends Any>(a0: Array$1<0 | 1, T>, a1: T): export_default$10<0 | 1>;
declare function arrayPosition<T extends Any>(a0: Array$1<0 | 1, T>, a1: T, a2: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function arrayPositions<T extends Any>(a0: Array$1<0 | 1, T>, a1: T): Array$1<0 | 1, export_default$10<0 | 1>>;
declare function arrayPrepend<T extends Any>(a0: T, a1: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
declare function arrayRemove<T extends Any>(a0: Array$1<0 | 1, T>, a1: T): Array$1<0 | 1, T>;
declare function arrayReplace<T extends Any>(a0: Array$1<0 | 1, T>, a1: T, a2: T): Array$1<0 | 1, T>;
declare function arraySample<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$10<0 | 1>): Array$1<0 | 1, T>;
declare function arrayShuffle<T extends Any>(a0: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
declare function arraySmaller<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): Array$1<0 | 1, T>;
declare function arrayToJson<T extends Any>(a0: Array$1<0 | 1, T>): export_default$V<0 | 1>;
declare function arrayToJson<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$1g<0 | 1>): export_default$V<0 | 1>;
declare function arrayToString<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function arrayToString<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function arrayToTsvector(a0: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$9<0 | 1>;
declare function arrayUpper<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function arraycontained<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
declare function arraycontains<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
declare function arrayoverlap<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$1g<0 | 1>;
declare function ascii(a0: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function asind(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function asinh(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function atan(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function atan2(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function atan2D(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function atand(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function atanh(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function avg(a0: export_default$15<number>): export_default$14<0 | 1>;
declare function avg(a0: export_default$14<number>): export_default$14<0 | 1>;
declare function avg(a0: export_default$W<number>): export_default$W<0 | 1>;
declare function avg(a0: export_default$12<number>): export_default$L<0 | 1>;
declare function avg(a0: export_default$10<number>): export_default$L<0 | 1>;
declare function avg(a0: export_default$Z<number>): export_default$L<0 | 1>;
declare function avg(a0: export_default$L<number>): export_default$L<0 | 1>;
declare function binaryUpgradeAddSubRelState(a0: export_default$l<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$1c<0 | 1>, a3: export_default$E<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeCreateEmptyExtension(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>, a4: Array$1<0 | 1, export_default$I<0 | 1>>, a5: Array$1<0 | 1, export_default$l<0 | 1>>, a6: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$4<0 | 1>;
declare function binaryUpgradeLogicalSlotHasCaughtUp(a0: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function binaryUpgradeReploriginAdvance(a0: export_default$l<0 | 1>, a1: export_default$E<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetMissingValue(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextArrayPgTypeOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextHeapPgClassOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextHeapRelfilenode(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextIndexPgClassOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextIndexRelfilenode(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextMultirangeArrayPgTypeOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextMultirangePgTypeOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextPgAuthidOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextPgEnumOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextPgTablespaceOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextPgTypeOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextToastPgClassOid(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetNextToastRelfilenode(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function binaryUpgradeSetRecordInitPrivs(a0: export_default$1g<0 | 1>): export_default$4<0 | 1>;
declare function bit(a0: export_default$1h<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$1g<0 | 1>): export_default$1h<0 | 1>;
declare function bit(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1h<0 | 1>;
declare function bit(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$1h<0 | 1>;
declare function bitAnd(a0: export_default$1h<number>): export_default$1h<0 | 1>;
declare function bitAnd(a0: export_default$12<number>): export_default$12<0 | 1>;
declare function bitAnd(a0: export_default$10<number>): export_default$10<0 | 1>;
declare function bitAnd(a0: export_default$Z<number>): export_default$Z<0 | 1>;
declare function bitCount(a0: export_default$1h<0 | 1>): export_default$Z<0 | 1>;
declare function bitCount(a0: export_default$1d<0 | 1>): export_default$Z<0 | 1>;
declare function bitLength(a0: export_default$1h<0 | 1>): export_default$10<0 | 1>;
declare function bitLength(a0: export_default$1d<0 | 1>): export_default$10<0 | 1>;
declare function bitLength(a0: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function bitOr(a0: export_default$1h<number>): export_default$1h<0 | 1>;
declare function bitOr(a0: export_default$12<number>): export_default$12<0 | 1>;
declare function bitOr(a0: export_default$10<number>): export_default$10<0 | 1>;
declare function bitOr(a0: export_default$Z<number>): export_default$Z<0 | 1>;
declare function bitXor(a0: export_default$1h<number>): export_default$1h<0 | 1>;
declare function bitXor(a0: export_default$12<number>): export_default$12<0 | 1>;
declare function bitXor(a0: export_default$10<number>): export_default$10<0 | 1>;
declare function bitXor(a0: export_default$Z<number>): export_default$Z<0 | 1>;
declare function bitand(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
declare function bitcat(a0: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$6<0 | 1>;
declare function bitcmp(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$10<0 | 1>;
declare function biteq(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
declare function bitge(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
declare function bitgt(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
declare function bitle(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
declare function bitlt(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
declare function bitne(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1g<0 | 1>;
declare function bitnot(a0: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
declare function bitor(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
declare function bitshiftleft(a0: export_default$1h<0 | 1>, a1: export_default$10<0 | 1>): export_default$1h<0 | 1>;
declare function bitshiftright(a0: export_default$1h<0 | 1>, a1: export_default$10<0 | 1>): export_default$1h<0 | 1>;
declare function bitxor(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$1h<0 | 1>;
declare function bool(a0: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function bool(a0: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function boolAnd(a0: export_default$1g<number>): export_default$1g<0 | 1>;
declare function boolOr(a0: export_default$1g<number>): export_default$1g<0 | 1>;
declare function boolandStatefunc(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function booleq(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function boolge(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function boolgt(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function boolle(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function boollt(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function boolne(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function boolorStatefunc(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function boundBox(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1f<0 | 1>;
declare function box(a0: export_default$19<0 | 1>): export_default$1f<0 | 1>;
declare function box(a0: export_default$A<0 | 1>): export_default$1f<0 | 1>;
declare function box(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
declare function box(a0: export_default$z<0 | 1>): export_default$1f<0 | 1>;
declare function boxAbove(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxAboveEq(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxAdd(a0: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
declare function boxBelow(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxBelowEq(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxCenter(a0: export_default$1f<0 | 1>): export_default$A<0 | 1>;
declare function boxContainPt(a0: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function boxContained(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxDistance(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$14<0 | 1>;
declare function boxDiv(a0: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
declare function boxEq(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxGe(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxGt(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxIntersect(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1f<0 | 1>;
declare function boxLe(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxLeft(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxLt(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxMul(a0: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
declare function boxOverabove(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxOverbelow(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxOverlap(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxOverlap(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxOverleft(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxOverright(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxRight(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxSame(a0: export_default$1f<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function boxSub(a0: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$1f<0 | 1>;
declare function bpchar(a0: export_default$1e<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$1g<0 | 1>): export_default$1e<0 | 1>;
declare function bpchar(a0: export_default$1c<0 | 1>): export_default$1e<0 | 1>;
declare function bpchar(a0: export_default$M<0 | 1>): export_default$1e<0 | 1>;
declare function bpcharLarger(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1e<0 | 1>;
declare function bpcharPatternGe(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharPatternGt(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharPatternLe(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharPatternLt(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharSmaller(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1e<0 | 1>;
declare function bpcharcmp(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$10<0 | 1>;
declare function bpchareq(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharge(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpchargt(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpchariclike(a0: export_default$1e<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharicnlike(a0: export_default$1e<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharicregexeq(a0: export_default$1e<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharicregexne(a0: export_default$1e<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharle(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharlike(a0: export_default$1e<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharlt(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharne(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharnlike(a0: export_default$1e<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharregexeq(a0: export_default$1e<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function bpcharregexne(a0: export_default$1e<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function brinDesummarizeRange(a0: export_default$w<0 | 1>, a1: export_default$Z<0 | 1>): export_default$4<0 | 1>;
declare function brinSummarizeNewValues(a0: export_default$w<0 | 1>): export_default$10<0 | 1>;
declare function brinSummarizeRange(a0: export_default$w<0 | 1>, a1: export_default$Z<0 | 1>): export_default$10<0 | 1>;
declare function broadcast(a0: export_default$13<0 | 1>): export_default$13<0 | 1>;
declare function btarraycmp<T extends Any>(a0: Array$1<0 | 1, T>, a1: Array$1<0 | 1, T>): export_default$10<0 | 1>;
declare function btboolcmp(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>): export_default$10<0 | 1>;
declare function btbpcharPatternCmp(a0: export_default$1e<0 | 1>, a1: export_default$1e<0 | 1>): export_default$10<0 | 1>;
declare function btcharcmp(a0: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$10<0 | 1>;
declare function btequalimage(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function btfloat48Cmp(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$10<0 | 1>;
declare function btfloat4Cmp(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$10<0 | 1>;
declare function btfloat84Cmp(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$10<0 | 1>;
declare function btfloat8Cmp(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$10<0 | 1>;
declare function btint24Cmp(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function btint28Cmp(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$10<0 | 1>;
declare function btint2Cmp(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
declare function btint42Cmp(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
declare function btint48Cmp(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$10<0 | 1>;
declare function btint4Cmp(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function btint82Cmp(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
declare function btint84Cmp(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function btint8Cmp(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$10<0 | 1>;
declare function btnamecmp(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$10<0 | 1>;
declare function btnametextcmp(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function btoidcmp(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$10<0 | 1>;
declare function btoidvectorcmp(a0: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$10<0 | 1>;
declare function btrecordcmp<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$10<0 | 1>;
declare function btrecordimagecmp<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$10<0 | 1>;
declare function btrim(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
declare function btrim(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function btrim(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function bttextPatternCmp(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function bttextcmp(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function bttextnamecmp(a0: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$10<0 | 1>;
declare function bttidcmp(a0: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$10<0 | 1>;
declare function btvarstrequalimage(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function byteacat(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
declare function byteacmp(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$10<0 | 1>;
declare function byteaeq(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function byteage(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function byteagt(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function byteale(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function bytealike(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function bytealt(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function byteane(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function byteanlike(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function cardinality<T extends Any>(a0: Array$1<0 | 1, T>): export_default$10<0 | 1>;
declare function cashCmp(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$10<0 | 1>;
declare function cashDivCash(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$14<0 | 1>;
declare function cashDivFlt4(a0: export_default$N<0 | 1>, a1: export_default$15<0 | 1>): export_default$N<0 | 1>;
declare function cashDivFlt8(a0: export_default$N<0 | 1>, a1: export_default$14<0 | 1>): export_default$N<0 | 1>;
declare function cashDivInt2(a0: export_default$N<0 | 1>, a1: export_default$12<0 | 1>): export_default$N<0 | 1>;
declare function cashDivInt4(a0: export_default$N<0 | 1>, a1: export_default$10<0 | 1>): export_default$N<0 | 1>;
declare function cashDivInt8(a0: export_default$N<0 | 1>, a1: export_default$Z<0 | 1>): export_default$N<0 | 1>;
declare function cashEq(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
declare function cashGe(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
declare function cashGt(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
declare function cashLe(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
declare function cashLt(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
declare function cashMi(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
declare function cashMulFlt4(a0: export_default$N<0 | 1>, a1: export_default$15<0 | 1>): export_default$N<0 | 1>;
declare function cashMulFlt8(a0: export_default$N<0 | 1>, a1: export_default$14<0 | 1>): export_default$N<0 | 1>;
declare function cashMulInt2(a0: export_default$N<0 | 1>, a1: export_default$12<0 | 1>): export_default$N<0 | 1>;
declare function cashMulInt4(a0: export_default$N<0 | 1>, a1: export_default$10<0 | 1>): export_default$N<0 | 1>;
declare function cashMulInt8(a0: export_default$N<0 | 1>, a1: export_default$Z<0 | 1>): export_default$N<0 | 1>;
declare function cashNe(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$1g<0 | 1>;
declare function cashPl(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
declare function cashWords(a0: export_default$N<0 | 1>): export_default$l<0 | 1>;
declare function cashlarger(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
declare function cashsmaller(a0: export_default$N<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
declare function cbrt(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function ceil(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function ceil(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function ceiling(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function ceiling(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function center(a0: export_default$1f<0 | 1>): export_default$A<0 | 1>;
declare function center(a0: export_default$19<0 | 1>): export_default$A<0 | 1>;
declare function char(a0: export_default$10<0 | 1>): export_default$1c<0 | 1>;
declare function char(a0: export_default$l<0 | 1>): export_default$1c<0 | 1>;
declare function charLength(a0: export_default$1e<0 | 1>): export_default$10<0 | 1>;
declare function charLength(a0: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function characterLength(a0: export_default$1e<0 | 1>): export_default$10<0 | 1>;
declare function characterLength(a0: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function chareq(a0: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
declare function charge(a0: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
declare function chargt(a0: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
declare function charle(a0: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
declare function charlt(a0: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
declare function charne(a0: export_default$1c<0 | 1>, a1: export_default$1c<0 | 1>): export_default$1g<0 | 1>;
declare function chr(a0: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function cideq(a0: export_default$1b<0 | 1>, a1: export_default$1b<0 | 1>): export_default$1g<0 | 1>;
declare function cidr(a0: export_default$13<0 | 1>): export_default$1a<0 | 1>;
declare function circle(a0: export_default$1f<0 | 1>): export_default$19<0 | 1>;
declare function circle(a0: export_default$A<0 | 1>, a1: export_default$14<0 | 1>): export_default$19<0 | 1>;
declare function circle(a0: export_default$z<0 | 1>): export_default$19<0 | 1>;
declare function circleAbove(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleAddPt(a0: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
declare function circleBelow(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleCenter(a0: export_default$19<0 | 1>): export_default$A<0 | 1>;
declare function circleContainPt(a0: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function circleContained(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleDistance(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$14<0 | 1>;
declare function circleDivPt(a0: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
declare function circleEq(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleGe(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleGt(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleLe(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleLeft(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleLt(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleMulPt(a0: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
declare function circleNe(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleOverabove(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleOverbelow(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleOverlap(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleOverleft(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleOverright(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleRight(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleSame(a0: export_default$19<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function circleSubPt(a0: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$19<0 | 1>;
declare function clockTimestamp(): export_default$h<0 | 1>;
declare function closeLs(a0: export_default$R<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
declare function closeLseg(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
declare function closePb(a0: export_default$A<0 | 1>, a1: export_default$1f<0 | 1>): export_default$A<0 | 1>;
declare function closePl(a0: export_default$A<0 | 1>, a1: export_default$R<0 | 1>): export_default$A<0 | 1>;
declare function closePs(a0: export_default$A<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
declare function closeSb(a0: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$A<0 | 1>;
declare function colDescription(a0: export_default$I<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function concat(a0: Any<0 | 1>): export_default$l<0 | 1>;
declare function concatWs(a0: export_default$l<0 | 1>, a1: Any<0 | 1>): export_default$l<0 | 1>;
declare function convert(a0: export_default$1d<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$M<0 | 1>): export_default$1d<0 | 1>;
declare function convertFrom(a0: export_default$1d<0 | 1>, a1: export_default$M<0 | 1>): export_default$l<0 | 1>;
declare function convertTo(a0: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1d<0 | 1>;
declare function corr(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function cos(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function cosd(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function cosh(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function cot(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function cotd(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function count(): export_default$Z<0 | 1>;
declare function count(a0: Any<number>): export_default$Z<0 | 1>;
declare function covarPop(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function covarSamp(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function cumeDist(): export_default$14<0 | 1>;
declare function cumeDist(a0: Any<number>): export_default$14<0 | 1>;
declare function currentDatabase(): export_default$M<0 | 1>;
declare function currentQuery(): export_default$l<0 | 1>;
declare function currentSchema(): export_default$M<0 | 1>;
declare function currentSchemas(a0: export_default$1g<0 | 1>): Array$1<0 | 1, export_default$M<0 | 1>>;
declare function currentSetting(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function currentSetting(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function currentUser(): export_default$M<0 | 1>;
declare function currtid2(a0: export_default$l<0 | 1>, a1: export_default$k<0 | 1>): export_default$k<0 | 1>;
declare function currval(a0: export_default$w<0 | 1>): export_default$Z<0 | 1>;
declare function cursorToXml(a0: export_default$x<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function cursorToXmlschema(a0: export_default$x<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function databaseToXml(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function databaseToXmlAndXmlschema(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function databaseToXmlschema(a0: export_default$1g<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function date(a0: export_default$i<0 | 1>): export_default$18<0 | 1>;
declare function date(a0: export_default$h<0 | 1>): export_default$18<0 | 1>;
declare function dateAdd(a0: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
declare function dateAdd(a0: export_default$h<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$l<0 | 1>): export_default$h<0 | 1>;
declare function dateCmp(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$10<0 | 1>;
declare function dateCmpTimestamp(a0: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$10<0 | 1>;
declare function dateCmpTimestamptz(a0: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$10<0 | 1>;
declare function dateEq(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function dateEqTimestamp(a0: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function dateEqTimestamptz(a0: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function dateGe(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function dateGeTimestamp(a0: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function dateGeTimestamptz(a0: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function dateGt(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function dateGtTimestamp(a0: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function dateGtTimestamptz(a0: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function dateLarger(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$18<0 | 1>;
declare function dateLe(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function dateLeTimestamp(a0: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function dateLeTimestamptz(a0: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function dateLt(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function dateLtTimestamp(a0: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function dateLtTimestamptz(a0: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function dateMi(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$10<0 | 1>;
declare function dateMiInterval(a0: export_default$18<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
declare function dateMii(a0: export_default$18<0 | 1>, a1: export_default$10<0 | 1>): export_default$18<0 | 1>;
declare function dateNe(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function dateNeTimestamp(a0: export_default$18<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function dateNeTimestamptz(a0: export_default$18<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function datePart(a0: export_default$l<0 | 1>, a1: export_default$18<0 | 1>): export_default$14<0 | 1>;
declare function datePart(a0: export_default$l<0 | 1>, a1: export_default$W<0 | 1>): export_default$14<0 | 1>;
declare function datePart(a0: export_default$l<0 | 1>, a1: export_default$j<0 | 1>): export_default$14<0 | 1>;
declare function datePart(a0: export_default$l<0 | 1>, a1: export_default$i<0 | 1>): export_default$14<0 | 1>;
declare function datePart(a0: export_default$l<0 | 1>, a1: export_default$h<0 | 1>): export_default$14<0 | 1>;
declare function datePart(a0: export_default$l<0 | 1>, a1: export_default$g<0 | 1>): export_default$14<0 | 1>;
declare function datePlInterval(a0: export_default$18<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
declare function datePli(a0: export_default$18<0 | 1>, a1: export_default$10<0 | 1>): export_default$18<0 | 1>;
declare function dateSmaller(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$18<0 | 1>;
declare function dateSubtract(a0: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
declare function dateSubtract(a0: export_default$h<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$l<0 | 1>): export_default$h<0 | 1>;
declare function dateTrunc(a0: export_default$l<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function dateTrunc(a0: export_default$l<0 | 1>, a1: export_default$i<0 | 1>): export_default$i<0 | 1>;
declare function dateTrunc(a0: export_default$l<0 | 1>, a1: export_default$h<0 | 1>): export_default$h<0 | 1>;
declare function dateTrunc(a0: export_default$l<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$l<0 | 1>): export_default$h<0 | 1>;
declare function datemultirange(): export_default$17<0 | 1>;
declare function datemultirange(a0: Array$1<0 | 1, export_default$16<0 | 1>>): export_default$17<0 | 1>;
declare function datemultirange(a0: export_default$16<0 | 1>): export_default$17<0 | 1>;
declare function daterange(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$16<0 | 1>;
declare function daterange(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>, a2: export_default$l<0 | 1>): export_default$16<0 | 1>;
declare function daterangeCanonical(a0: export_default$16<0 | 1>): export_default$16<0 | 1>;
declare function daterangeSubdiff(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>): export_default$14<0 | 1>;
declare function datetimePl(a0: export_default$18<0 | 1>, a1: export_default$j<0 | 1>): export_default$i<0 | 1>;
declare function datetimetzPl(a0: export_default$18<0 | 1>, a1: export_default$g<0 | 1>): export_default$h<0 | 1>;
declare function dcbrt(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function decode(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1d<0 | 1>;
declare function degrees(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function denseRank(): export_default$Z<0 | 1>;
declare function denseRank(a0: Any<number>): export_default$Z<0 | 1>;
declare function dexp(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function diagonal(a0: export_default$1f<0 | 1>): export_default$Q<0 | 1>;
declare function diameter(a0: export_default$19<0 | 1>): export_default$14<0 | 1>;
declare function distBp(a0: export_default$1f<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
declare function distBs(a0: export_default$1f<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
declare function distCpoint(a0: export_default$19<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
declare function distCpoly(a0: export_default$19<0 | 1>, a1: export_default$z<0 | 1>): export_default$14<0 | 1>;
declare function distLp(a0: export_default$R<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
declare function distLs(a0: export_default$R<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
declare function distPathp(a0: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
declare function distPb(a0: export_default$A<0 | 1>, a1: export_default$1f<0 | 1>): export_default$14<0 | 1>;
declare function distPc(a0: export_default$A<0 | 1>, a1: export_default$19<0 | 1>): export_default$14<0 | 1>;
declare function distPl(a0: export_default$A<0 | 1>, a1: export_default$R<0 | 1>): export_default$14<0 | 1>;
declare function distPolyc(a0: export_default$z<0 | 1>, a1: export_default$19<0 | 1>): export_default$14<0 | 1>;
declare function distPolyp(a0: export_default$z<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
declare function distPpath(a0: export_default$A<0 | 1>, a1: export_default$G<0 | 1>): export_default$14<0 | 1>;
declare function distPpoly(a0: export_default$A<0 | 1>, a1: export_default$z<0 | 1>): export_default$14<0 | 1>;
declare function distPs(a0: export_default$A<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
declare function distSb(a0: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$14<0 | 1>;
declare function distSl(a0: export_default$Q<0 | 1>, a1: export_default$R<0 | 1>): export_default$14<0 | 1>;
declare function distSp(a0: export_default$Q<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
declare function div(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function dlog1(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function dlog10(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function dpow(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function dround(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function dsqrt(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function dtrunc(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function elemContainedByMultirange<T extends Any>(a0: T, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function elemContainedByRange<T extends Any>(a0: T, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function encode(a0: export_default$1d<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function enumCmp<T extends Any>(a0: T, a1: T): export_default$10<0 | 1>;
declare function enumEq<T extends Any>(a0: T, a1: T): export_default$1g<0 | 1>;
declare function enumFirst<T extends Any>(a0: T): T;
declare function enumGe<T extends Any>(a0: T, a1: T): export_default$1g<0 | 1>;
declare function enumGt<T extends Any>(a0: T, a1: T): export_default$1g<0 | 1>;
declare function enumLarger<T extends Any>(a0: T, a1: T): T;
declare function enumLast<T extends Any>(a0: T): T;
declare function enumLe<T extends Any>(a0: T, a1: T): export_default$1g<0 | 1>;
declare function enumLt<T extends Any>(a0: T, a1: T): export_default$1g<0 | 1>;
declare function enumNe<T extends Any>(a0: T, a1: T): export_default$1g<0 | 1>;
declare function enumRange<T extends Any>(a0: T): Array$1<0 | 1, T>;
declare function enumRange<T extends Any>(a0: T, a1: T): Array$1<0 | 1, T>;
declare function enumSmaller<T extends Any>(a0: T, a1: T): T;
declare function erf(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function erfc(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function every(a0: export_default$1g<number>): export_default$1g<0 | 1>;
declare function exp(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function exp(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function extract(a0: export_default$l<0 | 1>, a1: export_default$18<0 | 1>): export_default$L<0 | 1>;
declare function extract(a0: export_default$l<0 | 1>, a1: export_default$W<0 | 1>): export_default$L<0 | 1>;
declare function extract(a0: export_default$l<0 | 1>, a1: export_default$j<0 | 1>): export_default$L<0 | 1>;
declare function extract(a0: export_default$l<0 | 1>, a1: export_default$i<0 | 1>): export_default$L<0 | 1>;
declare function extract(a0: export_default$l<0 | 1>, a1: export_default$h<0 | 1>): export_default$L<0 | 1>;
declare function extract(a0: export_default$l<0 | 1>, a1: export_default$g<0 | 1>): export_default$L<0 | 1>;
declare function factorial(a0: export_default$Z<0 | 1>): export_default$L<0 | 1>;
declare function family(a0: export_default$13<0 | 1>): export_default$10<0 | 1>;
declare function firstValue<T extends Any>(a0: T): T;
declare function float4(a0: export_default$14<0 | 1>): export_default$15<0 | 1>;
declare function float4(a0: export_default$12<0 | 1>): export_default$15<0 | 1>;
declare function float4(a0: export_default$10<0 | 1>): export_default$15<0 | 1>;
declare function float4(a0: export_default$Z<0 | 1>): export_default$15<0 | 1>;
declare function float4(a0: export_default$U<0 | 1>): export_default$15<0 | 1>;
declare function float4(a0: export_default$L<0 | 1>): export_default$15<0 | 1>;
declare function float48Div(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float48Eq(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float48Ge(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float48Gt(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float48Le(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float48Lt(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float48Mi(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float48Mul(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float48Ne(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float48Pl(a0: export_default$15<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float4Accum(a0: Array$1<0 | 1, export_default$14<0 | 1>>, a1: export_default$15<0 | 1>): Array$1<0 | 1, export_default$14<0 | 1>>;
declare function float4Abs(a0: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function float4Div(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function float4Eq(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float4Ge(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float4Gt(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float4Larger(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function float4Le(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float4Lt(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float4Mi(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function float4Mul(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function float4Ne(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float4Pl(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function float4Smaller(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function float4Um(a0: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function float4Up(a0: export_default$15<0 | 1>): export_default$15<0 | 1>;
declare function float8(a0: export_default$15<0 | 1>): export_default$14<0 | 1>;
declare function float8(a0: export_default$12<0 | 1>): export_default$14<0 | 1>;
declare function float8(a0: export_default$10<0 | 1>): export_default$14<0 | 1>;
declare function float8(a0: export_default$Z<0 | 1>): export_default$14<0 | 1>;
declare function float8(a0: export_default$U<0 | 1>): export_default$14<0 | 1>;
declare function float8(a0: export_default$L<0 | 1>): export_default$14<0 | 1>;
declare function float84Div(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$14<0 | 1>;
declare function float84Eq(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float84Ge(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float84Gt(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float84Le(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float84Lt(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float84Mi(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$14<0 | 1>;
declare function float84Mul(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$14<0 | 1>;
declare function float84Ne(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$1g<0 | 1>;
declare function float84Pl(a0: export_default$14<0 | 1>, a1: export_default$15<0 | 1>): export_default$14<0 | 1>;
declare function float8Accum(a0: Array$1<0 | 1, export_default$14<0 | 1>>, a1: export_default$14<0 | 1>): Array$1<0 | 1, export_default$14<0 | 1>>;
declare function float8Avg(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8Combine(a0: Array$1<0 | 1, export_default$14<0 | 1>>, a1: Array$1<0 | 1, export_default$14<0 | 1>>): Array$1<0 | 1, export_default$14<0 | 1>>;
declare function float8Corr(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8CovarPop(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8CovarSamp(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8RegrAccum(a0: Array$1<0 | 1, export_default$14<0 | 1>>, a1: export_default$14<0 | 1>, a2: export_default$14<0 | 1>): Array$1<0 | 1, export_default$14<0 | 1>>;
declare function float8RegrAvgx(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8RegrAvgy(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8RegrCombine(a0: Array$1<0 | 1, export_default$14<0 | 1>>, a1: Array$1<0 | 1, export_default$14<0 | 1>>): Array$1<0 | 1, export_default$14<0 | 1>>;
declare function float8RegrIntercept(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8RegrR2(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8RegrSlope(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8RegrSxx(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8RegrSxy(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8RegrSyy(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8StddevPop(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8StddevSamp(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8VarPop(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8VarSamp(a0: Array$1<0 | 1, export_default$14<0 | 1>>): export_default$14<0 | 1>;
declare function float8Abs(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float8Div(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float8Eq(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float8Ge(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float8Gt(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float8Larger(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float8Le(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float8Lt(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float8Mi(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float8Mul(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float8Ne(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$1g<0 | 1>;
declare function float8Pl(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float8Smaller(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float8Um(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function float8Up(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function floor(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function floor(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function flt4MulCash(a0: export_default$15<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
declare function flt8MulCash(a0: export_default$14<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
declare function fmgrCValidator(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function fmgrInternalValidator(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function fmgrSqlValidator(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function format(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function format(a0: export_default$l<0 | 1>, a1: Any<0 | 1>): export_default$l<0 | 1>;
declare function formatType(a0: export_default$I<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function gcd(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function gcd(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function gcd(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function genRandomUuid(): export_default$7<0 | 1>;
declare function generateSeries(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSeries(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSeries(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSeries(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$Z<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSeries(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSeries(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>, a2: export_default$L<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSeries(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$W<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSeries(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$W<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSeries(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$l<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSubscripts<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$10<0 | 1>): Setof<{
    from: {};
}>;
declare function generateSubscripts<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$10<0 | 1>, a2: export_default$1g<0 | 1>): Setof<{
    from: {};
}>;
declare function getBit(a0: export_default$1h<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function getBit(a0: export_default$1d<0 | 1>, a1: export_default$Z<0 | 1>): export_default$10<0 | 1>;
declare function getByte(a0: export_default$1d<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function getCurrentTsConfig(): export_default$u<0 | 1>;
declare function getdatabaseencoding(): export_default$M<0 | 1>;
declare function getpgusername(): export_default$M<0 | 1>;
declare function ginCleanPendingList(a0: export_default$w<0 | 1>): export_default$Z<0 | 1>;
declare function ginCmpTslexeme(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function ginCompareJsonb(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function hasAnyColumnPrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasAnyColumnPrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasAnyColumnPrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasAnyColumnPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasAnyColumnPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasAnyColumnPrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$12<0 | 1>, a3: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$12<0 | 1>, a3: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$I<0 | 1>, a1: export_default$12<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$12<0 | 1>, a3: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$12<0 | 1>, a3: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$l<0 | 1>, a1: export_default$12<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasColumnPrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasDatabasePrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasDatabasePrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasDatabasePrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasDatabasePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasDatabasePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasDatabasePrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasForeignDataWrapperPrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasForeignDataWrapperPrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasForeignDataWrapperPrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasForeignDataWrapperPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasForeignDataWrapperPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasForeignDataWrapperPrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasFunctionPrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasFunctionPrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasFunctionPrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasFunctionPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasFunctionPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasFunctionPrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasLanguagePrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasLanguagePrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasLanguagePrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasLanguagePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasLanguagePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasLanguagePrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasParameterPrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasParameterPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasParameterPrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSchemaPrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSchemaPrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSchemaPrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSchemaPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSchemaPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSchemaPrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSequencePrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSequencePrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSequencePrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSequencePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSequencePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasSequencePrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasServerPrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasServerPrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasServerPrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasServerPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasServerPrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasServerPrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablePrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablePrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablePrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablePrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablespacePrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablespacePrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablespacePrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablespacePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablespacePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTablespacePrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTypePrivilege(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTypePrivilege(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTypePrivilege(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTypePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTypePrivilege(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hasTypePrivilege(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function hashAclitem(a0: export_default$1m<0 | 1>): export_default$10<0 | 1>;
declare function hashAclitemExtended(a0: export_default$1m<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashArray<T extends Any>(a0: Array$1<0 | 1, T>): export_default$10<0 | 1>;
declare function hashArrayExtended<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashMultirange<T extends Any>(a0: export_default$1k<0 | 1, T>): export_default$10<0 | 1>;
declare function hashMultirangeExtended<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashNumeric(a0: export_default$L<0 | 1>): export_default$10<0 | 1>;
declare function hashNumericExtended(a0: export_default$L<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashRange<T extends Any>(a0: export_default$1i<0 | 1, T>): export_default$10<0 | 1>;
declare function hashRangeExtended<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashRecord<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>): export_default$10<0 | 1>;
declare function hashRecordExtended<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashbpchar(a0: export_default$1e<0 | 1>): export_default$10<0 | 1>;
declare function hashbpcharextended(a0: export_default$1e<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashchar(a0: export_default$1c<0 | 1>): export_default$10<0 | 1>;
declare function hashcharextended(a0: export_default$1c<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashenum<T extends Any>(a0: T): export_default$10<0 | 1>;
declare function hashenumextended<T extends Any>(a0: T, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashfloat4(a0: export_default$15<0 | 1>): export_default$10<0 | 1>;
declare function hashfloat4Extended(a0: export_default$15<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashfloat8(a0: export_default$14<0 | 1>): export_default$10<0 | 1>;
declare function hashfloat8Extended(a0: export_default$14<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashinet(a0: export_default$13<0 | 1>): export_default$10<0 | 1>;
declare function hashinetextended(a0: export_default$13<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashint2(a0: export_default$12<0 | 1>): export_default$10<0 | 1>;
declare function hashint2Extended(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashint4(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function hashint4Extended(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashint8(a0: export_default$Z<0 | 1>): export_default$10<0 | 1>;
declare function hashint8Extended(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashmacaddr(a0: export_default$P<0 | 1>): export_default$10<0 | 1>;
declare function hashmacaddr8(a0: export_default$O<0 | 1>): export_default$10<0 | 1>;
declare function hashmacaddr8Extended(a0: export_default$O<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashmacaddrextended(a0: export_default$P<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashname(a0: export_default$M<0 | 1>): export_default$10<0 | 1>;
declare function hashnameextended(a0: export_default$M<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashoid(a0: export_default$I<0 | 1>): export_default$10<0 | 1>;
declare function hashoidextended(a0: export_default$I<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashoidvector(a0: export_default$H<0 | 1>): export_default$10<0 | 1>;
declare function hashoidvectorextended(a0: export_default$H<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashtext(a0: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function hashtextextended(a0: export_default$l<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function hashtid(a0: export_default$k<0 | 1>): export_default$10<0 | 1>;
declare function hashtidextended(a0: export_default$k<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function height(a0: export_default$1f<0 | 1>): export_default$14<0 | 1>;
declare function host(a0: export_default$13<0 | 1>): export_default$l<0 | 1>;
declare function hostmask(a0: export_default$13<0 | 1>): export_default$13<0 | 1>;
declare function icuUnicodeVersion(): export_default$l<0 | 1>;
declare function inRange(a0: export_default$18<0 | 1>, a1: export_default$18<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$15<0 | 1>, a1: export_default$15<0 | 1>, a2: export_default$14<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>, a2: export_default$14<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>, a2: export_default$12<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>, a2: export_default$Z<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$12<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$Z<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$Z<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>, a2: export_default$L<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inRange(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>, a2: export_default$W<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function inetClientAddr(): export_default$13<0 | 1>;
declare function inetClientPort(): export_default$10<0 | 1>;
declare function inetMerge(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1a<0 | 1>;
declare function inetSameFamily(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function inetServerAddr(): export_default$13<0 | 1>;
declare function inetServerPort(): export_default$10<0 | 1>;
declare function inetand(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
declare function inetmi(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$Z<0 | 1>;
declare function inetmiInt8(a0: export_default$13<0 | 1>, a1: export_default$Z<0 | 1>): export_default$13<0 | 1>;
declare function inetnot(a0: export_default$13<0 | 1>): export_default$13<0 | 1>;
declare function inetor(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
declare function inetpl(a0: export_default$13<0 | 1>, a1: export_default$Z<0 | 1>): export_default$13<0 | 1>;
declare function initcap(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function int2(a0: export_default$15<0 | 1>): export_default$12<0 | 1>;
declare function int2(a0: export_default$14<0 | 1>): export_default$12<0 | 1>;
declare function int2(a0: export_default$10<0 | 1>): export_default$12<0 | 1>;
declare function int2(a0: export_default$Z<0 | 1>): export_default$12<0 | 1>;
declare function int2(a0: export_default$U<0 | 1>): export_default$12<0 | 1>;
declare function int2(a0: export_default$L<0 | 1>): export_default$12<0 | 1>;
declare function int24Div(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int24Eq(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int24Ge(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int24Gt(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int24Le(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int24Lt(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int24Mi(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int24Mul(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int24Ne(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int24Pl(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int28Div(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int28Eq(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int28Ge(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int28Gt(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int28Le(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int28Lt(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int28Mi(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int28Mul(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int28Ne(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int28Pl(a0: export_default$12<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int2AvgAccum(a0: Array$1<0 | 1, export_default$Z<0 | 1>>, a1: export_default$12<0 | 1>): Array$1<0 | 1, export_default$Z<0 | 1>>;
declare function int2AvgAccumInv(a0: Array$1<0 | 1, export_default$Z<0 | 1>>, a1: export_default$12<0 | 1>): Array$1<0 | 1, export_default$Z<0 | 1>>;
declare function int2MulCash(a0: export_default$12<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
declare function int2Sum(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$Z<0 | 1>;
declare function int2Abs(a0: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2And(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Div(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Eq(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int2Ge(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int2Gt(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int2Int4Sum(a0: Array$1<0 | 1, export_default$Z<0 | 1>>): export_default$Z<0 | 1>;
declare function int2Larger(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Le(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int2Lt(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int2Mi(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Mod(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Mul(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Ne(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int2Not(a0: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Or(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Pl(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Shl(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$12<0 | 1>;
declare function int2Shr(a0: export_default$12<0 | 1>, a1: export_default$10<0 | 1>): export_default$12<0 | 1>;
declare function int2Smaller(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Um(a0: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Up(a0: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int2Xor(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function int4(a0: export_default$1h<0 | 1>): export_default$10<0 | 1>;
declare function int4(a0: export_default$1g<0 | 1>): export_default$10<0 | 1>;
declare function int4(a0: export_default$1c<0 | 1>): export_default$10<0 | 1>;
declare function int4(a0: export_default$15<0 | 1>): export_default$10<0 | 1>;
declare function int4(a0: export_default$14<0 | 1>): export_default$10<0 | 1>;
declare function int4(a0: export_default$12<0 | 1>): export_default$10<0 | 1>;
declare function int4(a0: export_default$Z<0 | 1>): export_default$10<0 | 1>;
declare function int4(a0: export_default$U<0 | 1>): export_default$10<0 | 1>;
declare function int4(a0: export_default$L<0 | 1>): export_default$10<0 | 1>;
declare function int42Div(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
declare function int42Eq(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int42Ge(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int42Gt(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int42Le(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int42Lt(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int42Mi(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
declare function int42Mul(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
declare function int42Ne(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int42Pl(a0: export_default$10<0 | 1>, a1: export_default$12<0 | 1>): export_default$10<0 | 1>;
declare function int48Div(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int48Eq(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int48Ge(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int48Gt(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int48Le(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int48Lt(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int48Mi(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int48Mul(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int48Ne(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int48Pl(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int4AvgAccum(a0: Array$1<0 | 1, export_default$Z<0 | 1>>, a1: export_default$10<0 | 1>): Array$1<0 | 1, export_default$Z<0 | 1>>;
declare function int4AvgAccumInv(a0: Array$1<0 | 1, export_default$Z<0 | 1>>, a1: export_default$10<0 | 1>): Array$1<0 | 1, export_default$Z<0 | 1>>;
declare function int4AvgCombine(a0: Array$1<0 | 1, export_default$Z<0 | 1>>, a1: Array$1<0 | 1, export_default$Z<0 | 1>>): Array$1<0 | 1, export_default$Z<0 | 1>>;
declare function int4MulCash(a0: export_default$10<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
declare function int4Sum(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function int4Abs(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4And(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Div(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Eq(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int4Ge(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int4Gt(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int4Inc(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Larger(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Le(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int4Lt(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int4Mi(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Mod(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Mul(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Multirange(): export_default$$<0 | 1>;
declare function int4Multirange(a0: Array$1<0 | 1, export_default$_<0 | 1>>): export_default$$<0 | 1>;
declare function int4Multirange(a0: export_default$_<0 | 1>): export_default$$<0 | 1>;
declare function int4Ne(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int4Not(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Or(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Pl(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Range(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$_<0 | 1>;
declare function int4Range(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$l<0 | 1>): export_default$_<0 | 1>;
declare function int4RangeCanonical(a0: export_default$_<0 | 1>): export_default$_<0 | 1>;
declare function int4RangeSubdiff(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$14<0 | 1>;
declare function int4Shl(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Shr(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Smaller(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Um(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Up(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int4Xor(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function int8(a0: export_default$1h<0 | 1>): export_default$Z<0 | 1>;
declare function int8(a0: export_default$15<0 | 1>): export_default$Z<0 | 1>;
declare function int8(a0: export_default$14<0 | 1>): export_default$Z<0 | 1>;
declare function int8(a0: export_default$12<0 | 1>): export_default$Z<0 | 1>;
declare function int8(a0: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function int8(a0: export_default$U<0 | 1>): export_default$Z<0 | 1>;
declare function int8(a0: export_default$L<0 | 1>): export_default$Z<0 | 1>;
declare function int8(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function int82Div(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$Z<0 | 1>;
declare function int82Eq(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int82Ge(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int82Gt(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int82Le(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int82Lt(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int82Mi(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$Z<0 | 1>;
declare function int82Mul(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$Z<0 | 1>;
declare function int82Ne(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$1g<0 | 1>;
declare function int82Pl(a0: export_default$Z<0 | 1>, a1: export_default$12<0 | 1>): export_default$Z<0 | 1>;
declare function int84Div(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function int84Eq(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int84Ge(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int84Gt(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int84Le(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int84Lt(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int84Mi(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function int84Mul(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function int84Ne(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function int84Pl(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function int8Avg(a0: Array$1<0 | 1, export_default$Z<0 | 1>>): export_default$L<0 | 1>;
declare function int8MulCash(a0: export_default$Z<0 | 1>, a1: export_default$N<0 | 1>): export_default$N<0 | 1>;
declare function int8Sum(a0: export_default$L<0 | 1>, a1: export_default$Z<0 | 1>): export_default$L<0 | 1>;
declare function int8Abs(a0: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8And(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Dec(a0: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8DecAny(a0: export_default$Z<0 | 1>, a1: Any<0 | 1>): export_default$Z<0 | 1>;
declare function int8Div(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Eq(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int8Ge(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int8Gt(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int8Inc(a0: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8IncAny(a0: export_default$Z<0 | 1>, a1: Any<0 | 1>): export_default$Z<0 | 1>;
declare function int8IncFloat8Float8(a0: export_default$Z<0 | 1>, a1: export_default$14<0 | 1>, a2: export_default$14<0 | 1>): export_default$Z<0 | 1>;
declare function int8Larger(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Le(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int8Lt(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int8Mi(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Mod(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Mul(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Multirange(): export_default$Y<0 | 1>;
declare function int8Multirange(a0: Array$1<0 | 1, export_default$X<0 | 1>>): export_default$Y<0 | 1>;
declare function int8Multirange(a0: export_default$X<0 | 1>): export_default$Y<0 | 1>;
declare function int8Ne(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function int8Not(a0: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Or(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Pl(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8PlInet(a0: export_default$Z<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
declare function int8Range(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$X<0 | 1>;
declare function int8Range(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$l<0 | 1>): export_default$X<0 | 1>;
declare function int8RangeCanonical(a0: export_default$X<0 | 1>): export_default$X<0 | 1>;
declare function int8RangeSubdiff(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$14<0 | 1>;
declare function int8Shl(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function int8Shr(a0: export_default$Z<0 | 1>, a1: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function int8Smaller(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Um(a0: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Up(a0: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function int8Xor(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function integerPlDate(a0: export_default$10<0 | 1>, a1: export_default$18<0 | 1>): export_default$18<0 | 1>;
declare function interLb(a0: export_default$R<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function interSb(a0: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function interSl(a0: export_default$Q<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function interval(a0: export_default$W<0 | 1>, a1: export_default$10<0 | 1>): export_default$W<0 | 1>;
declare function interval(a0: export_default$j<0 | 1>): export_default$W<0 | 1>;
declare function intervalCmp(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$10<0 | 1>;
declare function intervalDiv(a0: export_default$W<0 | 1>, a1: export_default$14<0 | 1>): export_default$W<0 | 1>;
declare function intervalEq(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function intervalGe(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function intervalGt(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function intervalHash(a0: export_default$W<0 | 1>): export_default$10<0 | 1>;
declare function intervalHashExtended(a0: export_default$W<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function intervalLarger(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function intervalLe(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function intervalLt(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function intervalMi(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function intervalMul(a0: export_default$W<0 | 1>, a1: export_default$14<0 | 1>): export_default$W<0 | 1>;
declare function intervalNe(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function intervalPl(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function intervalPlDate(a0: export_default$W<0 | 1>, a1: export_default$18<0 | 1>): export_default$i<0 | 1>;
declare function intervalPlTime(a0: export_default$W<0 | 1>, a1: export_default$j<0 | 1>): export_default$j<0 | 1>;
declare function intervalPlTimestamp(a0: export_default$W<0 | 1>, a1: export_default$i<0 | 1>): export_default$i<0 | 1>;
declare function intervalPlTimestamptz(a0: export_default$W<0 | 1>, a1: export_default$h<0 | 1>): export_default$h<0 | 1>;
declare function intervalPlTimetz(a0: export_default$W<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
declare function intervalSmaller(a0: export_default$W<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function intervalUm(a0: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function isNormalized(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function isclosed(a0: export_default$G<0 | 1>): export_default$1g<0 | 1>;
declare function isempty<T extends Any>(a0: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function isempty<T extends Any>(a0: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function isfinite(a0: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function isfinite(a0: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function isfinite(a0: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function isfinite(a0: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function ishorizontal(a0: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function ishorizontal(a0: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function ishorizontal(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function isopen(a0: export_default$G<0 | 1>): export_default$1g<0 | 1>;
declare function isparallel(a0: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function isparallel(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function isperp(a0: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function isperp(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function isvertical(a0: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function isvertical(a0: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function isvertical(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function jsonAgg<T extends Any>(a0: T): export_default$V<0 | 1>;
declare function jsonAggStrict<T extends Any>(a0: T): export_default$V<0 | 1>;
declare function jsonArrayElement(a0: export_default$V<0 | 1>, a1: export_default$10<0 | 1>): export_default$V<0 | 1>;
declare function jsonArrayElementText(a0: export_default$V<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function jsonArrayElements(a0: export_default$V<0 | 1>): Setof<{
    from: {
        value: export_default$V<0 | 1>;
    };
}>;
declare function jsonArrayElementsText(a0: export_default$V<0 | 1>): Setof<{
    from: {
        value: export_default$l<0 | 1>;
    };
}>;
declare function jsonArrayLength(a0: export_default$V<0 | 1>): export_default$10<0 | 1>;
declare function jsonBuildArray(): export_default$V<0 | 1>;
declare function jsonBuildArray(a0: Any<0 | 1>): export_default$V<0 | 1>;
declare function jsonBuildObject(): export_default$V<0 | 1>;
declare function jsonBuildObject(a0: Any<0 | 1>): export_default$V<0 | 1>;
declare function jsonEach(a0: export_default$V<0 | 1>): Setof<{
    from: {
        key: export_default$l<0 | 1>;
        value: export_default$V<0 | 1>;
    };
}>;
declare function jsonEachText(a0: export_default$V<0 | 1>): Setof<{
    from: {
        key: export_default$l<0 | 1>;
        value: export_default$l<0 | 1>;
    };
}>;
declare function jsonExtractPath(a0: export_default$V<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$V<0 | 1>;
declare function jsonExtractPathText(a0: export_default$V<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$l<0 | 1>;
declare function jsonObject(a0: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$V<0 | 1>;
declare function jsonObject(a0: Array$1<0 | 1, export_default$l<0 | 1>>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$V<0 | 1>;
declare function jsonObjectAgg(a0: Any<number>, a1: Any<number>): export_default$V<0 | 1>;
declare function jsonObjectAggStrict(a0: Any<number>, a1: Any<number>): export_default$V<0 | 1>;
declare function jsonObjectAggUnique(a0: Any<number>, a1: Any<number>): export_default$V<0 | 1>;
declare function jsonObjectAggUniqueStrict(a0: Any<number>, a1: Any<number>): export_default$V<0 | 1>;
declare function jsonObjectField(a0: export_default$V<0 | 1>, a1: export_default$l<0 | 1>): export_default$V<0 | 1>;
declare function jsonObjectFieldText(a0: export_default$V<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function jsonObjectKeys(a0: export_default$V<0 | 1>): Setof<{
    from: {};
}>;
declare function jsonPopulateRecord<T extends Any>(a0: T, a1: export_default$V<0 | 1>, a2: export_default$1g<0 | 1>): T;
declare function jsonPopulateRecordset<T extends Any>(a0: T, a1: export_default$V<0 | 1>, a2: export_default$1g<0 | 1>): Setof<{
    from: {};
}>;
declare function jsonStripNulls(a0: export_default$V<0 | 1>): export_default$V<0 | 1>;
declare function jsonToRecord(a0: export_default$V<0 | 1>): Record$1<0 | 1, {}>;
declare function jsonToRecordset(a0: export_default$V<0 | 1>): Setof<{
    from: {};
}>;
declare function jsonToTsvector(a0: export_default$V<0 | 1>, a1: export_default$U<0 | 1>): export_default$9<0 | 1>;
declare function jsonToTsvector(a0: export_default$u<0 | 1>, a1: export_default$V<0 | 1>, a2: export_default$U<0 | 1>): export_default$9<0 | 1>;
declare function jsonTypeof(a0: export_default$V<0 | 1>): export_default$l<0 | 1>;
declare function jsonbAgg<T extends Any>(a0: T): export_default$U<0 | 1>;
declare function jsonbAggStrict<T extends Any>(a0: T): export_default$U<0 | 1>;
declare function jsonbArrayElement(a0: export_default$U<0 | 1>, a1: export_default$10<0 | 1>): export_default$U<0 | 1>;
declare function jsonbArrayElementText(a0: export_default$U<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function jsonbArrayElements(a0: export_default$U<0 | 1>): Setof<{
    from: {
        value: export_default$U<0 | 1>;
    };
}>;
declare function jsonbArrayElementsText(a0: export_default$U<0 | 1>): Setof<{
    from: {
        value: export_default$l<0 | 1>;
    };
}>;
declare function jsonbArrayLength(a0: export_default$U<0 | 1>): export_default$10<0 | 1>;
declare function jsonbBuildArray(): export_default$U<0 | 1>;
declare function jsonbBuildArray(a0: Any<0 | 1>): export_default$U<0 | 1>;
declare function jsonbBuildObject(): export_default$U<0 | 1>;
declare function jsonbBuildObject(a0: Any<0 | 1>): export_default$U<0 | 1>;
declare function jsonbCmp(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$10<0 | 1>;
declare function jsonbConcat(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$U<0 | 1>;
declare function jsonbContained(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbContains(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbDelete(a0: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
declare function jsonbDelete(a0: export_default$U<0 | 1>, a1: export_default$10<0 | 1>): export_default$U<0 | 1>;
declare function jsonbDelete(a0: export_default$U<0 | 1>, a1: export_default$l<0 | 1>): export_default$U<0 | 1>;
declare function jsonbDeletePath(a0: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
declare function jsonbEach(a0: export_default$U<0 | 1>): Setof<{
    from: {
        key: export_default$l<0 | 1>;
        value: export_default$U<0 | 1>;
    };
}>;
declare function jsonbEachText(a0: export_default$U<0 | 1>): Setof<{
    from: {
        key: export_default$l<0 | 1>;
        value: export_default$l<0 | 1>;
    };
}>;
declare function jsonbEq(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbExists(a0: export_default$U<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbExistsAll(a0: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
declare function jsonbExistsAny(a0: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$1g<0 | 1>;
declare function jsonbExtractPath(a0: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
declare function jsonbExtractPathText(a0: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$l<0 | 1>;
declare function jsonbGe(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbGt(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbHash(a0: export_default$U<0 | 1>): export_default$10<0 | 1>;
declare function jsonbHashExtended(a0: export_default$U<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function jsonbInsert(a0: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$U<0 | 1>;
declare function jsonbLe(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbLt(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbNe(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbObject(a0: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
declare function jsonbObject(a0: Array$1<0 | 1, export_default$l<0 | 1>>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$U<0 | 1>;
declare function jsonbObjectAgg(a0: Any<number>, a1: Any<number>): export_default$U<0 | 1>;
declare function jsonbObjectAggStrict(a0: Any<number>, a1: Any<number>): export_default$U<0 | 1>;
declare function jsonbObjectAggUnique(a0: Any<number>, a1: Any<number>): export_default$U<0 | 1>;
declare function jsonbObjectAggUniqueStrict(a0: Any<number>, a1: Any<number>): export_default$U<0 | 1>;
declare function jsonbObjectField(a0: export_default$U<0 | 1>, a1: export_default$l<0 | 1>): export_default$U<0 | 1>;
declare function jsonbObjectFieldText(a0: export_default$U<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function jsonbObjectKeys(a0: export_default$U<0 | 1>): Setof<{
    from: {};
}>;
declare function jsonbPathExists(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbPathExistsOpr(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbPathExistsTz(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbPathMatch(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbPathMatchOpr(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbPathMatchTz(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbPathQuery(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): Setof<{
    from: {};
}>;
declare function jsonbPathQueryArray(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$U<0 | 1>;
declare function jsonbPathQueryArrayTz(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$U<0 | 1>;
declare function jsonbPathQueryFirst(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$U<0 | 1>;
declare function jsonbPathQueryFirstTz(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$U<0 | 1>;
declare function jsonbPathQueryTz(a0: export_default$U<0 | 1>, a1: export_default$T<0 | 1>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): Setof<{
    from: {};
}>;
declare function jsonbPopulateRecord<T extends Any>(a0: T, a1: export_default$U<0 | 1>): T;
declare function jsonbPopulateRecordValid<T extends Any>(a0: T, a1: export_default$U<0 | 1>): export_default$1g<0 | 1>;
declare function jsonbPopulateRecordset<T extends Any>(a0: T, a1: export_default$U<0 | 1>): Setof<{
    from: {};
}>;
declare function jsonbPretty(a0: export_default$U<0 | 1>): export_default$l<0 | 1>;
declare function jsonbSet(a0: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>): export_default$U<0 | 1>;
declare function jsonbSetLax(a0: export_default$U<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>, a2: export_default$U<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$l<0 | 1>): export_default$U<0 | 1>;
declare function jsonbStripNulls(a0: export_default$U<0 | 1>): export_default$U<0 | 1>;
declare function jsonbToRecord(a0: export_default$U<0 | 1>): Record$1<0 | 1, {}>;
declare function jsonbToRecordset(a0: export_default$U<0 | 1>): Setof<{
    from: {};
}>;
declare function jsonbToTsvector(a0: export_default$U<0 | 1>, a1: export_default$U<0 | 1>): export_default$9<0 | 1>;
declare function jsonbToTsvector(a0: export_default$u<0 | 1>, a1: export_default$U<0 | 1>, a2: export_default$U<0 | 1>): export_default$9<0 | 1>;
declare function jsonbTypeof(a0: export_default$U<0 | 1>): export_default$l<0 | 1>;
declare function justifyDays(a0: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function justifyHours(a0: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function justifyInterval(a0: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function lag<T extends Any>(a0: T, a1: export_default$10<0 | 1>, a2: T): T;
declare function lag<T extends Any>(a0: T): T;
declare function lag<T extends Any>(a0: T, a1: export_default$10<0 | 1>): T;
declare function lastValue<T extends Any>(a0: T): T;
declare function lastval(): export_default$Z<0 | 1>;
declare function lcm(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function lcm(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function lcm(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function lead<T extends Any>(a0: T, a1: export_default$10<0 | 1>, a2: T): T;
declare function lead<T extends Any>(a0: T): T;
declare function lead<T extends Any>(a0: T, a1: export_default$10<0 | 1>): T;
declare function left(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function length(a0: export_default$Q<0 | 1>): export_default$14<0 | 1>;
declare function length(a0: export_default$G<0 | 1>): export_default$14<0 | 1>;
declare function length(a0: export_default$1h<0 | 1>): export_default$10<0 | 1>;
declare function length(a0: export_default$1e<0 | 1>): export_default$10<0 | 1>;
declare function length(a0: export_default$1d<0 | 1>): export_default$10<0 | 1>;
declare function length(a0: export_default$1d<0 | 1>, a1: export_default$M<0 | 1>): export_default$10<0 | 1>;
declare function length(a0: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function length(a0: export_default$9<0 | 1>): export_default$10<0 | 1>;
declare function like(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function like(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function like(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function likeEscape(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
declare function likeEscape(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function line(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$R<0 | 1>;
declare function lineDistance(a0: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$14<0 | 1>;
declare function lineEq(a0: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function lineHorizontal(a0: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function lineInterpt(a0: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$A<0 | 1>;
declare function lineIntersect(a0: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function lineParallel(a0: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function linePerp(a0: export_default$R<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function lineVertical(a0: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function ln(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function ln(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function loClose(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function loCreat(a0: export_default$10<0 | 1>): export_default$I<0 | 1>;
declare function loCreate(a0: export_default$I<0 | 1>): export_default$I<0 | 1>;
declare function loExport(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function loFromBytea(a0: export_default$I<0 | 1>, a1: export_default$1d<0 | 1>): export_default$I<0 | 1>;
declare function loGet(a0: export_default$I<0 | 1>): export_default$1d<0 | 1>;
declare function loGet(a0: export_default$I<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function loImport(a0: export_default$l<0 | 1>): export_default$I<0 | 1>;
declare function loImport(a0: export_default$l<0 | 1>, a1: export_default$I<0 | 1>): export_default$I<0 | 1>;
declare function loLseek(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function loLseek64(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function loOpen(a0: export_default$I<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function loPut(a0: export_default$I<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$1d<0 | 1>): export_default$4<0 | 1>;
declare function loTell(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function loTell64(a0: export_default$10<0 | 1>): export_default$Z<0 | 1>;
declare function loTruncate(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function loTruncate64(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$10<0 | 1>;
declare function loUnlink(a0: export_default$I<0 | 1>): export_default$10<0 | 1>;
declare function log(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function log(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function log(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function log10(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function log10(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function loread(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function lower<T extends Any>(a0: export_default$1k<0 | 1, T>): T;
declare function lower<T extends Any>(a0: export_default$1i<0 | 1, T>): T;
declare function lower(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function lowerInc<T extends Any>(a0: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function lowerInc<T extends Any>(a0: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function lowerInf<T extends Any>(a0: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function lowerInf<T extends Any>(a0: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function lowrite(a0: export_default$10<0 | 1>, a1: export_default$1d<0 | 1>): export_default$10<0 | 1>;
declare function lpad(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function lpad(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function lseg(a0: export_default$1f<0 | 1>): export_default$Q<0 | 1>;
declare function lseg(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$Q<0 | 1>;
declare function lsegCenter(a0: export_default$Q<0 | 1>): export_default$A<0 | 1>;
declare function lsegDistance(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$14<0 | 1>;
declare function lsegEq(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegGe(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegGt(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegHorizontal(a0: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegInterpt(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$A<0 | 1>;
declare function lsegIntersect(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegLe(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegLength(a0: export_default$Q<0 | 1>): export_default$14<0 | 1>;
declare function lsegLt(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegNe(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegParallel(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegPerp(a0: export_default$Q<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function lsegVertical(a0: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function ltrim(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
declare function ltrim(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function ltrim(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function macaddr(a0: export_default$O<0 | 1>): export_default$P<0 | 1>;
declare function macaddr8(a0: export_default$P<0 | 1>): export_default$O<0 | 1>;
declare function macaddr8And(a0: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$O<0 | 1>;
declare function macaddr8Cmp(a0: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$10<0 | 1>;
declare function macaddr8Eq(a0: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
declare function macaddr8Ge(a0: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
declare function macaddr8Gt(a0: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
declare function macaddr8Le(a0: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
declare function macaddr8Lt(a0: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
declare function macaddr8Ne(a0: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$1g<0 | 1>;
declare function macaddr8Not(a0: export_default$O<0 | 1>): export_default$O<0 | 1>;
declare function macaddr8Or(a0: export_default$O<0 | 1>, a1: export_default$O<0 | 1>): export_default$O<0 | 1>;
declare function macaddr8Set7Bit(a0: export_default$O<0 | 1>): export_default$O<0 | 1>;
declare function macaddrAnd(a0: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$P<0 | 1>;
declare function macaddrCmp(a0: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$10<0 | 1>;
declare function macaddrEq(a0: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
declare function macaddrGe(a0: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
declare function macaddrGt(a0: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
declare function macaddrLe(a0: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
declare function macaddrLt(a0: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
declare function macaddrNe(a0: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$1g<0 | 1>;
declare function macaddrNot(a0: export_default$P<0 | 1>): export_default$P<0 | 1>;
declare function macaddrOr(a0: export_default$P<0 | 1>, a1: export_default$P<0 | 1>): export_default$P<0 | 1>;
declare function makeDate(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): export_default$18<0 | 1>;
declare function makeInterval(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$10<0 | 1>, a5: export_default$10<0 | 1>, a6: export_default$14<0 | 1>): export_default$W<0 | 1>;
declare function makeTime(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$14<0 | 1>): export_default$j<0 | 1>;
declare function makeTimestamp(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$10<0 | 1>, a5: export_default$14<0 | 1>): export_default$i<0 | 1>;
declare function makeTimestamptz(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$10<0 | 1>, a5: export_default$14<0 | 1>): export_default$h<0 | 1>;
declare function makeTimestamptz(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$10<0 | 1>, a5: export_default$14<0 | 1>, a6: export_default$l<0 | 1>): export_default$h<0 | 1>;
declare function makeaclitem(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$1g<0 | 1>): export_default$1m<0 | 1>;
declare function masklen(a0: export_default$13<0 | 1>): export_default$10<0 | 1>;
declare function max<T extends Any>(a0: Array$1<number, T>): Array$1<0 | 1, T>;
declare function max<T extends Any>(a0: T): T;
declare function max(a0: export_default$1e<number>): export_default$1e<0 | 1>;
declare function max(a0: export_default$18<number>): export_default$18<0 | 1>;
declare function max(a0: export_default$15<number>): export_default$15<0 | 1>;
declare function max(a0: export_default$14<number>): export_default$14<0 | 1>;
declare function max(a0: export_default$13<number>): export_default$13<0 | 1>;
declare function max(a0: export_default$12<number>): export_default$12<0 | 1>;
declare function max(a0: export_default$10<number>): export_default$10<0 | 1>;
declare function max(a0: export_default$Z<number>): export_default$Z<0 | 1>;
declare function max(a0: export_default$W<number>): export_default$W<0 | 1>;
declare function max(a0: export_default$N<number>): export_default$N<0 | 1>;
declare function max(a0: export_default$L<number>): export_default$L<0 | 1>;
declare function max(a0: export_default$I<number>): export_default$I<0 | 1>;
declare function max(a0: export_default$E<number>): export_default$E<0 | 1>;
declare function max(a0: export_default$l<number>): export_default$l<0 | 1>;
declare function max(a0: export_default$k<number>): export_default$k<0 | 1>;
declare function max(a0: export_default$j<number>): export_default$j<0 | 1>;
declare function max(a0: export_default$i<number>): export_default$i<0 | 1>;
declare function max(a0: export_default$h<number>): export_default$h<0 | 1>;
declare function max(a0: export_default$g<number>): export_default$g<0 | 1>;
declare function max(a0: export_default$2<number>): export_default$2<0 | 1>;
declare function md5(a0: export_default$1d<0 | 1>): export_default$l<0 | 1>;
declare function md5(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function minScale(a0: export_default$L<0 | 1>): export_default$10<0 | 1>;
declare function mod(a0: export_default$12<0 | 1>, a1: export_default$12<0 | 1>): export_default$12<0 | 1>;
declare function mod(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function mod(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function mod(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function mode<T extends Any>(a0: T): T;
declare function money(a0: export_default$10<0 | 1>): export_default$N<0 | 1>;
declare function money(a0: export_default$Z<0 | 1>): export_default$N<0 | 1>;
declare function money(a0: export_default$L<0 | 1>): export_default$N<0 | 1>;
declare function mulDInterval(a0: export_default$14<0 | 1>, a1: export_default$W<0 | 1>): export_default$W<0 | 1>;
declare function multirange<T extends Any>(a0: export_default$1i<0 | 1, T>): export_default$1k<0 | 1, T>;
declare function multirangeAdjacentMultirange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeAdjacentRange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeAfterMultirange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeAfterRange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeBeforeMultirange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeBeforeRange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeCmp<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$10<0 | 1>;
declare function multirangeContainedByMultirange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeContainedByRange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeContainsElem<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: T): export_default$1g<0 | 1>;
declare function multirangeContainsMultirange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeContainsRange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeEq<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeGe<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeGt<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeIntersect<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
declare function multirangeIntersectAggTransfn<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
declare function multirangeLe<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeLt<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeMinus<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
declare function multirangeNe<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeOverlapsMultirange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeOverlapsRange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeOverleftMultirange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeOverleftRange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeOverrightMultirange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeOverrightRange<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function multirangeUnion<T extends Any>(a0: export_default$1k<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1k<0 | 1, T>;
declare function mxidAge(a0: export_default$3<0 | 1>): export_default$10<0 | 1>;
declare function name(a0: export_default$1e<0 | 1>): export_default$M<0 | 1>;
declare function name(a0: export_default$l<0 | 1>): export_default$M<0 | 1>;
declare function name(a0: export_default$5<0 | 1>): export_default$M<0 | 1>;
declare function nameconcatoid(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>): export_default$M<0 | 1>;
declare function nameeq(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function nameeqtext(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function namege(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function namegetext(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function namegt(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function namegttext(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function nameiclike(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function nameicnlike(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function nameicregexeq(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function nameicregexne(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function namele(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function nameletext(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function namelike(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function namelt(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function namelttext(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function namene(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function namenetext(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function namenlike(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function nameregexeq(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function nameregexne(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function netmask(a0: export_default$13<0 | 1>): export_default$13<0 | 1>;
declare function network(a0: export_default$13<0 | 1>): export_default$1a<0 | 1>;
declare function networkCmp(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$10<0 | 1>;
declare function networkEq(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkGe(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkGt(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkLarger(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
declare function networkLe(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkLt(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkNe(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkOverlap(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkSmaller(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$13<0 | 1>;
declare function networkSub(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkSubeq(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkSup(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function networkSupeq(a0: export_default$13<0 | 1>, a1: export_default$13<0 | 1>): export_default$1g<0 | 1>;
declare function nextval(a0: export_default$w<0 | 1>): export_default$Z<0 | 1>;
declare function normalize(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function notlike(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1g<0 | 1>;
declare function notlike(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function notlike(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function now(): export_default$h<0 | 1>;
declare function npoints(a0: export_default$G<0 | 1>): export_default$10<0 | 1>;
declare function npoints(a0: export_default$z<0 | 1>): export_default$10<0 | 1>;
declare function nthValue<T extends Any>(a0: T, a1: export_default$10<0 | 1>): T;
declare function ntile(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function numNonnulls(a0: Any<0 | 1>): export_default$10<0 | 1>;
declare function numNulls(a0: Any<0 | 1>): export_default$10<0 | 1>;
declare function numeric(a0: export_default$15<0 | 1>): export_default$L<0 | 1>;
declare function numeric(a0: export_default$14<0 | 1>): export_default$L<0 | 1>;
declare function numeric(a0: export_default$12<0 | 1>): export_default$L<0 | 1>;
declare function numeric(a0: export_default$10<0 | 1>): export_default$L<0 | 1>;
declare function numeric(a0: export_default$Z<0 | 1>): export_default$L<0 | 1>;
declare function numeric(a0: export_default$U<0 | 1>): export_default$L<0 | 1>;
declare function numeric(a0: export_default$N<0 | 1>): export_default$L<0 | 1>;
declare function numeric(a0: export_default$L<0 | 1>, a1: export_default$10<0 | 1>): export_default$L<0 | 1>;
declare function numericAbs(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericAdd(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericCmp(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$10<0 | 1>;
declare function numericDiv(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericDivTrunc(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericEq(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$1g<0 | 1>;
declare function numericExp(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericGe(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$1g<0 | 1>;
declare function numericGt(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$1g<0 | 1>;
declare function numericInc(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericLarger(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericLe(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$1g<0 | 1>;
declare function numericLn(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericLog(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericLt(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$1g<0 | 1>;
declare function numericMod(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericMul(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericNe(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$1g<0 | 1>;
declare function numericPlPgLsn(a0: export_default$L<0 | 1>, a1: export_default$E<0 | 1>): export_default$E<0 | 1>;
declare function numericPower(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericSmaller(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericSqrt(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericSub(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericUminus(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function numericUplus(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function nummultirange(): export_default$K<0 | 1>;
declare function nummultirange(a0: Array$1<0 | 1, export_default$J<0 | 1>>): export_default$K<0 | 1>;
declare function nummultirange(a0: export_default$J<0 | 1>): export_default$K<0 | 1>;
declare function numnode(a0: export_default$d<0 | 1>): export_default$10<0 | 1>;
declare function numrange(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$J<0 | 1>;
declare function numrange(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>, a2: export_default$l<0 | 1>): export_default$J<0 | 1>;
declare function numrangeSubdiff(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$14<0 | 1>;
declare function objDescription(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function objDescription(a0: export_default$I<0 | 1>, a1: export_default$M<0 | 1>): export_default$l<0 | 1>;
declare function octetLength(a0: export_default$1h<0 | 1>): export_default$10<0 | 1>;
declare function octetLength(a0: export_default$1e<0 | 1>): export_default$10<0 | 1>;
declare function octetLength(a0: export_default$1d<0 | 1>): export_default$10<0 | 1>;
declare function octetLength(a0: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function oid(a0: export_default$Z<0 | 1>): export_default$I<0 | 1>;
declare function oideq(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function oidge(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function oidgt(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function oidlarger(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$I<0 | 1>;
declare function oidle(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function oidlt(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function oidne(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function oidsmaller(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$I<0 | 1>;
declare function oidvectoreq(a0: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
declare function oidvectorge(a0: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
declare function oidvectorgt(a0: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
declare function oidvectorle(a0: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
declare function oidvectorlt(a0: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
declare function oidvectorne(a0: export_default$H<0 | 1>, a1: export_default$H<0 | 1>): export_default$1g<0 | 1>;
declare function oidvectortypes(a0: export_default$H<0 | 1>): export_default$l<0 | 1>;
declare function onPb(a0: export_default$A<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function onPl(a0: export_default$A<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function onPpath(a0: export_default$A<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
declare function onPs(a0: export_default$A<0 | 1>, a1: export_default$Q<0 | 1>): export_default$1g<0 | 1>;
declare function onSb(a0: export_default$Q<0 | 1>, a1: export_default$1f<0 | 1>): export_default$1g<0 | 1>;
declare function onSl(a0: export_default$Q<0 | 1>, a1: export_default$R<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$j<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$j<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$j<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$j<0 | 1>, a3: export_default$j<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>, a2: export_default$j<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>, a2: export_default$j<0 | 1>, a3: export_default$j<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$i<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$i<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$i<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$i<0 | 1>, a3: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$i<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$i<0 | 1>, a3: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$h<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$h<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$h<0 | 1>, a1: export_default$W<0 | 1>, a2: export_default$h<0 | 1>, a3: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$h<0 | 1>, a3: export_default$W<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$h<0 | 1>, a3: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function overlaps(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>, a2: export_default$g<0 | 1>, a3: export_default$g<0 | 1>): export_default$1g<0 | 1>;
declare function overlay(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>, a2: export_default$10<0 | 1>): export_default$1h<0 | 1>;
declare function overlay(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>): export_default$1h<0 | 1>;
declare function overlay(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>, a2: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function overlay(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function overlay(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function overlay(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function parseIdent(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function path(a0: export_default$z<0 | 1>): export_default$G<0 | 1>;
declare function pathAdd(a0: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$G<0 | 1>;
declare function pathAddPt(a0: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
declare function pathContainPt(a0: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pathDistance(a0: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$14<0 | 1>;
declare function pathDivPt(a0: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
declare function pathInter(a0: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
declare function pathLength(a0: export_default$G<0 | 1>): export_default$14<0 | 1>;
declare function pathMulPt(a0: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
declare function pathNEq(a0: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
declare function pathNGe(a0: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
declare function pathNGt(a0: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
declare function pathNLe(a0: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
declare function pathNLt(a0: export_default$G<0 | 1>, a1: export_default$G<0 | 1>): export_default$1g<0 | 1>;
declare function pathNpoints(a0: export_default$G<0 | 1>): export_default$10<0 | 1>;
declare function pathSubPt(a0: export_default$G<0 | 1>, a1: export_default$A<0 | 1>): export_default$G<0 | 1>;
declare function pclose(a0: export_default$G<0 | 1>): export_default$G<0 | 1>;
declare function percentRank(): export_default$14<0 | 1>;
declare function percentRank(a0: Any<number>): export_default$14<0 | 1>;
declare function percentileCont(a0: Array$1<number, export_default$14<0 | 1>>, a1: export_default$14<number>): Array$1<0 | 1, export_default$14<0 | 1>>;
declare function percentileCont(a0: Array$1<number, export_default$14<0 | 1>>, a1: export_default$W<number>): Array$1<0 | 1, export_default$W<0 | 1>>;
declare function percentileCont(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function percentileCont(a0: export_default$14<number>, a1: export_default$W<number>): export_default$W<0 | 1>;
declare function percentileDisc<T extends Any>(a0: Array$1<number, export_default$14<0 | 1>>, a1: T): Array$1<0 | 1, T>;
declare function percentileDisc<T extends Any>(a0: export_default$14<number>, a1: T): T;
declare function pgAdvisoryLock(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$4<0 | 1>;
declare function pgAdvisoryLock(a0: export_default$Z<0 | 1>): export_default$4<0 | 1>;
declare function pgAdvisoryLockShared(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$4<0 | 1>;
declare function pgAdvisoryLockShared(a0: export_default$Z<0 | 1>): export_default$4<0 | 1>;
declare function pgAdvisoryUnlock(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function pgAdvisoryUnlock(a0: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function pgAdvisoryUnlockAll(): export_default$4<0 | 1>;
declare function pgAdvisoryUnlockShared(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function pgAdvisoryUnlockShared(a0: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function pgAdvisoryXactLock(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$4<0 | 1>;
declare function pgAdvisoryXactLock(a0: export_default$Z<0 | 1>): export_default$4<0 | 1>;
declare function pgAdvisoryXactLockShared(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$4<0 | 1>;
declare function pgAdvisoryXactLockShared(a0: export_default$Z<0 | 1>): export_default$4<0 | 1>;
declare function pgAvailableExtensionVersions(): Setof<{
    from: {
        name: export_default$M<0 | 1>;
        version: export_default$l<0 | 1>;
        superuser: export_default$1g<0 | 1>;
        trusted: export_default$1g<0 | 1>;
        relocatable: export_default$1g<0 | 1>;
        schema: export_default$M<0 | 1>;
        requires: Array$1<0 | 1, export_default$M<0 | 1>>;
        comment: export_default$l<0 | 1>;
    };
}>;
declare function pgAvailableExtensions(): Setof<{
    from: {
        name: export_default$M<0 | 1>;
        default_version: export_default$l<0 | 1>;
        comment: export_default$l<0 | 1>;
    };
}>;
declare function pgAvailableWalSummaries(): Setof<{
    from: {
        tli: export_default$Z<0 | 1>;
        start_lsn: export_default$E<0 | 1>;
        end_lsn: export_default$E<0 | 1>;
    };
}>;
declare function pgBackendPid(): export_default$10<0 | 1>;
declare function pgBackupStart(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>): export_default$E<0 | 1>;
declare function pgBackupStop(a0: export_default$1g<0 | 1>): Record$1<0 | 1, {
    lsn: export_default$E<0 | 1>;
    labelfile: export_default$l<0 | 1>;
    spcmapfile: export_default$l<0 | 1>;
}>;
declare function pgBasetype(a0: export_default$m<0 | 1>): export_default$m<0 | 1>;
declare function pgBlockingPids(a0: export_default$10<0 | 1>): Array$1<0 | 1, export_default$10<0 | 1>>;
declare function pgCancelBackend(a0: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function pgCharToEncoding(a0: export_default$M<0 | 1>): export_default$10<0 | 1>;
declare function pgClientEncoding(): export_default$M<0 | 1>;
declare function pgCollationActualVersion(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgCollationFor(a0: Any<0 | 1>): export_default$l<0 | 1>;
declare function pgCollationIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgColumnCompression(a0: Any<0 | 1>): export_default$l<0 | 1>;
declare function pgColumnIsUpdatable(a0: export_default$w<0 | 1>, a1: export_default$12<0 | 1>, a2: export_default$1g<0 | 1>): export_default$1g<0 | 1>;
declare function pgColumnSize(a0: Any<0 | 1>): export_default$10<0 | 1>;
declare function pgColumnToastChunkId(a0: Any<0 | 1>): export_default$I<0 | 1>;
declare function pgConfLoadTime(): export_default$h<0 | 1>;
declare function pgConfig(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        setting: export_default$l<0 | 1>;
    };
}>;
declare function pgControlCheckpoint(): Record$1<0 | 1, {
    checkpoint_lsn: export_default$E<0 | 1>;
    redo_lsn: export_default$E<0 | 1>;
    redo_wal_file: export_default$l<0 | 1>;
    timeline_id: export_default$10<0 | 1>;
    prev_timeline_id: export_default$10<0 | 1>;
    full_page_writes: export_default$1g<0 | 1>;
    next_xid: export_default$l<0 | 1>;
    next_oid: export_default$I<0 | 1>;
    next_multixact_id: export_default$3<0 | 1>;
    next_multi_offset: export_default$3<0 | 1>;
    oldest_xid: export_default$3<0 | 1>;
    oldest_xid_dbid: export_default$I<0 | 1>;
    oldest_active_xid: export_default$3<0 | 1>;
    oldest_multi_xid: export_default$3<0 | 1>;
    oldest_multi_dbid: export_default$I<0 | 1>;
    oldest_commit_ts_xid: export_default$3<0 | 1>;
    newest_commit_ts_xid: export_default$3<0 | 1>;
    checkpoint_time: export_default$h<0 | 1>;
}>;
declare function pgControlInit(): Record$1<0 | 1, {
    max_data_alignment: export_default$10<0 | 1>;
    database_block_size: export_default$10<0 | 1>;
    blocks_per_segment: export_default$10<0 | 1>;
    wal_block_size: export_default$10<0 | 1>;
    bytes_per_wal_segment: export_default$10<0 | 1>;
    max_identifier_length: export_default$10<0 | 1>;
    max_index_columns: export_default$10<0 | 1>;
    max_toast_chunk_size: export_default$10<0 | 1>;
    large_object_chunk_size: export_default$10<0 | 1>;
    float8_pass_by_value: export_default$1g<0 | 1>;
    data_page_checksum_version: export_default$10<0 | 1>;
}>;
declare function pgControlRecovery(): Record$1<0 | 1, {
    min_recovery_end_lsn: export_default$E<0 | 1>;
    min_recovery_end_timeline: export_default$10<0 | 1>;
    backup_start_lsn: export_default$E<0 | 1>;
    backup_end_lsn: export_default$E<0 | 1>;
    end_of_backup_record_required: export_default$1g<0 | 1>;
}>;
declare function pgControlSystem(): Record$1<0 | 1, {
    pg_control_version: export_default$10<0 | 1>;
    catalog_version_no: export_default$10<0 | 1>;
    system_identifier: export_default$Z<0 | 1>;
    pg_control_last_modified: export_default$h<0 | 1>;
}>;
declare function pgConversionIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgCopyLogicalReplicationSlot(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): Record$1<0 | 1, {
    slot_name: export_default$M<0 | 1>;
    lsn: export_default$E<0 | 1>;
}>;
declare function pgCopyLogicalReplicationSlot(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$1g<0 | 1>): Record$1<0 | 1, {
    slot_name: export_default$M<0 | 1>;
    lsn: export_default$E<0 | 1>;
}>;
declare function pgCopyLogicalReplicationSlot(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$M<0 | 1>): Record$1<0 | 1, {
    slot_name: export_default$M<0 | 1>;
    lsn: export_default$E<0 | 1>;
}>;
declare function pgCopyPhysicalReplicationSlot(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>): Record$1<0 | 1, {
    slot_name: export_default$M<0 | 1>;
    lsn: export_default$E<0 | 1>;
}>;
declare function pgCopyPhysicalReplicationSlot(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$1g<0 | 1>): Record$1<0 | 1, {
    slot_name: export_default$M<0 | 1>;
    lsn: export_default$E<0 | 1>;
}>;
declare function pgCreateLogicalReplicationSlot(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$1g<0 | 1>, a4: export_default$1g<0 | 1>): Record$1<0 | 1, {
    slot_name: export_default$M<0 | 1>;
    lsn: export_default$E<0 | 1>;
}>;
declare function pgCreatePhysicalReplicationSlot(a0: export_default$M<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>): Record$1<0 | 1, {
    slot_name: export_default$M<0 | 1>;
    lsn: export_default$E<0 | 1>;
}>;
declare function pgCreateRestorePoint(a0: export_default$l<0 | 1>): export_default$E<0 | 1>;
declare function pgCurrentLogfile(): export_default$l<0 | 1>;
declare function pgCurrentLogfile(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function pgCurrentSnapshot(): export_default$B<0 | 1>;
declare function pgCurrentWalFlushLsn(): export_default$E<0 | 1>;
declare function pgCurrentWalInsertLsn(): export_default$E<0 | 1>;
declare function pgCurrentWalLsn(): export_default$E<0 | 1>;
declare function pgCurrentXactId(): export_default$2<0 | 1>;
declare function pgCurrentXactIdIfAssigned(): export_default$2<0 | 1>;
declare function pgCursor(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        statement: export_default$l<0 | 1>;
        is_holdable: export_default$1g<0 | 1>;
        is_binary: export_default$1g<0 | 1>;
        is_scrollable: export_default$1g<0 | 1>;
        creation_time: export_default$h<0 | 1>;
    };
}>;
declare function pgDatabaseCollationActualVersion(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgDatabaseSize(a0: export_default$M<0 | 1>): export_default$Z<0 | 1>;
declare function pgDatabaseSize(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgDescribeObject(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function pgDropReplicationSlot(a0: export_default$M<0 | 1>): export_default$4<0 | 1>;
declare function pgEncodingMaxLength(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function pgEncodingToChar(a0: export_default$10<0 | 1>): export_default$M<0 | 1>;
declare function pgEventTriggerDdlCommands(): Setof<{
    from: {
        classid: export_default$I<0 | 1>;
        objid: export_default$I<0 | 1>;
        objsubid: export_default$10<0 | 1>;
        command_tag: export_default$l<0 | 1>;
        object_type: export_default$l<0 | 1>;
        schema_name: export_default$l<0 | 1>;
        object_identity: export_default$l<0 | 1>;
        in_extension: export_default$1g<0 | 1>;
        command: export_default$F<0 | 1>;
    };
}>;
declare function pgEventTriggerDroppedObjects(): Setof<{
    from: {
        classid: export_default$I<0 | 1>;
        objid: export_default$I<0 | 1>;
        objsubid: export_default$10<0 | 1>;
        original: export_default$1g<0 | 1>;
        normal: export_default$1g<0 | 1>;
        is_temporary: export_default$1g<0 | 1>;
        object_type: export_default$l<0 | 1>;
        schema_name: export_default$l<0 | 1>;
        object_name: export_default$l<0 | 1>;
        object_identity: export_default$l<0 | 1>;
        address_names: Array$1<0 | 1, export_default$l<0 | 1>>;
        address_args: Array$1<0 | 1, export_default$l<0 | 1>>;
    };
}>;
declare function pgEventTriggerTableRewriteOid(): export_default$I<0 | 1>;
declare function pgEventTriggerTableRewriteReason(): export_default$10<0 | 1>;
declare function pgExportSnapshot(): export_default$l<0 | 1>;
declare function pgExtensionConfigDump(a0: export_default$w<0 | 1>, a1: export_default$l<0 | 1>): export_default$4<0 | 1>;
declare function pgExtensionUpdatePaths(a0: export_default$M<0 | 1>): Setof<{
    from: {
        source: export_default$l<0 | 1>;
        target: export_default$l<0 | 1>;
        path: export_default$l<0 | 1>;
    };
}>;
declare function pgFilenodeRelation(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>): export_default$w<0 | 1>;
declare function pgFunctionIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgGetBackendMemoryContexts(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        ident: export_default$l<0 | 1>;
        parent: export_default$l<0 | 1>;
        level: export_default$10<0 | 1>;
        total_bytes: export_default$Z<0 | 1>;
        total_nblocks: export_default$Z<0 | 1>;
        free_bytes: export_default$Z<0 | 1>;
        free_chunks: export_default$Z<0 | 1>;
        used_bytes: export_default$Z<0 | 1>;
    };
}>;
declare function pgGetCatalogForeignKeys(): Setof<{
    from: {
        fktable: export_default$w<0 | 1>;
        fkcols: Array$1<0 | 1, export_default$l<0 | 1>>;
        pktable: export_default$w<0 | 1>;
        pkcols: Array$1<0 | 1, export_default$l<0 | 1>>;
        is_array: export_default$1g<0 | 1>;
        is_opt: export_default$1g<0 | 1>;
    };
}>;
declare function pgGetConstraintdef(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetConstraintdef(a0: export_default$I<0 | 1>, a1: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function pgGetExpr(a0: export_default$C<0 | 1>, a1: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetExpr(a0: export_default$C<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function pgGetFunctionArgDefault(a0: export_default$I<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function pgGetFunctionArguments(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetFunctionIdentityArguments(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetFunctionResult(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetFunctionSqlbody(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetFunctiondef(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetIndexdef(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetIndexdef(a0: export_default$I<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function pgGetKeywords(): Setof<{
    from: {
        word: export_default$l<0 | 1>;
        catcode: export_default$1c<0 | 1>;
        barelabel: export_default$1g<0 | 1>;
        catdesc: export_default$l<0 | 1>;
        baredesc: export_default$l<0 | 1>;
    };
}>;
declare function pgGetMultixactMembers(a0: export_default$3<0 | 1>): Setof<{
    from: {
        xid: export_default$3<0 | 1>;
        mode: export_default$l<0 | 1>;
    };
}>;
declare function pgGetObjectAddress(a0: export_default$l<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>, a2: Array$1<0 | 1, export_default$l<0 | 1>>): Record$1<0 | 1, {
    classid: export_default$I<0 | 1>;
    objid: export_default$I<0 | 1>;
    objsubid: export_default$10<0 | 1>;
}>;
declare function pgGetPartitionConstraintdef(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetPartkeydef(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetPublicationTables(a0: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
    from: {
        pubid: export_default$I<0 | 1>;
        relid: export_default$I<0 | 1>;
        attrs: export_default$11<0 | 1>;
        qual: export_default$C<0 | 1>;
    };
}>;
declare function pgGetReplicaIdentityIndex(a0: export_default$w<0 | 1>): export_default$w<0 | 1>;
declare function pgGetReplicationSlots(): Setof<{
    from: {
        slot_name: export_default$M<0 | 1>;
        plugin: export_default$M<0 | 1>;
        slot_type: export_default$l<0 | 1>;
        datoid: export_default$I<0 | 1>;
        temporary: export_default$1g<0 | 1>;
        active: export_default$1g<0 | 1>;
        active_pid: export_default$10<0 | 1>;
        xmin: export_default$3<0 | 1>;
        catalog_xmin: export_default$3<0 | 1>;
        restart_lsn: export_default$E<0 | 1>;
        confirmed_flush_lsn: export_default$E<0 | 1>;
        wal_status: export_default$l<0 | 1>;
        safe_wal_size: export_default$Z<0 | 1>;
        two_phase: export_default$1g<0 | 1>;
        inactive_since: export_default$h<0 | 1>;
        conflicting: export_default$1g<0 | 1>;
        invalidation_reason: export_default$l<0 | 1>;
        failover: export_default$1g<0 | 1>;
        synced: export_default$1g<0 | 1>;
    };
}>;
declare function pgGetRuledef(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetRuledef(a0: export_default$I<0 | 1>, a1: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function pgGetSerialSequence(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function pgGetShmemAllocations(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        off: export_default$Z<0 | 1>;
        size: export_default$Z<0 | 1>;
        allocated_size: export_default$Z<0 | 1>;
    };
}>;
declare function pgGetStatisticsobjdef(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetStatisticsobjdefColumns(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetStatisticsobjdefExpressions(a0: export_default$I<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function pgGetTriggerdef(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetTriggerdef(a0: export_default$I<0 | 1>, a1: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function pgGetUserbyid(a0: export_default$I<0 | 1>): export_default$M<0 | 1>;
declare function pgGetViewdef(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgGetViewdef(a0: export_default$I<0 | 1>, a1: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function pgGetViewdef(a0: export_default$I<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function pgGetViewdef(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function pgGetViewdef(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function pgGetWaitEvents(): Setof<{
    from: {
        type: export_default$l<0 | 1>;
        name: export_default$l<0 | 1>;
        description: export_default$l<0 | 1>;
    };
}>;
declare function pgGetWalReplayPauseState(): export_default$l<0 | 1>;
declare function pgGetWalResourceManagers(): Setof<{
    from: {
        rm_id: export_default$10<0 | 1>;
        rm_name: export_default$l<0 | 1>;
        rm_builtin: export_default$1g<0 | 1>;
    };
}>;
declare function pgGetWalSummarizerState(): Record$1<0 | 1, {
    summarized_tli: export_default$Z<0 | 1>;
    summarized_lsn: export_default$E<0 | 1>;
    pending_lsn: export_default$E<0 | 1>;
    summarizer_pid: export_default$10<0 | 1>;
}>;
declare function pgHasRole(a0: export_default$M<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgHasRole(a0: export_default$M<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgHasRole(a0: export_default$M<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgHasRole(a0: export_default$I<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgHasRole(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgHasRole(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgHbaFileRules(): Setof<{
    from: {
        rule_number: export_default$10<0 | 1>;
        file_name: export_default$l<0 | 1>;
        line_number: export_default$10<0 | 1>;
        type: export_default$l<0 | 1>;
        database: Array$1<0 | 1, export_default$l<0 | 1>>;
        user_name: Array$1<0 | 1, export_default$l<0 | 1>>;
        address: export_default$l<0 | 1>;
        netmask: export_default$l<0 | 1>;
        auth_method: export_default$l<0 | 1>;
        options: Array$1<0 | 1, export_default$l<0 | 1>>;
        error: export_default$l<0 | 1>;
    };
}>;
declare function pgIdentFileMappings(): Setof<{
    from: {
        map_number: export_default$10<0 | 1>;
        file_name: export_default$l<0 | 1>;
        line_number: export_default$10<0 | 1>;
        map_name: export_default$l<0 | 1>;
        sys_name: export_default$l<0 | 1>;
        pg_username: export_default$l<0 | 1>;
        error: export_default$l<0 | 1>;
    };
}>;
declare function pgIdentifyObject(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$10<0 | 1>): Record$1<0 | 1, {
    type: export_default$l<0 | 1>;
    schema: export_default$l<0 | 1>;
    name: export_default$l<0 | 1>;
    identity: export_default$l<0 | 1>;
}>;
declare function pgIdentifyObjectAsAddress(a0: export_default$I<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$10<0 | 1>): Record$1<0 | 1, {
    type: export_default$l<0 | 1>;
    object_names: Array$1<0 | 1, export_default$l<0 | 1>>;
    object_args: Array$1<0 | 1, export_default$l<0 | 1>>;
}>;
declare function pgImportSystemCollations(a0: export_default$s<0 | 1>): export_default$10<0 | 1>;
declare function pgIndexColumnHasProperty(a0: export_default$w<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgIndexHasProperty(a0: export_default$w<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgIndexamHasProperty(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgIndexamProgressPhasename(a0: export_default$I<0 | 1>, a1: export_default$Z<0 | 1>): export_default$l<0 | 1>;
declare function pgIndexesSize(a0: export_default$w<0 | 1>): export_default$Z<0 | 1>;
declare function pgInputErrorInfo(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): Record$1<0 | 1, {
    message: export_default$l<0 | 1>;
    detail: export_default$l<0 | 1>;
    hint: export_default$l<0 | 1>;
    sql_error_code: export_default$l<0 | 1>;
}>;
declare function pgInputIsValid(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function pgIsInRecovery(): export_default$1g<0 | 1>;
declare function pgIsOtherTempSchema(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgIsWalReplayPaused(): export_default$1g<0 | 1>;
declare function pgIsolationTestSessionIsBlocked(a0: export_default$10<0 | 1>, a1: Array$1<0 | 1, export_default$10<0 | 1>>): export_default$1g<0 | 1>;
declare function pgJitAvailable(): export_default$1g<0 | 1>;
declare function pgLastCommittedXact(): Record$1<0 | 1, {
    xid: export_default$3<0 | 1>;
    timestamp: export_default$h<0 | 1>;
    roident: export_default$I<0 | 1>;
}>;
declare function pgLastWalReceiveLsn(): export_default$E<0 | 1>;
declare function pgLastWalReplayLsn(): export_default$E<0 | 1>;
declare function pgLastXactReplayTimestamp(): export_default$h<0 | 1>;
declare function pgListeningChannels(): Setof<{
    from: {};
}>;
declare function pgLockStatus(): Setof<{
    from: {
        locktype: export_default$l<0 | 1>;
        database: export_default$I<0 | 1>;
        relation: export_default$I<0 | 1>;
        page: export_default$10<0 | 1>;
        tuple: export_default$12<0 | 1>;
        virtualxid: export_default$l<0 | 1>;
        transactionid: export_default$3<0 | 1>;
        classid: export_default$I<0 | 1>;
        objid: export_default$I<0 | 1>;
        objsubid: export_default$12<0 | 1>;
        virtualtransaction: export_default$l<0 | 1>;
        pid: export_default$10<0 | 1>;
        mode: export_default$l<0 | 1>;
        granted: export_default$1g<0 | 1>;
        fastpath: export_default$1g<0 | 1>;
        waitstart: export_default$h<0 | 1>;
    };
}>;
declare function pgLogBackendMemoryContexts(a0: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function pgLogStandbySnapshot(): export_default$E<0 | 1>;
declare function pgLogicalEmitMessage(a0: export_default$1g<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$1d<0 | 1>, a3: export_default$1g<0 | 1>): export_default$E<0 | 1>;
declare function pgLogicalEmitMessage(a0: export_default$1g<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$1g<0 | 1>): export_default$E<0 | 1>;
declare function pgLogicalSlotGetBinaryChanges(a0: export_default$M<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$10<0 | 1>, a3: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
    from: {
        lsn: export_default$E<0 | 1>;
        xid: export_default$3<0 | 1>;
        data: export_default$1d<0 | 1>;
    };
}>;
declare function pgLogicalSlotGetChanges(a0: export_default$M<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$10<0 | 1>, a3: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
    from: {
        lsn: export_default$E<0 | 1>;
        xid: export_default$3<0 | 1>;
        data: export_default$l<0 | 1>;
    };
}>;
declare function pgLogicalSlotPeekBinaryChanges(a0: export_default$M<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$10<0 | 1>, a3: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
    from: {
        lsn: export_default$E<0 | 1>;
        xid: export_default$3<0 | 1>;
        data: export_default$1d<0 | 1>;
    };
}>;
declare function pgLogicalSlotPeekChanges(a0: export_default$M<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$10<0 | 1>, a3: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
    from: {
        lsn: export_default$E<0 | 1>;
        xid: export_default$3<0 | 1>;
        data: export_default$l<0 | 1>;
    };
}>;
declare function pgLsArchiveStatusdir(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        size: export_default$Z<0 | 1>;
        modification: export_default$h<0 | 1>;
    };
}>;
declare function pgLsDir(a0: export_default$l<0 | 1>): Setof<{
    from: {};
}>;
declare function pgLsDir(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>): Setof<{
    from: {};
}>;
declare function pgLsLogdir(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        size: export_default$Z<0 | 1>;
        modification: export_default$h<0 | 1>;
    };
}>;
declare function pgLsLogicalmapdir(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        size: export_default$Z<0 | 1>;
        modification: export_default$h<0 | 1>;
    };
}>;
declare function pgLsLogicalsnapdir(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        size: export_default$Z<0 | 1>;
        modification: export_default$h<0 | 1>;
    };
}>;
declare function pgLsReplslotdir(a0: export_default$l<0 | 1>): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        size: export_default$Z<0 | 1>;
        modification: export_default$h<0 | 1>;
    };
}>;
declare function pgLsTmpdir(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        size: export_default$Z<0 | 1>;
        modification: export_default$h<0 | 1>;
    };
}>;
declare function pgLsTmpdir(a0: export_default$I<0 | 1>): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        size: export_default$Z<0 | 1>;
        modification: export_default$h<0 | 1>;
    };
}>;
declare function pgLsWaldir(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        size: export_default$Z<0 | 1>;
        modification: export_default$h<0 | 1>;
    };
}>;
declare function pgLsn(a0: export_default$L<0 | 1>): export_default$E<0 | 1>;
declare function pgLsnCmp(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$10<0 | 1>;
declare function pgLsnEq(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
declare function pgLsnGe(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
declare function pgLsnGt(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
declare function pgLsnHash(a0: export_default$E<0 | 1>): export_default$10<0 | 1>;
declare function pgLsnHashExtended(a0: export_default$E<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function pgLsnLarger(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$E<0 | 1>;
declare function pgLsnLe(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
declare function pgLsnLt(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
declare function pgLsnMi(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$L<0 | 1>;
declare function pgLsnMii(a0: export_default$E<0 | 1>, a1: export_default$L<0 | 1>): export_default$E<0 | 1>;
declare function pgLsnNe(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$1g<0 | 1>;
declare function pgLsnPli(a0: export_default$E<0 | 1>, a1: export_default$L<0 | 1>): export_default$E<0 | 1>;
declare function pgLsnSmaller(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$E<0 | 1>;
declare function pgMcvListItems(a0: export_default$D<0 | 1>): Setof<{
    from: {
        index: export_default$10<0 | 1>;
        values: Array$1<0 | 1, export_default$l<0 | 1>>;
        nulls: Array$1<0 | 1, export_default$1g<0 | 1>>;
        frequency: export_default$14<0 | 1>;
        base_frequency: export_default$14<0 | 1>;
    };
}>;
declare function pgMyTempSchema(): export_default$I<0 | 1>;
declare function pgNextoid(a0: export_default$w<0 | 1>, a1: export_default$M<0 | 1>, a2: export_default$w<0 | 1>): export_default$I<0 | 1>;
declare function pgNotificationQueueUsage(): export_default$14<0 | 1>;
declare function pgNotify(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$4<0 | 1>;
declare function pgOpclassIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgOperatorIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgOpfamilyIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgOptionsToTable(a0: Array$1<0 | 1, export_default$l<0 | 1>>): Setof<{
    from: {
        option_name: export_default$l<0 | 1>;
        option_value: export_default$l<0 | 1>;
    };
}>;
declare function pgPartitionAncestors(a0: export_default$w<0 | 1>): Setof<{
    from: {
        relid: export_default$w<0 | 1>;
    };
}>;
declare function pgPartitionRoot(a0: export_default$w<0 | 1>): export_default$w<0 | 1>;
declare function pgPartitionTree(a0: export_default$w<0 | 1>): Setof<{
    from: {
        relid: export_default$w<0 | 1>;
        parentrelid: export_default$w<0 | 1>;
        isleaf: export_default$1g<0 | 1>;
        level: export_default$10<0 | 1>;
    };
}>;
declare function pgPostmasterStartTime(): export_default$h<0 | 1>;
declare function pgPreparedStatement(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        statement: export_default$l<0 | 1>;
        prepare_time: export_default$h<0 | 1>;
        parameter_types: Array$1<0 | 1, export_default$m<0 | 1>>;
        result_types: Array$1<0 | 1, export_default$m<0 | 1>>;
        from_sql: export_default$1g<0 | 1>;
        generic_plans: export_default$Z<0 | 1>;
        custom_plans: export_default$Z<0 | 1>;
    };
}>;
declare function pgPreparedXact(): Setof<{
    from: {
        transaction: export_default$3<0 | 1>;
        gid: export_default$l<0 | 1>;
        prepared: export_default$h<0 | 1>;
        ownerid: export_default$I<0 | 1>;
        dbid: export_default$I<0 | 1>;
    };
}>;
declare function pgPromote(a0: export_default$1g<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function pgReadBinaryFile(a0: export_default$l<0 | 1>): export_default$1d<0 | 1>;
declare function pgReadBinaryFile(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>): export_default$1d<0 | 1>;
declare function pgReadBinaryFile(a0: export_default$l<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$Z<0 | 1>): export_default$1d<0 | 1>;
declare function pgReadBinaryFile(a0: export_default$l<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$Z<0 | 1>, a3: export_default$1g<0 | 1>): export_default$1d<0 | 1>;
declare function pgReadFile(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function pgReadFile(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function pgReadFile(a0: export_default$l<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$Z<0 | 1>): export_default$l<0 | 1>;
declare function pgReadFile(a0: export_default$l<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$Z<0 | 1>, a3: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function pgRelationFilenode(a0: export_default$w<0 | 1>): export_default$I<0 | 1>;
declare function pgRelationFilepath(a0: export_default$w<0 | 1>): export_default$l<0 | 1>;
declare function pgRelationIsPublishable(a0: export_default$w<0 | 1>): export_default$1g<0 | 1>;
declare function pgRelationIsUpdatable(a0: export_default$w<0 | 1>, a1: export_default$1g<0 | 1>): export_default$10<0 | 1>;
declare function pgRelationSize(a0: export_default$w<0 | 1>): export_default$Z<0 | 1>;
declare function pgRelationSize(a0: export_default$w<0 | 1>, a1: export_default$l<0 | 1>): export_default$Z<0 | 1>;
declare function pgReloadConf(): export_default$1g<0 | 1>;
declare function pgReplicationOriginAdvance(a0: export_default$l<0 | 1>, a1: export_default$E<0 | 1>): export_default$4<0 | 1>;
declare function pgReplicationOriginCreate(a0: export_default$l<0 | 1>): export_default$I<0 | 1>;
declare function pgReplicationOriginDrop(a0: export_default$l<0 | 1>): export_default$4<0 | 1>;
declare function pgReplicationOriginOid(a0: export_default$l<0 | 1>): export_default$I<0 | 1>;
declare function pgReplicationOriginProgress(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>): export_default$E<0 | 1>;
declare function pgReplicationOriginSessionIsSetup(): export_default$1g<0 | 1>;
declare function pgReplicationOriginSessionProgress(a0: export_default$1g<0 | 1>): export_default$E<0 | 1>;
declare function pgReplicationOriginSessionReset(): export_default$4<0 | 1>;
declare function pgReplicationOriginSessionSetup(a0: export_default$l<0 | 1>): export_default$4<0 | 1>;
declare function pgReplicationOriginXactReset(): export_default$4<0 | 1>;
declare function pgReplicationOriginXactSetup(a0: export_default$E<0 | 1>, a1: export_default$h<0 | 1>): export_default$4<0 | 1>;
declare function pgReplicationSlotAdvance(a0: export_default$M<0 | 1>, a1: export_default$E<0 | 1>): Record$1<0 | 1, {
    slot_name: export_default$M<0 | 1>;
    end_lsn: export_default$E<0 | 1>;
}>;
declare function pgRotateLogfile(): export_default$1g<0 | 1>;
declare function pgSafeSnapshotBlockingPids(a0: export_default$10<0 | 1>): Array$1<0 | 1, export_default$10<0 | 1>>;
declare function pgSequenceLastValue(a0: export_default$w<0 | 1>): export_default$Z<0 | 1>;
declare function pgSequenceParameters(a0: export_default$I<0 | 1>): Record$1<0 | 1, {
    start_value: export_default$Z<0 | 1>;
    minimum_value: export_default$Z<0 | 1>;
    maximum_value: export_default$Z<0 | 1>;
    increment: export_default$Z<0 | 1>;
    cycle_option: export_default$1g<0 | 1>;
    cache_size: export_default$Z<0 | 1>;
    data_type: export_default$I<0 | 1>;
}>;
declare function pgSettingsGetFlags(a0: export_default$l<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function pgShowAllFileSettings(): Setof<{
    from: {
        sourcefile: export_default$l<0 | 1>;
        sourceline: export_default$10<0 | 1>;
        seqno: export_default$10<0 | 1>;
        name: export_default$l<0 | 1>;
        setting: export_default$l<0 | 1>;
        applied: export_default$1g<0 | 1>;
        error: export_default$l<0 | 1>;
    };
}>;
declare function pgShowAllSettings(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        setting: export_default$l<0 | 1>;
        unit: export_default$l<0 | 1>;
        category: export_default$l<0 | 1>;
        short_desc: export_default$l<0 | 1>;
        extra_desc: export_default$l<0 | 1>;
        context: export_default$l<0 | 1>;
        vartype: export_default$l<0 | 1>;
        source: export_default$l<0 | 1>;
        min_val: export_default$l<0 | 1>;
        max_val: export_default$l<0 | 1>;
        enumvals: Array$1<0 | 1, export_default$l<0 | 1>>;
        boot_val: export_default$l<0 | 1>;
        reset_val: export_default$l<0 | 1>;
        sourcefile: export_default$l<0 | 1>;
        sourceline: export_default$10<0 | 1>;
        pending_restart: export_default$1g<0 | 1>;
    };
}>;
declare function pgShowReplicationOriginStatus(): Setof<{
    from: {
        local_id: export_default$I<0 | 1>;
        external_id: export_default$l<0 | 1>;
        remote_lsn: export_default$E<0 | 1>;
        local_lsn: export_default$E<0 | 1>;
    };
}>;
declare function pgSizeBytes(a0: export_default$l<0 | 1>): export_default$Z<0 | 1>;
declare function pgSizePretty(a0: export_default$Z<0 | 1>): export_default$l<0 | 1>;
declare function pgSizePretty(a0: export_default$L<0 | 1>): export_default$l<0 | 1>;
declare function pgSleep(a0: export_default$14<0 | 1>): export_default$4<0 | 1>;
declare function pgSleepFor(a0: export_default$W<0 | 1>): export_default$4<0 | 1>;
declare function pgSleepUntil(a0: export_default$h<0 | 1>): export_default$4<0 | 1>;
declare function pgSnapshotXip(a0: export_default$B<0 | 1>): Setof<{
    from: {};
}>;
declare function pgSnapshotXmax(a0: export_default$B<0 | 1>): export_default$2<0 | 1>;
declare function pgSplitWalfileName(a0: export_default$l<0 | 1>): Record$1<0 | 1, {
    segment_number: export_default$L<0 | 1>;
    timeline_id: export_default$Z<0 | 1>;
}>;
declare function pgStatClearSnapshot(): export_default$4<0 | 1>;
declare function pgStatFile(a0: export_default$l<0 | 1>): Record$1<0 | 1, {
    size: export_default$Z<0 | 1>;
    access: export_default$h<0 | 1>;
    modification: export_default$h<0 | 1>;
    change: export_default$h<0 | 1>;
    creation: export_default$h<0 | 1>;
    isdir: export_default$1g<0 | 1>;
}>;
declare function pgStatFile(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>): Record$1<0 | 1, {
    size: export_default$Z<0 | 1>;
    access: export_default$h<0 | 1>;
    modification: export_default$h<0 | 1>;
    change: export_default$h<0 | 1>;
    creation: export_default$h<0 | 1>;
    isdir: export_default$1g<0 | 1>;
}>;
declare function pgStatForceNextFlush(): export_default$4<0 | 1>;
declare function pgStatGetActivity(a0: export_default$10<0 | 1>): Setof<{
    from: {
        datid: export_default$I<0 | 1>;
        pid: export_default$10<0 | 1>;
        usesysid: export_default$I<0 | 1>;
        application_name: export_default$l<0 | 1>;
        state: export_default$l<0 | 1>;
        query: export_default$l<0 | 1>;
        wait_event_type: export_default$l<0 | 1>;
        wait_event: export_default$l<0 | 1>;
        xact_start: export_default$h<0 | 1>;
        query_start: export_default$h<0 | 1>;
        backend_start: export_default$h<0 | 1>;
        state_change: export_default$h<0 | 1>;
        client_addr: export_default$13<0 | 1>;
        client_hostname: export_default$l<0 | 1>;
        client_port: export_default$10<0 | 1>;
        backend_xid: export_default$3<0 | 1>;
        backend_xmin: export_default$3<0 | 1>;
        backend_type: export_default$l<0 | 1>;
        ssl: export_default$1g<0 | 1>;
        sslversion: export_default$l<0 | 1>;
        sslcipher: export_default$l<0 | 1>;
        sslbits: export_default$10<0 | 1>;
        ssl_client_dn: export_default$l<0 | 1>;
        ssl_client_serial: export_default$L<0 | 1>;
        ssl_issuer_dn: export_default$l<0 | 1>;
        gss_auth: export_default$1g<0 | 1>;
        gss_princ: export_default$l<0 | 1>;
        gss_enc: export_default$1g<0 | 1>;
        gss_delegation: export_default$1g<0 | 1>;
        leader_pid: export_default$10<0 | 1>;
        query_id: export_default$Z<0 | 1>;
    };
}>;
declare function pgStatGetAnalyzeCount(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetArchiver(): Record$1<0 | 1, {
    archived_count: export_default$Z<0 | 1>;
    last_archived_wal: export_default$l<0 | 1>;
    last_archived_time: export_default$h<0 | 1>;
    failed_count: export_default$Z<0 | 1>;
    last_failed_wal: export_default$l<0 | 1>;
    last_failed_time: export_default$h<0 | 1>;
    stats_reset: export_default$h<0 | 1>;
}>;
declare function pgStatGetAutoanalyzeCount(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetAutovacuumCount(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetBackendActivity(a0: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function pgStatGetBackendActivityStart(a0: export_default$10<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetBackendClientAddr(a0: export_default$10<0 | 1>): export_default$13<0 | 1>;
declare function pgStatGetBackendClientPort(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function pgStatGetBackendDbid(a0: export_default$10<0 | 1>): export_default$I<0 | 1>;
declare function pgStatGetBackendIdset(): Setof<{
    from: {};
}>;
declare function pgStatGetBackendPid(a0: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function pgStatGetBackendStart(a0: export_default$10<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetBackendSubxact(a0: export_default$10<0 | 1>): Record$1<0 | 1, {
    subxact_count: export_default$10<0 | 1>;
    subxact_overflowed: export_default$1g<0 | 1>;
}>;
declare function pgStatGetBackendUserid(a0: export_default$10<0 | 1>): export_default$I<0 | 1>;
declare function pgStatGetBackendWaitEvent(a0: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function pgStatGetBackendWaitEventType(a0: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function pgStatGetBackendXactStart(a0: export_default$10<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetBgwriterBufWrittenClean(): export_default$Z<0 | 1>;
declare function pgStatGetBgwriterMaxwrittenClean(): export_default$Z<0 | 1>;
declare function pgStatGetBgwriterStatResetTime(): export_default$h<0 | 1>;
declare function pgStatGetBlocksFetched(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetBlocksHit(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetBufAlloc(): export_default$Z<0 | 1>;
declare function pgStatGetCheckpointerBuffersWritten(): export_default$Z<0 | 1>;
declare function pgStatGetCheckpointerNumRequested(): export_default$Z<0 | 1>;
declare function pgStatGetCheckpointerNumTimed(): export_default$Z<0 | 1>;
declare function pgStatGetCheckpointerRestartpointsPerformed(): export_default$Z<0 | 1>;
declare function pgStatGetCheckpointerRestartpointsRequested(): export_default$Z<0 | 1>;
declare function pgStatGetCheckpointerRestartpointsTimed(): export_default$Z<0 | 1>;
declare function pgStatGetCheckpointerStatResetTime(): export_default$h<0 | 1>;
declare function pgStatGetCheckpointerSyncTime(): export_default$14<0 | 1>;
declare function pgStatGetCheckpointerWriteTime(): export_default$14<0 | 1>;
declare function pgStatGetDbActiveTime(a0: export_default$I<0 | 1>): export_default$14<0 | 1>;
declare function pgStatGetDbBlkReadTime(a0: export_default$I<0 | 1>): export_default$14<0 | 1>;
declare function pgStatGetDbBlkWriteTime(a0: export_default$I<0 | 1>): export_default$14<0 | 1>;
declare function pgStatGetDbBlocksFetched(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbBlocksHit(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbChecksumFailures(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbChecksumLastFailure(a0: export_default$I<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetDbConflictAll(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbConflictLock(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbConflictLogicalslot(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbConflictSnapshot(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbConflictStartupDeadlock(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbConflictTablespace(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbDeadlocks(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbIdleInTransactionTime(a0: export_default$I<0 | 1>): export_default$14<0 | 1>;
declare function pgStatGetDbNumbackends(a0: export_default$I<0 | 1>): export_default$10<0 | 1>;
declare function pgStatGetDbSessionTime(a0: export_default$I<0 | 1>): export_default$14<0 | 1>;
declare function pgStatGetDbSessions(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbSessionsAbandoned(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbSessionsFatal(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbSessionsKilled(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbStatResetTime(a0: export_default$I<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetDbTempBytes(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbTempFiles(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbTuplesDeleted(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbTuplesFetched(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbTuplesInserted(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbTuplesReturned(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbTuplesUpdated(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbXactCommit(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDbXactRollback(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetDeadTuples(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetFunctionCalls(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetFunctionSelfTime(a0: export_default$I<0 | 1>): export_default$14<0 | 1>;
declare function pgStatGetFunctionTotalTime(a0: export_default$I<0 | 1>): export_default$14<0 | 1>;
declare function pgStatGetInsSinceVacuum(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetIo(): Setof<{
    from: {
        backend_type: export_default$l<0 | 1>;
        object: export_default$l<0 | 1>;
        context: export_default$l<0 | 1>;
        reads: export_default$Z<0 | 1>;
        read_time: export_default$14<0 | 1>;
        writes: export_default$Z<0 | 1>;
        write_time: export_default$14<0 | 1>;
        writebacks: export_default$Z<0 | 1>;
        writeback_time: export_default$14<0 | 1>;
        extends: export_default$Z<0 | 1>;
        extend_time: export_default$14<0 | 1>;
        op_bytes: export_default$Z<0 | 1>;
        hits: export_default$Z<0 | 1>;
        evictions: export_default$Z<0 | 1>;
        reuses: export_default$Z<0 | 1>;
        fsyncs: export_default$Z<0 | 1>;
        fsync_time: export_default$14<0 | 1>;
        stats_reset: export_default$h<0 | 1>;
    };
}>;
declare function pgStatGetLastAnalyzeTime(a0: export_default$I<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetLastAutoanalyzeTime(a0: export_default$I<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetLastAutovacuumTime(a0: export_default$I<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetLastVacuumTime(a0: export_default$I<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetLastscan(a0: export_default$I<0 | 1>): export_default$h<0 | 1>;
declare function pgStatGetLiveTuples(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetModSinceAnalyze(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetNumscans(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetProgressInfo(a0: export_default$l<0 | 1>): Setof<{
    from: {
        pid: export_default$10<0 | 1>;
        datid: export_default$I<0 | 1>;
        relid: export_default$I<0 | 1>;
        param1: export_default$Z<0 | 1>;
        param2: export_default$Z<0 | 1>;
        param3: export_default$Z<0 | 1>;
        param4: export_default$Z<0 | 1>;
        param5: export_default$Z<0 | 1>;
        param6: export_default$Z<0 | 1>;
        param7: export_default$Z<0 | 1>;
        param8: export_default$Z<0 | 1>;
        param9: export_default$Z<0 | 1>;
        param10: export_default$Z<0 | 1>;
        param11: export_default$Z<0 | 1>;
        param12: export_default$Z<0 | 1>;
        param13: export_default$Z<0 | 1>;
        param14: export_default$Z<0 | 1>;
        param15: export_default$Z<0 | 1>;
        param16: export_default$Z<0 | 1>;
        param17: export_default$Z<0 | 1>;
        param18: export_default$Z<0 | 1>;
        param19: export_default$Z<0 | 1>;
        param20: export_default$Z<0 | 1>;
    };
}>;
declare function pgStatGetRecoveryPrefetch(): Setof<{
    from: {
        stats_reset: export_default$h<0 | 1>;
        prefetch: export_default$Z<0 | 1>;
        hit: export_default$Z<0 | 1>;
        skip_init: export_default$Z<0 | 1>;
        skip_new: export_default$Z<0 | 1>;
        skip_fpw: export_default$Z<0 | 1>;
        skip_rep: export_default$Z<0 | 1>;
        wal_distance: export_default$10<0 | 1>;
        block_distance: export_default$10<0 | 1>;
        io_depth: export_default$10<0 | 1>;
    };
}>;
declare function pgStatGetReplicationSlot(a0: export_default$l<0 | 1>): Record$1<0 | 1, {
    slot_name: export_default$l<0 | 1>;
    spill_txns: export_default$Z<0 | 1>;
    spill_count: export_default$Z<0 | 1>;
    spill_bytes: export_default$Z<0 | 1>;
    stream_txns: export_default$Z<0 | 1>;
    stream_count: export_default$Z<0 | 1>;
    stream_bytes: export_default$Z<0 | 1>;
    total_txns: export_default$Z<0 | 1>;
    total_bytes: export_default$Z<0 | 1>;
    stats_reset: export_default$h<0 | 1>;
}>;
declare function pgStatGetSlru(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        blks_zeroed: export_default$Z<0 | 1>;
        blks_hit: export_default$Z<0 | 1>;
        blks_read: export_default$Z<0 | 1>;
        blks_written: export_default$Z<0 | 1>;
        blks_exists: export_default$Z<0 | 1>;
        flushes: export_default$Z<0 | 1>;
        truncates: export_default$Z<0 | 1>;
        stats_reset: export_default$h<0 | 1>;
    };
}>;
declare function pgStatGetSnapshotTimestamp(): export_default$h<0 | 1>;
declare function pgStatGetSubscription(a0: export_default$I<0 | 1>): Setof<{
    from: {
        subid: export_default$I<0 | 1>;
        relid: export_default$I<0 | 1>;
        pid: export_default$10<0 | 1>;
        leader_pid: export_default$10<0 | 1>;
        received_lsn: export_default$E<0 | 1>;
        last_msg_send_time: export_default$h<0 | 1>;
        last_msg_receipt_time: export_default$h<0 | 1>;
        latest_end_lsn: export_default$E<0 | 1>;
        latest_end_time: export_default$h<0 | 1>;
        worker_type: export_default$l<0 | 1>;
    };
}>;
declare function pgStatGetSubscriptionStats(a0: export_default$I<0 | 1>): Record$1<0 | 1, {
    subid: export_default$I<0 | 1>;
    apply_error_count: export_default$Z<0 | 1>;
    sync_error_count: export_default$Z<0 | 1>;
    stats_reset: export_default$h<0 | 1>;
}>;
declare function pgStatGetTuplesDeleted(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetTuplesFetched(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetTuplesHotUpdated(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetTuplesInserted(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetTuplesNewpageUpdated(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetTuplesReturned(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetTuplesUpdated(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetVacuumCount(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetWal(): Record$1<0 | 1, {
    wal_records: export_default$Z<0 | 1>;
    wal_fpi: export_default$Z<0 | 1>;
    wal_bytes: export_default$L<0 | 1>;
    wal_buffers_full: export_default$Z<0 | 1>;
    wal_write: export_default$Z<0 | 1>;
    wal_sync: export_default$Z<0 | 1>;
    wal_write_time: export_default$14<0 | 1>;
    wal_sync_time: export_default$14<0 | 1>;
    stats_reset: export_default$h<0 | 1>;
}>;
declare function pgStatGetWalReceiver(): Record$1<0 | 1, {
    pid: export_default$10<0 | 1>;
    status: export_default$l<0 | 1>;
    receive_start_lsn: export_default$E<0 | 1>;
    receive_start_tli: export_default$10<0 | 1>;
    written_lsn: export_default$E<0 | 1>;
    flushed_lsn: export_default$E<0 | 1>;
    received_tli: export_default$10<0 | 1>;
    last_msg_send_time: export_default$h<0 | 1>;
    last_msg_receipt_time: export_default$h<0 | 1>;
    latest_end_lsn: export_default$E<0 | 1>;
    latest_end_time: export_default$h<0 | 1>;
    slot_name: export_default$l<0 | 1>;
    sender_host: export_default$l<0 | 1>;
    sender_port: export_default$10<0 | 1>;
    conninfo: export_default$l<0 | 1>;
}>;
declare function pgStatGetWalSenders(): Setof<{
    from: {
        pid: export_default$10<0 | 1>;
        state: export_default$l<0 | 1>;
        sent_lsn: export_default$E<0 | 1>;
        write_lsn: export_default$E<0 | 1>;
        flush_lsn: export_default$E<0 | 1>;
        replay_lsn: export_default$E<0 | 1>;
        write_lag: export_default$W<0 | 1>;
        flush_lag: export_default$W<0 | 1>;
        replay_lag: export_default$W<0 | 1>;
        sync_priority: export_default$10<0 | 1>;
        sync_state: export_default$l<0 | 1>;
        reply_time: export_default$h<0 | 1>;
    };
}>;
declare function pgStatGetXactBlocksFetched(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactBlocksHit(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactFunctionCalls(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactFunctionSelfTime(a0: export_default$I<0 | 1>): export_default$14<0 | 1>;
declare function pgStatGetXactFunctionTotalTime(a0: export_default$I<0 | 1>): export_default$14<0 | 1>;
declare function pgStatGetXactNumscans(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactTuplesDeleted(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactTuplesFetched(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactTuplesHotUpdated(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactTuplesInserted(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactTuplesNewpageUpdated(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactTuplesReturned(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatGetXactTuplesUpdated(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgStatHaveStats(a0: export_default$l<0 | 1>, a1: export_default$I<0 | 1>, a2: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgStatReset(): export_default$4<0 | 1>;
declare function pgStatResetReplicationSlot(a0: export_default$l<0 | 1>): export_default$4<0 | 1>;
declare function pgStatResetShared(a0: export_default$l<0 | 1>): export_default$4<0 | 1>;
declare function pgStatResetSingleFunctionCounters(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function pgStatResetSingleTableCounters(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function pgStatResetSlru(a0: export_default$l<0 | 1>): export_default$4<0 | 1>;
declare function pgStatResetSubscriptionStats(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function pgStatisticsObjIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgStopMakingPinnedObjects(): export_default$4<0 | 1>;
declare function pgSwitchWal(): export_default$E<0 | 1>;
declare function pgSyncReplicationSlots(): export_default$4<0 | 1>;
declare function pgTableIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgTableSize(a0: export_default$w<0 | 1>): export_default$Z<0 | 1>;
declare function pgTablespaceDatabases(a0: export_default$I<0 | 1>): Setof<{
    from: {};
}>;
declare function pgTablespaceLocation(a0: export_default$I<0 | 1>): export_default$l<0 | 1>;
declare function pgTablespaceSize(a0: export_default$M<0 | 1>): export_default$Z<0 | 1>;
declare function pgTablespaceSize(a0: export_default$I<0 | 1>): export_default$Z<0 | 1>;
declare function pgTerminateBackend(a0: export_default$10<0 | 1>, a1: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function pgTimezoneAbbrevs(): Setof<{
    from: {
        abbrev: export_default$l<0 | 1>;
        utc_offset: export_default$W<0 | 1>;
        is_dst: export_default$1g<0 | 1>;
    };
}>;
declare function pgTimezoneNames(): Setof<{
    from: {
        name: export_default$l<0 | 1>;
        abbrev: export_default$l<0 | 1>;
        utc_offset: export_default$W<0 | 1>;
        is_dst: export_default$1g<0 | 1>;
    };
}>;
declare function pgTotalRelationSize(a0: export_default$w<0 | 1>): export_default$Z<0 | 1>;
declare function pgTriggerDepth(): export_default$10<0 | 1>;
declare function pgTryAdvisoryLock(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function pgTryAdvisoryLock(a0: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function pgTryAdvisoryLockShared(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function pgTryAdvisoryLockShared(a0: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function pgTryAdvisoryXactLock(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function pgTryAdvisoryXactLock(a0: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function pgTryAdvisoryXactLockShared(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function pgTryAdvisoryXactLockShared(a0: export_default$Z<0 | 1>): export_default$1g<0 | 1>;
declare function pgTsConfigIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgTsDictIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgTsParserIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgTsTemplateIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgTypeIsVisible(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pgTypeof(a0: Any<0 | 1>): export_default$m<0 | 1>;
declare function pgVisibleInSnapshot(a0: export_default$2<0 | 1>, a1: export_default$B<0 | 1>): export_default$1g<0 | 1>;
declare function pgWalLsnDiff(a0: export_default$E<0 | 1>, a1: export_default$E<0 | 1>): export_default$L<0 | 1>;
declare function pgWalReplayPause(): export_default$4<0 | 1>;
declare function pgWalReplayResume(): export_default$4<0 | 1>;
declare function pgWalSummaryContents(a0: export_default$Z<0 | 1>, a1: export_default$E<0 | 1>, a2: export_default$E<0 | 1>): Setof<{
    from: {
        relfilenode: export_default$I<0 | 1>;
        reltablespace: export_default$I<0 | 1>;
        reldatabase: export_default$I<0 | 1>;
        relforknumber: export_default$12<0 | 1>;
        relblocknumber: export_default$Z<0 | 1>;
        is_limit_block: export_default$1g<0 | 1>;
    };
}>;
declare function pgWalfileName(a0: export_default$E<0 | 1>): export_default$l<0 | 1>;
declare function pgWalfileNameOffset(a0: export_default$E<0 | 1>): Record$1<0 | 1, {
    file_name: export_default$l<0 | 1>;
    file_offset: export_default$10<0 | 1>;
}>;
declare function pgXactCommitTimestamp(a0: export_default$3<0 | 1>): export_default$h<0 | 1>;
declare function pgXactStatus(a0: export_default$2<0 | 1>): export_default$l<0 | 1>;
declare function phrasetoTsquery(a0: export_default$u<0 | 1>, a1: export_default$l<0 | 1>): export_default$d<0 | 1>;
declare function phrasetoTsquery(a0: export_default$l<0 | 1>): export_default$d<0 | 1>;
declare function pi(): export_default$14<0 | 1>;
declare function plaintoTsquery(a0: export_default$u<0 | 1>, a1: export_default$l<0 | 1>): export_default$d<0 | 1>;
declare function plaintoTsquery(a0: export_default$l<0 | 1>): export_default$d<0 | 1>;
declare function plpgsqlCallHandler(): export_default$S<0 | 1>;
declare function plpgsqlValidator(a0: export_default$I<0 | 1>): export_default$4<0 | 1>;
declare function point(a0: export_default$1f<0 | 1>): export_default$A<0 | 1>;
declare function point(a0: export_default$19<0 | 1>): export_default$A<0 | 1>;
declare function point(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$A<0 | 1>;
declare function point(a0: export_default$Q<0 | 1>): export_default$A<0 | 1>;
declare function point(a0: export_default$z<0 | 1>): export_default$A<0 | 1>;
declare function pointAbove(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pointAbove(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pointAdd(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
declare function pointBelow(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pointBelow(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pointDistance(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
declare function pointDiv(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
declare function pointEq(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pointHoriz(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pointLeft(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pointMul(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
declare function pointNe(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pointRight(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function pointSub(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$A<0 | 1>;
declare function pointVert(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function polyAbove(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polyBelow(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polyCenter(a0: export_default$z<0 | 1>): export_default$A<0 | 1>;
declare function polyContainPt(a0: export_default$z<0 | 1>, a1: export_default$A<0 | 1>): export_default$1g<0 | 1>;
declare function polyContained(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polyDistance(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$14<0 | 1>;
declare function polyLeft(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polyNpoints(a0: export_default$z<0 | 1>): export_default$10<0 | 1>;
declare function polyOverabove(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polyOverbelow(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polyOverlap(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polyOverleft(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polyOverright(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polyRight(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polySame(a0: export_default$z<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function polygon(a0: export_default$1f<0 | 1>): export_default$z<0 | 1>;
declare function polygon(a0: export_default$19<0 | 1>): export_default$z<0 | 1>;
declare function polygon(a0: export_default$10<0 | 1>, a1: export_default$19<0 | 1>): export_default$z<0 | 1>;
declare function polygon(a0: export_default$G<0 | 1>): export_default$z<0 | 1>;
declare function popen(a0: export_default$G<0 | 1>): export_default$G<0 | 1>;
declare function position(a0: export_default$1h<0 | 1>, a1: export_default$1h<0 | 1>): export_default$10<0 | 1>;
declare function position(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$10<0 | 1>;
declare function position(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function postgresqlFdwValidator(a0: Array$1<0 | 1, export_default$l<0 | 1>>, a1: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function pow(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function pow(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function power(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function power(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function ptContainedCircle(a0: export_default$A<0 | 1>, a1: export_default$19<0 | 1>): export_default$1g<0 | 1>;
declare function ptContainedPoly(a0: export_default$A<0 | 1>, a1: export_default$z<0 | 1>): export_default$1g<0 | 1>;
declare function queryToXml(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function queryToXmlAndXmlschema(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function queryToXmlschema(a0: export_default$l<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function querytree(a0: export_default$d<0 | 1>): export_default$l<0 | 1>;
declare function quoteIdent(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function quoteLiteral<T extends Any>(a0: T): export_default$l<0 | 1>;
declare function quoteLiteral(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function quoteNullable<T extends Any>(a0: T): export_default$l<0 | 1>;
declare function quoteNullable(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function radians(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function radius(a0: export_default$19<0 | 1>): export_default$14<0 | 1>;
declare function random(): export_default$14<0 | 1>;
declare function random(a0: export_default$10<0 | 1>, a1: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function random(a0: export_default$Z<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function random(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function randomNormal(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function rangeAdjacent<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeAdjacentMultirange<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeAfter<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeAfterMultirange<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeAgg<T extends Any>(a0: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
declare function rangeAgg<T extends Any>(a0: export_default$1i<number, T>): export_default$1k<0 | 1, T>;
declare function rangeBefore<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeBeforeMultirange<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeCmp<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$10<0 | 1>;
declare function rangeContainedBy<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeContainedByMultirange<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeContains<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeContainsElem<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: T): export_default$1g<0 | 1>;
declare function rangeContainsMultirange<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeEq<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeGe<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeGt<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeIntersect<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
declare function rangeIntersectAgg<T extends Any>(a0: export_default$1k<number, T>): export_default$1k<0 | 1, T>;
declare function rangeIntersectAgg<T extends Any>(a0: export_default$1i<number, T>): export_default$1i<0 | 1, T>;
declare function rangeIntersectAggTransfn<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
declare function rangeLe<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeLt<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeMerge<T extends Any>(a0: export_default$1k<0 | 1, T>): export_default$1i<0 | 1, T>;
declare function rangeMerge<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
declare function rangeMinus<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
declare function rangeNe<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeOverlaps<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeOverlapsMultirange<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeOverleft<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeOverleftMultirange<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeOverright<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeOverrightMultirange<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function rangeUnion<T extends Any>(a0: export_default$1i<0 | 1, T>, a1: export_default$1i<0 | 1, T>): export_default$1i<0 | 1, T>;
declare function rank(): export_default$Z<0 | 1>;
declare function rank(a0: Any<number>): export_default$Z<0 | 1>;
declare function recordEq<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordGe<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordGt<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordImageEq<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordImageGe<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordImageGt<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordImageLe<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordImageLt<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordImageNe<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordLe<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordLt<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function recordNe<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: Record$1<0 | 1, R>): export_default$1g<0 | 1>;
declare function regclass(a0: export_default$l<0 | 1>): export_default$w<0 | 1>;
declare function regexpCount(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function regexpCount(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function regexpCount(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function regexpInstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function regexpInstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function regexpInstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function regexpInstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function regexpInstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$10<0 | 1>, a5: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function regexpInstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$10<0 | 1>, a5: export_default$l<0 | 1>, a6: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function regexpLike(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function regexpLike(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function regexpMatch(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function regexpMatch(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function regexpMatches(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): Setof<{
    from: {};
}>;
declare function regexpMatches(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): Setof<{
    from: {};
}>;
declare function regexpReplace(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function regexpReplace(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function regexpReplace(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function regexpReplace(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$10<0 | 1>, a5: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function regexpReplace(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>, a3: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function regexpSplitToArray(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function regexpSplitToArray(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function regexpSplitToTable(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): Setof<{
    from: {};
}>;
declare function regexpSplitToTable(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): Setof<{
    from: {};
}>;
declare function regexpSubstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function regexpSubstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function regexpSubstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function regexpSubstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function regexpSubstr(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>, a3: export_default$10<0 | 1>, a4: export_default$l<0 | 1>, a5: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function regrAvgx(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function regrAvgy(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function regrCount(a0: export_default$14<number>, a1: export_default$14<number>): export_default$Z<0 | 1>;
declare function regrIntercept(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function regrR2(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function regrSlope(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function regrSxx(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function regrSxy(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function regrSyy(a0: export_default$14<number>, a1: export_default$14<number>): export_default$14<0 | 1>;
declare function repeat(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function replace(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function reverse(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function right(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function round(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function round(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function round(a0: export_default$L<0 | 1>, a1: export_default$10<0 | 1>): export_default$L<0 | 1>;
declare function rowNumber(): export_default$Z<0 | 1>;
declare function rowSecurityActive(a0: export_default$I<0 | 1>): export_default$1g<0 | 1>;
declare function rowSecurityActive(a0: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function rowToJson<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>): export_default$V<0 | 1>;
declare function rowToJson<R extends {
    [k in string]: Any<unknown, 0 | 1>;
}>(a0: Record$1<0 | 1, R>, a1: export_default$1g<0 | 1>): export_default$V<0 | 1>;
declare function rpad(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function rpad(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function rtrim(a0: export_default$1d<0 | 1>, a1: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
declare function rtrim(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function rtrim(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function satisfiesHashPartition(a0: export_default$I<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>, a3: Any<0 | 1>): export_default$1g<0 | 1>;
declare function scale(a0: export_default$L<0 | 1>): export_default$10<0 | 1>;
declare function schemaToXml(a0: export_default$M<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function schemaToXmlAndXmlschema(a0: export_default$M<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function schemaToXmlschema(a0: export_default$M<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function sessionUser(): export_default$M<0 | 1>;
declare function setBit(a0: export_default$1h<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): export_default$1h<0 | 1>;
declare function setBit(a0: export_default$1d<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function setByte(a0: export_default$1d<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function setConfig(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function setMasklen(a0: export_default$1a<0 | 1>, a1: export_default$10<0 | 1>): export_default$1a<0 | 1>;
declare function setMasklen(a0: export_default$13<0 | 1>, a1: export_default$10<0 | 1>): export_default$13<0 | 1>;
declare function setseed(a0: export_default$14<0 | 1>): export_default$4<0 | 1>;
declare function setval(a0: export_default$w<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function setval(a0: export_default$w<0 | 1>, a1: export_default$Z<0 | 1>, a2: export_default$1g<0 | 1>): export_default$Z<0 | 1>;
declare function setweight(a0: export_default$9<0 | 1>, a1: export_default$1c<0 | 1>): export_default$9<0 | 1>;
declare function setweight(a0: export_default$9<0 | 1>, a1: export_default$1c<0 | 1>, a2: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$9<0 | 1>;
declare function sha224(a0: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
declare function sha256(a0: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
declare function sha384(a0: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
declare function sha512(a0: export_default$1d<0 | 1>): export_default$1d<0 | 1>;
declare function shobjDescription(a0: export_default$I<0 | 1>, a1: export_default$M<0 | 1>): export_default$l<0 | 1>;
declare function sign(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function sign(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function similarEscape(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function similarToEscape(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function similarToEscape(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function sind(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function sinh(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function slope(a0: export_default$A<0 | 1>, a1: export_default$A<0 | 1>): export_default$14<0 | 1>;
declare function spgPolyQuadCompress(a0: export_default$z<0 | 1>): export_default$1f<0 | 1>;
declare function splitPart(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function sqrt(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function sqrt(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function startsWith(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function statementTimestamp(): export_default$h<0 | 1>;
declare function stddev(a0: export_default$15<number>): export_default$14<0 | 1>;
declare function stddev(a0: export_default$14<number>): export_default$14<0 | 1>;
declare function stddev(a0: export_default$12<number>): export_default$L<0 | 1>;
declare function stddev(a0: export_default$10<number>): export_default$L<0 | 1>;
declare function stddev(a0: export_default$Z<number>): export_default$L<0 | 1>;
declare function stddev(a0: export_default$L<number>): export_default$L<0 | 1>;
declare function stddevPop(a0: export_default$15<number>): export_default$14<0 | 1>;
declare function stddevPop(a0: export_default$14<number>): export_default$14<0 | 1>;
declare function stddevPop(a0: export_default$12<number>): export_default$L<0 | 1>;
declare function stddevPop(a0: export_default$10<number>): export_default$L<0 | 1>;
declare function stddevPop(a0: export_default$Z<number>): export_default$L<0 | 1>;
declare function stddevPop(a0: export_default$L<number>): export_default$L<0 | 1>;
declare function stddevSamp(a0: export_default$15<number>): export_default$14<0 | 1>;
declare function stddevSamp(a0: export_default$14<number>): export_default$14<0 | 1>;
declare function stddevSamp(a0: export_default$12<number>): export_default$L<0 | 1>;
declare function stddevSamp(a0: export_default$10<number>): export_default$L<0 | 1>;
declare function stddevSamp(a0: export_default$Z<number>): export_default$L<0 | 1>;
declare function stddevSamp(a0: export_default$L<number>): export_default$L<0 | 1>;
declare function stringAgg(a0: export_default$1d<number>, a1: export_default$1d<number>): export_default$1d<0 | 1>;
declare function stringAgg(a0: export_default$l<number>, a1: export_default$l<number>): export_default$l<0 | 1>;
declare function stringToArray(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function stringToArray(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function stringToTable(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): Setof<{
    from: {};
}>;
declare function stringToTable(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): Setof<{
    from: {};
}>;
declare function strip(a0: export_default$9<0 | 1>): export_default$9<0 | 1>;
declare function strpos(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function substr(a0: export_default$1d<0 | 1>, a1: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function substr(a0: export_default$1d<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function substr(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function substr(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function substring(a0: export_default$1h<0 | 1>, a1: export_default$10<0 | 1>): export_default$1h<0 | 1>;
declare function substring(a0: export_default$1h<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): export_default$1h<0 | 1>;
declare function substring(a0: export_default$1d<0 | 1>, a1: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function substring(a0: export_default$1d<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): export_default$1d<0 | 1>;
declare function substring(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function substring(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function substring(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function substring(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function sum(a0: export_default$15<number>): export_default$15<0 | 1>;
declare function sum(a0: export_default$14<number>): export_default$14<0 | 1>;
declare function sum(a0: export_default$12<number>): export_default$Z<0 | 1>;
declare function sum(a0: export_default$10<number>): export_default$Z<0 | 1>;
declare function sum(a0: export_default$W<number>): export_default$W<0 | 1>;
declare function sum(a0: export_default$N<number>): export_default$N<0 | 1>;
declare function sum(a0: export_default$Z<number>): export_default$L<0 | 1>;
declare function sum(a0: export_default$L<number>): export_default$L<0 | 1>;
declare function suppressRedundantUpdatesTrigger(): export_default$f<0 | 1>;
declare function systemUser(): export_default$l<0 | 1>;
declare function tableToXml(a0: export_default$w<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function tableToXmlAndXmlschema(a0: export_default$w<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function tableToXmlschema(a0: export_default$w<0 | 1>, a1: export_default$1g<0 | 1>, a2: export_default$1g<0 | 1>, a3: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function tan(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function tand(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function tanh(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function text(a0: export_default$1g<0 | 1>): export_default$l<0 | 1>;
declare function text(a0: export_default$1e<0 | 1>): export_default$l<0 | 1>;
declare function text(a0: export_default$1c<0 | 1>): export_default$l<0 | 1>;
declare function text(a0: export_default$13<0 | 1>): export_default$l<0 | 1>;
declare function text(a0: export_default$M<0 | 1>): export_default$l<0 | 1>;
declare function text(a0: export_default$1<0 | 1>): export_default$l<0 | 1>;
declare function textGe(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textGt(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textLarger(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function textLe(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textLt(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textPatternGe(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textPatternGt(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textPatternLe(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textPatternLt(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textSmaller(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function textanycat<T extends Any>(a0: export_default$l<0 | 1>, a1: T): export_default$l<0 | 1>;
declare function textcat(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function texteq(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function texteqname(a0: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function textgename(a0: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function textgtname(a0: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function texticlike(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function texticnlike(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function texticregexeq(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function texticregexne(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textlen(a0: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function textlename(a0: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function textlike(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textltname(a0: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function textne(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textnename(a0: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$1g<0 | 1>;
declare function textnlike(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textregexeq(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function textregexne(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function tideq(a0: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
declare function tidge(a0: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
declare function tidgt(a0: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
declare function tidlarger(a0: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$k<0 | 1>;
declare function tidle(a0: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
declare function tidlt(a0: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
declare function tidne(a0: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$1g<0 | 1>;
declare function tidsmaller(a0: export_default$k<0 | 1>, a1: export_default$k<0 | 1>): export_default$k<0 | 1>;
declare function time(a0: export_default$W<0 | 1>): export_default$j<0 | 1>;
declare function time(a0: export_default$j<0 | 1>, a1: export_default$10<0 | 1>): export_default$j<0 | 1>;
declare function time(a0: export_default$i<0 | 1>): export_default$j<0 | 1>;
declare function time(a0: export_default$h<0 | 1>): export_default$j<0 | 1>;
declare function time(a0: export_default$g<0 | 1>): export_default$j<0 | 1>;
declare function timeCmp(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$10<0 | 1>;
declare function timeEq(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
declare function timeGe(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
declare function timeGt(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
declare function timeHash(a0: export_default$j<0 | 1>): export_default$10<0 | 1>;
declare function timeHashExtended(a0: export_default$j<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function timeLarger(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$j<0 | 1>;
declare function timeLe(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
declare function timeLt(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
declare function timeMiInterval(a0: export_default$j<0 | 1>, a1: export_default$W<0 | 1>): export_default$j<0 | 1>;
declare function timeMiTime(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$W<0 | 1>;
declare function timeNe(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$1g<0 | 1>;
declare function timePlInterval(a0: export_default$j<0 | 1>, a1: export_default$W<0 | 1>): export_default$j<0 | 1>;
declare function timeSmaller(a0: export_default$j<0 | 1>, a1: export_default$j<0 | 1>): export_default$j<0 | 1>;
declare function timedatePl(a0: export_default$j<0 | 1>, a1: export_default$18<0 | 1>): export_default$i<0 | 1>;
declare function timeofday(): export_default$l<0 | 1>;
declare function timestamp(a0: export_default$18<0 | 1>): export_default$i<0 | 1>;
declare function timestamp(a0: export_default$18<0 | 1>, a1: export_default$j<0 | 1>): export_default$i<0 | 1>;
declare function timestamp(a0: export_default$i<0 | 1>, a1: export_default$10<0 | 1>): export_default$i<0 | 1>;
declare function timestamp(a0: export_default$h<0 | 1>): export_default$i<0 | 1>;
declare function timestampCmp(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$10<0 | 1>;
declare function timestampCmpDate(a0: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$10<0 | 1>;
declare function timestampCmpTimestamptz(a0: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$10<0 | 1>;
declare function timestampEq(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestampEqDate(a0: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestampEqTimestamptz(a0: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestampGe(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestampGeDate(a0: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestampGeTimestamptz(a0: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestampGt(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestampGtDate(a0: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestampGtTimestamptz(a0: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestampHash(a0: export_default$i<0 | 1>): export_default$10<0 | 1>;
declare function timestampHashExtended(a0: export_default$i<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function timestampLarger(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$i<0 | 1>;
declare function timestampLe(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestampLeDate(a0: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestampLeTimestamptz(a0: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestampLt(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestampLtDate(a0: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestampLtTimestamptz(a0: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestampMi(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$W<0 | 1>;
declare function timestampMiInterval(a0: export_default$i<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
declare function timestampNe(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestampNeDate(a0: export_default$i<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestampNeTimestamptz(a0: export_default$i<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestampPlInterval(a0: export_default$i<0 | 1>, a1: export_default$W<0 | 1>): export_default$i<0 | 1>;
declare function timestampSmaller(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$i<0 | 1>;
declare function timestamptz(a0: export_default$18<0 | 1>): export_default$h<0 | 1>;
declare function timestamptz(a0: export_default$18<0 | 1>, a1: export_default$j<0 | 1>): export_default$h<0 | 1>;
declare function timestamptz(a0: export_default$18<0 | 1>, a1: export_default$g<0 | 1>): export_default$h<0 | 1>;
declare function timestamptz(a0: export_default$i<0 | 1>): export_default$h<0 | 1>;
declare function timestamptz(a0: export_default$h<0 | 1>, a1: export_default$10<0 | 1>): export_default$h<0 | 1>;
declare function timestamptzCmp(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$10<0 | 1>;
declare function timestamptzCmpDate(a0: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$10<0 | 1>;
declare function timestamptzCmpTimestamp(a0: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$10<0 | 1>;
declare function timestamptzEq(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzEqDate(a0: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzEqTimestamp(a0: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzGe(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzGeDate(a0: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzGeTimestamp(a0: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzGt(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzGtDate(a0: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzGtTimestamp(a0: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzLarger(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$h<0 | 1>;
declare function timestamptzLe(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzLeDate(a0: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzLeTimestamp(a0: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzLt(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzLtDate(a0: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzLtTimestamp(a0: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzMi(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$W<0 | 1>;
declare function timestamptzMiInterval(a0: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
declare function timestamptzNe(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzNeDate(a0: export_default$h<0 | 1>, a1: export_default$18<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzNeTimestamp(a0: export_default$h<0 | 1>, a1: export_default$i<0 | 1>): export_default$1g<0 | 1>;
declare function timestamptzPlInterval(a0: export_default$h<0 | 1>, a1: export_default$W<0 | 1>): export_default$h<0 | 1>;
declare function timestamptzSmaller(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$h<0 | 1>;
declare function timetz(a0: export_default$j<0 | 1>): export_default$g<0 | 1>;
declare function timetz(a0: export_default$h<0 | 1>): export_default$g<0 | 1>;
declare function timetz(a0: export_default$g<0 | 1>, a1: export_default$10<0 | 1>): export_default$g<0 | 1>;
declare function timetzCmp(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$10<0 | 1>;
declare function timetzEq(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
declare function timetzGe(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
declare function timetzGt(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
declare function timetzHash(a0: export_default$g<0 | 1>): export_default$10<0 | 1>;
declare function timetzHashExtended(a0: export_default$g<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function timetzLarger(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
declare function timetzLe(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
declare function timetzLt(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
declare function timetzMiInterval(a0: export_default$g<0 | 1>, a1: export_default$W<0 | 1>): export_default$g<0 | 1>;
declare function timetzNe(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$1g<0 | 1>;
declare function timetzPlInterval(a0: export_default$g<0 | 1>, a1: export_default$W<0 | 1>): export_default$g<0 | 1>;
declare function timetzSmaller(a0: export_default$g<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
declare function timetzdatePl(a0: export_default$g<0 | 1>, a1: export_default$18<0 | 1>): export_default$h<0 | 1>;
declare function timezone(a0: export_default$W<0 | 1>, a1: export_default$h<0 | 1>): export_default$i<0 | 1>;
declare function timezone(a0: export_default$l<0 | 1>, a1: export_default$h<0 | 1>): export_default$i<0 | 1>;
declare function timezone(a0: export_default$h<0 | 1>): export_default$i<0 | 1>;
declare function timezone(a0: export_default$W<0 | 1>, a1: export_default$i<0 | 1>): export_default$h<0 | 1>;
declare function timezone(a0: export_default$l<0 | 1>, a1: export_default$i<0 | 1>): export_default$h<0 | 1>;
declare function timezone(a0: export_default$i<0 | 1>): export_default$h<0 | 1>;
declare function timezone(a0: export_default$W<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
declare function timezone(a0: export_default$l<0 | 1>, a1: export_default$g<0 | 1>): export_default$g<0 | 1>;
declare function timezone(a0: export_default$g<0 | 1>): export_default$g<0 | 1>;
declare function toAscii(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function toAscii(a0: export_default$l<0 | 1>, a1: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function toAscii(a0: export_default$l<0 | 1>, a1: export_default$M<0 | 1>): export_default$l<0 | 1>;
declare function toChar(a0: export_default$15<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function toChar(a0: export_default$14<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function toChar(a0: export_default$10<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function toChar(a0: export_default$Z<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function toChar(a0: export_default$W<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function toChar(a0: export_default$L<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function toChar(a0: export_default$i<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function toChar(a0: export_default$h<0 | 1>, a1: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function toDate(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$18<0 | 1>;
declare function toHex(a0: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function toHex(a0: export_default$Z<0 | 1>): export_default$l<0 | 1>;
declare function toJson<T extends Any>(a0: T): export_default$V<0 | 1>;
declare function toJsonb<T extends Any>(a0: T): export_default$U<0 | 1>;
declare function toNumber(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$L<0 | 1>;
declare function toOct(a0: export_default$10<0 | 1>): export_default$l<0 | 1>;
declare function toOct(a0: export_default$Z<0 | 1>): export_default$l<0 | 1>;
declare function toRegclass(a0: export_default$l<0 | 1>): export_default$w<0 | 1>;
declare function toRegcollation(a0: export_default$l<0 | 1>): export_default$v<0 | 1>;
declare function toRegnamespace(a0: export_default$l<0 | 1>): export_default$s<0 | 1>;
declare function toRegoper(a0: export_default$l<0 | 1>): export_default$r<0 | 1>;
declare function toRegoperator(a0: export_default$l<0 | 1>): export_default$q<0 | 1>;
declare function toRegproc(a0: export_default$l<0 | 1>): export_default$p<0 | 1>;
declare function toRegprocedure(a0: export_default$l<0 | 1>): export_default$o<0 | 1>;
declare function toRegrole(a0: export_default$l<0 | 1>): export_default$n<0 | 1>;
declare function toRegtype(a0: export_default$l<0 | 1>): export_default$m<0 | 1>;
declare function toRegtypemod(a0: export_default$l<0 | 1>): export_default$10<0 | 1>;
declare function toTimestamp(a0: export_default$14<0 | 1>): export_default$h<0 | 1>;
declare function toTimestamp(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$h<0 | 1>;
declare function toTsquery(a0: export_default$u<0 | 1>, a1: export_default$l<0 | 1>): export_default$d<0 | 1>;
declare function toTsquery(a0: export_default$l<0 | 1>): export_default$d<0 | 1>;
declare function toTsvector(a0: export_default$V<0 | 1>): export_default$9<0 | 1>;
declare function toTsvector(a0: export_default$U<0 | 1>): export_default$9<0 | 1>;
declare function toTsvector(a0: export_default$u<0 | 1>, a1: export_default$V<0 | 1>): export_default$9<0 | 1>;
declare function toTsvector(a0: export_default$u<0 | 1>, a1: export_default$U<0 | 1>): export_default$9<0 | 1>;
declare function toTsvector(a0: export_default$u<0 | 1>, a1: export_default$l<0 | 1>): export_default$9<0 | 1>;
declare function toTsvector(a0: export_default$l<0 | 1>): export_default$9<0 | 1>;
declare function transactionTimestamp(): export_default$h<0 | 1>;
declare function translate(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function trimArray<T extends Any>(a0: Array$1<0 | 1, T>, a1: export_default$10<0 | 1>): Array$1<0 | 1, T>;
declare function trimScale(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function trunc(a0: export_default$14<0 | 1>): export_default$14<0 | 1>;
declare function trunc(a0: export_default$P<0 | 1>): export_default$P<0 | 1>;
declare function trunc(a0: export_default$O<0 | 1>): export_default$O<0 | 1>;
declare function trunc(a0: export_default$L<0 | 1>): export_default$L<0 | 1>;
declare function trunc(a0: export_default$L<0 | 1>, a1: export_default$10<0 | 1>): export_default$L<0 | 1>;
declare function tsDebug(a0: export_default$u<0 | 1>, a1: export_default$l<0 | 1>): Setof<{
    from: {
        alias: export_default$l<0 | 1>;
        description: export_default$l<0 | 1>;
        token: export_default$l<0 | 1>;
        dictionaries: Array$1<0 | 1, export_default$t<0 | 1>>;
        dictionary: export_default$t<0 | 1>;
        lexemes: Array$1<0 | 1, export_default$l<0 | 1>>;
    };
}>;
declare function tsDebug(a0: export_default$l<0 | 1>): Setof<{
    from: {
        alias: export_default$l<0 | 1>;
        description: export_default$l<0 | 1>;
        token: export_default$l<0 | 1>;
        dictionaries: Array$1<0 | 1, export_default$t<0 | 1>>;
        dictionary: export_default$t<0 | 1>;
        lexemes: Array$1<0 | 1, export_default$l<0 | 1>>;
    };
}>;
declare function tsDelete(a0: export_default$9<0 | 1>, a1: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$9<0 | 1>;
declare function tsDelete(a0: export_default$9<0 | 1>, a1: export_default$l<0 | 1>): export_default$9<0 | 1>;
declare function tsFilter(a0: export_default$9<0 | 1>, a1: Array$1<0 | 1, export_default$1c<0 | 1>>): export_default$9<0 | 1>;
declare function tsHeadline(a0: export_default$V<0 | 1>, a1: export_default$d<0 | 1>): export_default$V<0 | 1>;
declare function tsHeadline(a0: export_default$V<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$l<0 | 1>): export_default$V<0 | 1>;
declare function tsHeadline(a0: export_default$u<0 | 1>, a1: export_default$V<0 | 1>, a2: export_default$d<0 | 1>): export_default$V<0 | 1>;
declare function tsHeadline(a0: export_default$u<0 | 1>, a1: export_default$V<0 | 1>, a2: export_default$d<0 | 1>, a3: export_default$l<0 | 1>): export_default$V<0 | 1>;
declare function tsHeadline(a0: export_default$U<0 | 1>, a1: export_default$d<0 | 1>): export_default$U<0 | 1>;
declare function tsHeadline(a0: export_default$U<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$l<0 | 1>): export_default$U<0 | 1>;
declare function tsHeadline(a0: export_default$u<0 | 1>, a1: export_default$U<0 | 1>, a2: export_default$d<0 | 1>): export_default$U<0 | 1>;
declare function tsHeadline(a0: export_default$u<0 | 1>, a1: export_default$U<0 | 1>, a2: export_default$d<0 | 1>, a3: export_default$l<0 | 1>): export_default$U<0 | 1>;
declare function tsHeadline(a0: export_default$u<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$d<0 | 1>): export_default$l<0 | 1>;
declare function tsHeadline(a0: export_default$u<0 | 1>, a1: export_default$l<0 | 1>, a2: export_default$d<0 | 1>, a3: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function tsHeadline(a0: export_default$l<0 | 1>, a1: export_default$d<0 | 1>): export_default$l<0 | 1>;
declare function tsHeadline(a0: export_default$l<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function tsLexize(a0: export_default$t<0 | 1>, a1: export_default$l<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function tsMatchQv(a0: export_default$d<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
declare function tsMatchQv(a0: export_default$d<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
declare function tsMatchTq(a0: export_default$l<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsMatchTt(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function tsMatchVq(a0: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsMatchVq(a0: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsParse(a0: export_default$I<0 | 1>, a1: export_default$l<0 | 1>): Setof<{
    from: {
        tokid: export_default$10<0 | 1>;
        token: export_default$l<0 | 1>;
    };
}>;
declare function tsParse(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): Setof<{
    from: {
        tokid: export_default$10<0 | 1>;
        token: export_default$l<0 | 1>;
    };
}>;
declare function tsRank(a0: Array$1<0 | 1, export_default$15<0 | 1>>, a1: export_default$9<0 | 1>, a2: export_default$d<0 | 1>): export_default$15<0 | 1>;
declare function tsRank(a0: Array$1<0 | 1, export_default$15<0 | 1>>, a1: export_default$9<0 | 1>, a2: export_default$d<0 | 1>, a3: export_default$10<0 | 1>): export_default$15<0 | 1>;
declare function tsRank(a0: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$15<0 | 1>;
declare function tsRank(a0: export_default$9<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$10<0 | 1>): export_default$15<0 | 1>;
declare function tsRankCd(a0: Array$1<0 | 1, export_default$15<0 | 1>>, a1: export_default$9<0 | 1>, a2: export_default$d<0 | 1>): export_default$15<0 | 1>;
declare function tsRankCd(a0: Array$1<0 | 1, export_default$15<0 | 1>>, a1: export_default$9<0 | 1>, a2: export_default$d<0 | 1>, a3: export_default$10<0 | 1>): export_default$15<0 | 1>;
declare function tsRankCd(a0: export_default$9<0 | 1>, a1: export_default$d<0 | 1>): export_default$15<0 | 1>;
declare function tsRankCd(a0: export_default$9<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$10<0 | 1>): export_default$15<0 | 1>;
declare function tsRewrite(a0: export_default$d<0 | 1>, a1: export_default$l<0 | 1>): export_default$d<0 | 1>;
declare function tsRewrite(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$d<0 | 1>): export_default$d<0 | 1>;
declare function tsStat(a0: export_default$l<0 | 1>): Setof<{
    from: {
        word: export_default$l<0 | 1>;
        ndoc: export_default$10<0 | 1>;
        nentry: export_default$10<0 | 1>;
    };
}>;
declare function tsStat(a0: export_default$l<0 | 1>, a1: export_default$l<0 | 1>): Setof<{
    from: {
        word: export_default$l<0 | 1>;
        ndoc: export_default$10<0 | 1>;
        nentry: export_default$10<0 | 1>;
    };
}>;
declare function tsTokenType(a0: export_default$I<0 | 1>): Setof<{
    from: {
        tokid: export_default$10<0 | 1>;
        alias: export_default$l<0 | 1>;
        description: export_default$l<0 | 1>;
    };
}>;
declare function tsTokenType(a0: export_default$l<0 | 1>): Setof<{
    from: {
        tokid: export_default$10<0 | 1>;
        alias: export_default$l<0 | 1>;
        description: export_default$l<0 | 1>;
    };
}>;
declare function tsmultirange(): export_default$e<0 | 1>;
declare function tsmultirange(a0: Array$1<0 | 1, export_default$c<0 | 1>>): export_default$e<0 | 1>;
declare function tsmultirange(a0: export_default$c<0 | 1>): export_default$e<0 | 1>;
declare function tsqMcontained(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsqMcontains(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsqueryAnd(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$d<0 | 1>;
declare function tsqueryCmp(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$10<0 | 1>;
declare function tsqueryEq(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsqueryGe(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsqueryGt(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsqueryLe(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsqueryLt(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsqueryNe(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$1g<0 | 1>;
declare function tsqueryNot(a0: export_default$d<0 | 1>): export_default$d<0 | 1>;
declare function tsqueryOr(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$d<0 | 1>;
declare function tsqueryPhrase(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>): export_default$d<0 | 1>;
declare function tsqueryPhrase(a0: export_default$d<0 | 1>, a1: export_default$d<0 | 1>, a2: export_default$10<0 | 1>): export_default$d<0 | 1>;
declare function tsrange(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$c<0 | 1>;
declare function tsrange(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>, a2: export_default$l<0 | 1>): export_default$c<0 | 1>;
declare function tsrangeSubdiff(a0: export_default$i<0 | 1>, a1: export_default$i<0 | 1>): export_default$14<0 | 1>;
declare function tstzmultirange(): export_default$b<0 | 1>;
declare function tstzmultirange(a0: Array$1<0 | 1, export_default$a<0 | 1>>): export_default$b<0 | 1>;
declare function tstzmultirange(a0: export_default$a<0 | 1>): export_default$b<0 | 1>;
declare function tstzrange(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$a<0 | 1>;
declare function tstzrange(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>, a2: export_default$l<0 | 1>): export_default$a<0 | 1>;
declare function tstzrangeSubdiff(a0: export_default$h<0 | 1>, a1: export_default$h<0 | 1>): export_default$14<0 | 1>;
declare function tsvectorCmp(a0: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$10<0 | 1>;
declare function tsvectorConcat(a0: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$9<0 | 1>;
declare function tsvectorEq(a0: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
declare function tsvectorGe(a0: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
declare function tsvectorGt(a0: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
declare function tsvectorLe(a0: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
declare function tsvectorLt(a0: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
declare function tsvectorNe(a0: export_default$9<0 | 1>, a1: export_default$9<0 | 1>): export_default$1g<0 | 1>;
declare function tsvectorToArray(a0: export_default$9<0 | 1>): Array$1<0 | 1, export_default$l<0 | 1>>;
declare function tsvectorUpdateTrigger(): export_default$f<0 | 1>;
declare function tsvectorUpdateTriggerColumn(): export_default$f<0 | 1>;
declare function txidCurrent(): export_default$Z<0 | 1>;
declare function txidCurrentIfAssigned(): export_default$Z<0 | 1>;
declare function txidCurrentSnapshot(): export_default$8<0 | 1>;
declare function txidSnapshotXip(a0: export_default$8<0 | 1>): Setof<{
    from: {};
}>;
declare function txidSnapshotXmax(a0: export_default$8<0 | 1>): export_default$Z<0 | 1>;
declare function txidStatus(a0: export_default$Z<0 | 1>): export_default$l<0 | 1>;
declare function txidVisibleInSnapshot(a0: export_default$Z<0 | 1>, a1: export_default$8<0 | 1>): export_default$1g<0 | 1>;
declare function unicodeAssigned(a0: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function unicodeVersion(): export_default$l<0 | 1>;
declare function uniqueKeyRecheck(): export_default$f<0 | 1>;
declare function unistr(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function unnest<T extends Any>(a0: Array$1<0 | 1, T>): Setof<{
    from: {};
}>;
declare function unnest<T extends Any>(a0: export_default$1k<0 | 1, T>): Setof<{
    from: {};
}>;
declare function unnest(a0: export_default$9<0 | 1>): Setof<{
    from: {
        lexeme: export_default$l<0 | 1>;
        positions: Array$1<0 | 1, export_default$12<0 | 1>>;
        weights: Array$1<0 | 1, export_default$l<0 | 1>>;
    };
}>;
declare function upper<T extends Any>(a0: export_default$1k<0 | 1, T>): T;
declare function upper<T extends Any>(a0: export_default$1i<0 | 1, T>): T;
declare function upper(a0: export_default$l<0 | 1>): export_default$l<0 | 1>;
declare function upperInc<T extends Any>(a0: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function upperInc<T extends Any>(a0: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function upperInf<T extends Any>(a0: export_default$1k<0 | 1, T>): export_default$1g<0 | 1>;
declare function upperInf<T extends Any>(a0: export_default$1i<0 | 1, T>): export_default$1g<0 | 1>;
declare function uuidCmp(a0: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$10<0 | 1>;
declare function uuidEq(a0: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
declare function uuidExtractTimestamp(a0: export_default$7<0 | 1>): export_default$h<0 | 1>;
declare function uuidExtractVersion(a0: export_default$7<0 | 1>): export_default$12<0 | 1>;
declare function uuidGe(a0: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
declare function uuidGt(a0: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
declare function uuidHash(a0: export_default$7<0 | 1>): export_default$10<0 | 1>;
declare function uuidHashExtended(a0: export_default$7<0 | 1>, a1: export_default$Z<0 | 1>): export_default$Z<0 | 1>;
declare function uuidLe(a0: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
declare function uuidLt(a0: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
declare function uuidNe(a0: export_default$7<0 | 1>, a1: export_default$7<0 | 1>): export_default$1g<0 | 1>;
declare function varPop(a0: export_default$15<number>): export_default$14<0 | 1>;
declare function varPop(a0: export_default$14<number>): export_default$14<0 | 1>;
declare function varPop(a0: export_default$12<number>): export_default$L<0 | 1>;
declare function varPop(a0: export_default$10<number>): export_default$L<0 | 1>;
declare function varPop(a0: export_default$Z<number>): export_default$L<0 | 1>;
declare function varPop(a0: export_default$L<number>): export_default$L<0 | 1>;
declare function varSamp(a0: export_default$15<number>): export_default$14<0 | 1>;
declare function varSamp(a0: export_default$14<number>): export_default$14<0 | 1>;
declare function varSamp(a0: export_default$12<number>): export_default$L<0 | 1>;
declare function varSamp(a0: export_default$10<number>): export_default$L<0 | 1>;
declare function varSamp(a0: export_default$Z<number>): export_default$L<0 | 1>;
declare function varSamp(a0: export_default$L<number>): export_default$L<0 | 1>;
declare function varbit(a0: export_default$6<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$1g<0 | 1>): export_default$6<0 | 1>;
declare function varbitcmp(a0: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$10<0 | 1>;
declare function varbiteq(a0: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
declare function varbitge(a0: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
declare function varbitgt(a0: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
declare function varbitle(a0: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
declare function varbitlt(a0: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
declare function varbitne(a0: export_default$6<0 | 1>, a1: export_default$6<0 | 1>): export_default$1g<0 | 1>;
declare function varchar(a0: export_default$M<0 | 1>): export_default$5<0 | 1>;
declare function varchar(a0: export_default$5<0 | 1>, a1: export_default$10<0 | 1>, a2: export_default$1g<0 | 1>): export_default$5<0 | 1>;
declare function variance(a0: export_default$15<number>): export_default$14<0 | 1>;
declare function variance(a0: export_default$14<number>): export_default$14<0 | 1>;
declare function variance(a0: export_default$12<number>): export_default$L<0 | 1>;
declare function variance(a0: export_default$10<number>): export_default$L<0 | 1>;
declare function variance(a0: export_default$Z<number>): export_default$L<0 | 1>;
declare function variance(a0: export_default$L<number>): export_default$L<0 | 1>;
declare function version(): export_default$l<0 | 1>;
declare function websearchToTsquery(a0: export_default$u<0 | 1>, a1: export_default$l<0 | 1>): export_default$d<0 | 1>;
declare function websearchToTsquery(a0: export_default$l<0 | 1>): export_default$d<0 | 1>;
declare function width(a0: export_default$1f<0 | 1>): export_default$14<0 | 1>;
declare function widthBucket<T extends Any>(a0: T, a1: Array$1<0 | 1, T>): export_default$10<0 | 1>;
declare function widthBucket(a0: export_default$14<0 | 1>, a1: export_default$14<0 | 1>, a2: export_default$14<0 | 1>, a3: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function widthBucket(a0: export_default$L<0 | 1>, a1: export_default$L<0 | 1>, a2: export_default$L<0 | 1>, a3: export_default$10<0 | 1>): export_default$10<0 | 1>;
declare function xid(a0: export_default$2<0 | 1>): export_default$3<0 | 1>;
declare function xid8Larger(a0: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$2<0 | 1>;
declare function xid8Smaller(a0: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$2<0 | 1>;
declare function xid8Cmp(a0: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$10<0 | 1>;
declare function xid8Eq(a0: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
declare function xid8Ge(a0: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
declare function xid8Gt(a0: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
declare function xid8Le(a0: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
declare function xid8Lt(a0: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
declare function xid8Ne(a0: export_default$2<0 | 1>, a1: export_default$2<0 | 1>): export_default$1g<0 | 1>;
declare function xideq(a0: export_default$3<0 | 1>, a1: export_default$3<0 | 1>): export_default$1g<0 | 1>;
declare function xideqint4(a0: export_default$3<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function xidneq(a0: export_default$3<0 | 1>, a1: export_default$3<0 | 1>): export_default$1g<0 | 1>;
declare function xidneqint4(a0: export_default$3<0 | 1>, a1: export_default$10<0 | 1>): export_default$1g<0 | 1>;
declare function xml(a0: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function xmlIsWellFormed(a0: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function xmlIsWellFormedContent(a0: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function xmlIsWellFormedDocument(a0: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function xmlagg(a0: export_default$1<number>): export_default$1<0 | 1>;
declare function xmlcomment(a0: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function xmlconcat2(a0: export_default$1<0 | 1>, a1: export_default$1<0 | 1>): export_default$1<0 | 1>;
declare function xmlexists(a0: export_default$l<0 | 1>, a1: export_default$1<0 | 1>): export_default$1g<0 | 1>;
declare function xmltext(a0: export_default$l<0 | 1>): export_default$1<0 | 1>;
declare function xmlvalidate(a0: export_default$1<0 | 1>, a1: export_default$l<0 | 1>): export_default$1g<0 | 1>;
declare function xpath(a0: export_default$l<0 | 1>, a1: export_default$1<0 | 1>): Array$1<0 | 1, export_default$1<0 | 1>>;
declare function xpath(a0: export_default$l<0 | 1>, a1: export_default$1<0 | 1>, a2: Array$1<0 | 1, export_default$l<0 | 1>>): Array$1<0 | 1, export_default$1<0 | 1>>;
declare function xpathExists(a0: export_default$l<0 | 1>, a1: export_default$1<0 | 1>): export_default$1g<0 | 1>;
declare function xpathExists(a0: export_default$l<0 | 1>, a1: export_default$1<0 | 1>, a2: Array$1<0 | 1, export_default$l<0 | 1>>): export_default$1g<0 | 1>;

export { export_default$1m as Aclitem, Any, export_default$1l as Anyenum, export_default$1k as Anymultirange, export_default$1j as Anynonarray, export_default$1i as Anyrange, Array$1 as Array, BinaryOperatorExpression, export_default$1h as Bit, export_default$1g as Bool, export_default$1f as Box, export_default$1e as Bpchar, export_default$1d as Bytea, export_default$1c as Char, export_default$1b as Cid, export_default$1a as Cidr, export_default$19 as Circle, ColumnAliasExpression, Context, export_default$18 as Date, export_default$17 as Datemultirange, export_default$16 as Daterange, Expression, export_default$15 as Float4, export_default$14 as Float8, FunctionExpression, Generated, export_default$13 as Inet, export_default$12 as Int2, export_default$11 as Int2Vector, export_default$10 as Int4, export_default$$ as Int4Multirange, export_default$_ as Int4Range, export_default$Z as Int8, export_default$Y as Int8Multirange, export_default$X as Int8Range, export_default$W as Interval, export_default$V as Json, export_default$U as Jsonb, export_default$T as Jsonpath, export_default$S as LanguageHandler, export_default$R as Line, LiteralExpression, LiteralUnknownExpression, export_default$Q as Lseg, export_default$P as Macaddr, export_default$O as Macaddr8, export_default$N as Money, export_default$M as Name, export_default$L as Numeric, export_default$K as Nummultirange, export_default$J as Numrange, export_default$I as Oid, export_default$H as Oidvector, export_default$G as Path, export_default$F as PgDdlCommand, export_default$E as PgLsn, export_default$D as PgMcvList, export_default$C as PgNodeTree, export_default$B as PgSnapshot, export_default$A as Point, export_default$z as Polygon, QueryAlias, RawTableReferenceExpression, Record$1 as Record, export_default$x as Refcursor, export_default$w as Regclass, export_default$v as Regcollation, export_default$u as Regconfig, export_default$t as Regdictionary, export_default$s as Regnamespace, export_default$r as Regoper, export_default$q as Regoperator, export_default$p as Regproc, export_default$o as Regprocedure, export_default$n as Regrole, export_default$m as Regtype, SelectableExpression, SelectableFunctionExpression, Setof, SubqueryExpression, TableReferenceExpression, export_default$l as Text, export_default$k as Tid, export_default$j as Time, export_default$i as Timestamp, export_default$h as Timestamptz, export_default$g as Timetz, export_default$f as Trigger, export_default$e as Tsmultirange, export_default$d as Tsquery, export_default$c as Tsrange, export_default$b as Tstzmultirange, export_default$a as Tstzrange, export_default$9 as Tsvector, export_default$8 as TxidSnapshot, export_default$7 as Uuid, ValuesExpression, export_default$6 as Varbit, export_default$5 as Varchar, export_default$4 as Void, export_default$3 as Xid, export_default$2 as Xid8, export_default$1 as Xml, abbrev, abs, aclcontains, acldefault, aclexplode, aclinsert, aclitemeq, aclremove, acos, acosd, acosh, age, aliasRowLike, aliasScalar, amvalidate, anyValue, anyValueTransfn, anytextcat, area, arrayAgg, arrayAppend, arrayCat, arrayDims, arrayEq, arrayFill, arrayGe, arrayGt, arrayLarger, arrayLe, arrayLength, arrayLower, arrayLt, arrayNdims, arrayNe, arrayPosition, arrayPositions, arrayPrepend, arrayRemove, arrayReplace, arraySample, arrayShuffle, arraySmaller, arrayToJson, arrayToString, arrayToTsvector, arrayUpper, arraycontained, arraycontains, arrayoverlap, ascii, asind, asinh, atan, atan2, atan2D, atand, atanh, avg, binaryUpgradeAddSubRelState, binaryUpgradeCreateEmptyExtension, binaryUpgradeLogicalSlotHasCaughtUp, binaryUpgradeReploriginAdvance, binaryUpgradeSetMissingValue, binaryUpgradeSetNextArrayPgTypeOid, binaryUpgradeSetNextHeapPgClassOid, binaryUpgradeSetNextHeapRelfilenode, binaryUpgradeSetNextIndexPgClassOid, binaryUpgradeSetNextIndexRelfilenode, binaryUpgradeSetNextMultirangeArrayPgTypeOid, binaryUpgradeSetNextMultirangePgTypeOid, binaryUpgradeSetNextPgAuthidOid, binaryUpgradeSetNextPgEnumOid, binaryUpgradeSetNextPgTablespaceOid, binaryUpgradeSetNextPgTypeOid, binaryUpgradeSetNextToastPgClassOid, binaryUpgradeSetNextToastRelfilenode, binaryUpgradeSetRecordInitPrivs, bit, bitAnd, bitCount, bitLength, bitOr, bitXor, bitand, bitcat, bitcmp, biteq, bitge, bitgt, bitle, bitlt, bitne, bitnot, bitor, bitshiftleft, bitshiftright, bitxor, bool, boolAnd, boolOr, boolandStatefunc, booleq, boolge, boolgt, boolle, boollt, boolne, boolorStatefunc, boundBox, box, boxAbove, boxAboveEq, boxAdd, boxBelow, boxBelowEq, boxCenter, boxContainPt, boxContained, boxDistance, boxDiv, boxEq, boxGe, boxGt, boxIntersect, boxLe, boxLeft, boxLt, boxMul, boxOverabove, boxOverbelow, boxOverlap, boxOverleft, boxOverright, boxRight, boxSame, boxSub, bpchar, bpcharLarger, bpcharPatternGe, bpcharPatternGt, bpcharPatternLe, bpcharPatternLt, bpcharSmaller, bpcharcmp, bpchareq, bpcharge, bpchargt, bpchariclike, bpcharicnlike, bpcharicregexeq, bpcharicregexne, bpcharle, bpcharlike, bpcharlt, bpcharne, bpcharnlike, bpcharregexeq, bpcharregexne, brinDesummarizeRange, brinSummarizeNewValues, brinSummarizeRange, broadcast, btarraycmp, btboolcmp, btbpcharPatternCmp, btcharcmp, btequalimage, btfloat48Cmp, btfloat4Cmp, btfloat84Cmp, btfloat8Cmp, btint24Cmp, btint28Cmp, btint2Cmp, btint42Cmp, btint48Cmp, btint4Cmp, btint82Cmp, btint84Cmp, btint8Cmp, btnamecmp, btnametextcmp, btoidcmp, btoidvectorcmp, btrecordcmp, btrecordimagecmp, btrim, bttextPatternCmp, bttextcmp, bttextnamecmp, bttidcmp, btvarstrequalimage, byteacat, byteacmp, byteaeq, byteage, byteagt, byteale, bytealike, bytealt, byteane, byteanlike, cardinality, cashCmp, cashDivCash, cashDivFlt4, cashDivFlt8, cashDivInt2, cashDivInt4, cashDivInt8, cashEq, cashGe, cashGt, cashLe, cashLt, cashMi, cashMulFlt4, cashMulFlt8, cashMulInt2, cashMulInt4, cashMulInt8, cashNe, cashPl, cashWords, cashlarger, cashsmaller, cbrt, ceil, ceiling, center, char, charLength, characterLength, chareq, charge, chargt, charle, charlt, charne, chr, cideq, cidr, circle, circleAbove, circleAddPt, circleBelow, circleCenter, circleContainPt, circleContained, circleDistance, circleDivPt, circleEq, circleGe, circleGt, circleLe, circleLeft, circleLt, circleMulPt, circleNe, circleOverabove, circleOverbelow, circleOverlap, circleOverleft, circleOverright, circleRight, circleSame, circleSubPt, clockTimestamp, closeLs, closeLseg, closePb, closePl, closePs, closeSb, colDescription, concat, concatWs, convert, convertFrom, convertTo, corr, cos, cosd, cosh, cot, cotd, count, covarPop, covarSamp, cumeDist, currentDatabase, currentQuery, currentSchema, currentSchemas, currentSetting, currentUser, currtid2, currval, cursorToXml, cursorToXmlschema, database, databaseToXml, databaseToXmlAndXmlschema, databaseToXmlschema, date, dateAdd, dateCmp, dateCmpTimestamp, dateCmpTimestamptz, dateEq, dateEqTimestamp, dateEqTimestamptz, dateGe, dateGeTimestamp, dateGeTimestamptz, dateGt, dateGtTimestamp, dateGtTimestamptz, dateLarger, dateLe, dateLeTimestamp, dateLeTimestamptz, dateLt, dateLtTimestamp, dateLtTimestamptz, dateMi, dateMiInterval, dateMii, dateNe, dateNeTimestamp, dateNeTimestamptz, datePart, datePlInterval, datePli, dateSmaller, dateSubtract, dateTrunc, datemultirange, daterange, daterangeCanonical, daterangeSubdiff, datetimePl, datetimetzPl, db, dcbrt, decode, degrees, denseRank, dexp, diagonal, diameter, distBp, distBs, distCpoint, distCpoly, distLp, distLs, distPathp, distPb, distPc, distPl, distPolyc, distPolyp, distPpath, distPpoly, distPs, distSb, distSl, distSp, div, dlog1, dlog10, dpow, dround, dsqrt, dtrunc, elemContainedByMultirange, elemContainedByRange, encode, enumCmp, enumEq, enumFirst, enumGe, enumGt, enumLarger, enumLast, enumLe, enumLt, enumNe, enumRange, enumSmaller, erf, erfc, every, exp, extract, factorial, family, firstValue, float4, float48Div, float48Eq, float48Ge, float48Gt, float48Le, float48Lt, float48Mi, float48Mul, float48Ne, float48Pl, float4Abs, float4Accum, float4Div, float4Eq, float4Ge, float4Gt, float4Larger, float4Le, float4Lt, float4Mi, float4Mul, float4Ne, float4Pl, float4Smaller, float4Um, float4Up, float8, float84Div, float84Eq, float84Ge, float84Gt, float84Le, float84Lt, float84Mi, float84Mul, float84Ne, float84Pl, float8Abs, float8Accum, float8Avg, float8Combine, float8Corr, float8CovarPop, float8CovarSamp, float8Div, float8Eq, float8Ge, float8Gt, float8Larger, float8Le, float8Lt, float8Mi, float8Mul, float8Ne, float8Pl, float8RegrAccum, float8RegrAvgx, float8RegrAvgy, float8RegrCombine, float8RegrIntercept, float8RegrR2, float8RegrSlope, float8RegrSxx, float8RegrSxy, float8RegrSyy, float8Smaller, float8StddevPop, float8StddevSamp, float8Um, float8Up, float8VarPop, float8VarSamp, floor, flt4MulCash, flt8MulCash, fmgrCValidator, fmgrInternalValidator, fmgrSqlValidator, format, formatType, gcd, genRandomUuid, generateSeries, generateSubscripts, getBit, getByte, getCurrentTsConfig, getdatabaseencoding, getpgusername, ginCleanPendingList, ginCmpTslexeme, ginCompareJsonb, hasAnyColumnPrivilege, hasColumnPrivilege, hasDatabasePrivilege, hasForeignDataWrapperPrivilege, hasFunctionPrivilege, hasLanguagePrivilege, hasParameterPrivilege, hasSchemaPrivilege, hasSequencePrivilege, hasServerPrivilege, hasTablePrivilege, hasTablespacePrivilege, hasTypePrivilege, hashAclitem, hashAclitemExtended, hashArray, hashArrayExtended, hashMultirange, hashMultirangeExtended, hashNumeric, hashNumericExtended, hashRange, hashRangeExtended, hashRecord, hashRecordExtended, hashbpchar, hashbpcharextended, hashchar, hashcharextended, hashenum, hashenumextended, hashfloat4, hashfloat4Extended, hashfloat8, hashfloat8Extended, hashinet, hashinetextended, hashint2, hashint2Extended, hashint4, hashint4Extended, hashint8, hashint8Extended, hashmacaddr, hashmacaddr8, hashmacaddr8Extended, hashmacaddrextended, hashname, hashnameextended, hashoid, hashoidextended, hashoidvector, hashoidvectorextended, hashtext, hashtextextended, hashtid, hashtidextended, height, host, hostmask, icuUnicodeVersion, inRange, inetClientAddr, inetClientPort, inetMerge, inetSameFamily, inetServerAddr, inetServerPort, inetand, inetmi, inetmiInt8, inetnot, inetor, inetpl, initcap, int2, int24Div, int24Eq, int24Ge, int24Gt, int24Le, int24Lt, int24Mi, int24Mul, int24Ne, int24Pl, int28Div, int28Eq, int28Ge, int28Gt, int28Le, int28Lt, int28Mi, int28Mul, int28Ne, int28Pl, int2Abs, int2And, int2AvgAccum, int2AvgAccumInv, int2Div, int2Eq, int2Ge, int2Gt, int2Int4Sum, int2Larger, int2Le, int2Lt, int2Mi, int2Mod, int2Mul, int2MulCash, int2Ne, int2Not, int2Or, int2Pl, int2Shl, int2Shr, int2Smaller, int2Sum, int2Um, int2Up, int2Xor, int4, int42Div, int42Eq, int42Ge, int42Gt, int42Le, int42Lt, int42Mi, int42Mul, int42Ne, int42Pl, int48Div, int48Eq, int48Ge, int48Gt, int48Le, int48Lt, int48Mi, int48Mul, int48Ne, int48Pl, int4Abs, int4And, int4AvgAccum, int4AvgAccumInv, int4AvgCombine, int4Div, int4Eq, int4Ge, int4Gt, int4Inc, int4Larger, int4Le, int4Lt, int4Mi, int4Mod, int4Mul, int4MulCash, int4Multirange, int4Ne, int4Not, int4Or, int4Pl, int4Range, int4RangeCanonical, int4RangeSubdiff, int4Shl, int4Shr, int4Smaller, int4Sum, int4Um, int4Up, int4Xor, int8, int82Div, int82Eq, int82Ge, int82Gt, int82Le, int82Lt, int82Mi, int82Mul, int82Ne, int82Pl, int84Div, int84Eq, int84Ge, int84Gt, int84Le, int84Lt, int84Mi, int84Mul, int84Ne, int84Pl, int8Abs, int8And, int8Avg, int8Dec, int8DecAny, int8Div, int8Eq, int8Ge, int8Gt, int8Inc, int8IncAny, int8IncFloat8Float8, int8Larger, int8Le, int8Lt, int8Mi, int8Mod, int8Mul, int8MulCash, int8Multirange, int8Ne, int8Not, int8Or, int8Pl, int8PlInet, int8Range, int8RangeCanonical, int8RangeSubdiff, int8Shl, int8Shr, int8Smaller, int8Sum, int8Um, int8Up, int8Xor, integerPlDate, interLb, interSb, interSl, interval, intervalCmp, intervalDiv, intervalEq, intervalGe, intervalGt, intervalHash, intervalHashExtended, intervalLarger, intervalLe, intervalLt, intervalMi, intervalMul, intervalNe, intervalPl, intervalPlDate, intervalPlTime, intervalPlTimestamp, intervalPlTimestamptz, intervalPlTimetz, intervalSmaller, intervalUm, isNormalized, isScalar, isScalarRelaxed, isclosed, isempty, isfinite, ishorizontal, isopen, isparallel, isperp, isvertical, jsonAgg, jsonAggStrict, jsonArrayElement, jsonArrayElementText, jsonArrayElements, jsonArrayElementsText, jsonArrayLength, jsonBuildArray, jsonBuildObject, jsonEach, jsonEachText, jsonExtractPath, jsonExtractPathText, jsonObject, jsonObjectAgg, jsonObjectAggStrict, jsonObjectAggUnique, jsonObjectAggUniqueStrict, jsonObjectField, jsonObjectFieldText, jsonObjectKeys, jsonPopulateRecord, jsonPopulateRecordset, jsonStripNulls, jsonToRecord, jsonToRecordset, jsonToTsvector, jsonTypeof, jsonbAgg, jsonbAggStrict, jsonbArrayElement, jsonbArrayElementText, jsonbArrayElements, jsonbArrayElementsText, jsonbArrayLength, jsonbBuildArray, jsonbBuildObject, jsonbCmp, jsonbConcat, jsonbContained, jsonbContains, jsonbDelete, jsonbDeletePath, jsonbEach, jsonbEachText, jsonbEq, jsonbExists, jsonbExistsAll, jsonbExistsAny, jsonbExtractPath, jsonbExtractPathText, jsonbGe, jsonbGt, jsonbHash, jsonbHashExtended, jsonbInsert, jsonbLe, jsonbLt, jsonbNe, jsonbObject, jsonbObjectAgg, jsonbObjectAggStrict, jsonbObjectAggUnique, jsonbObjectAggUniqueStrict, jsonbObjectField, jsonbObjectFieldText, jsonbObjectKeys, jsonbPathExists, jsonbPathExistsOpr, jsonbPathExistsTz, jsonbPathMatch, jsonbPathMatchOpr, jsonbPathMatchTz, jsonbPathQuery, jsonbPathQueryArray, jsonbPathQueryArrayTz, jsonbPathQueryFirst, jsonbPathQueryFirstTz, jsonbPathQueryTz, jsonbPopulateRecord, jsonbPopulateRecordValid, jsonbPopulateRecordset, jsonbPretty, jsonbSet, jsonbSetLax, jsonbStripNulls, jsonbToRecord, jsonbToRecordset, jsonbToTsvector, jsonbTypeof, justifyDays, justifyHours, justifyInterval, lag, lastValue, lastval, lcm, lead, left, length, like, likeEscape, line, lineDistance, lineEq, lineHorizontal, lineInterpt, lineIntersect, lineParallel, linePerp, lineVertical, ln, loClose, loCreat, loCreate, loExport, loFromBytea, loGet, loImport, loLseek, loLseek64, loOpen, loPut, loTell, loTell64, loTruncate, loTruncate64, loUnlink, log, log10, loread, lower, lowerInc, lowerInf, lowrite, lpad, lseg, lsegCenter, lsegDistance, lsegEq, lsegGe, lsegGt, lsegHorizontal, lsegInterpt, lsegIntersect, lsegLe, lsegLength, lsegLt, lsegNe, lsegParallel, lsegPerp, lsegVertical, ltrim, macaddr, macaddr8, macaddr8And, macaddr8Cmp, macaddr8Eq, macaddr8Ge, macaddr8Gt, macaddr8Le, macaddr8Lt, macaddr8Ne, macaddr8Not, macaddr8Or, macaddr8Set7Bit, macaddrAnd, macaddrCmp, macaddrEq, macaddrGe, macaddrGt, macaddrLe, macaddrLt, macaddrNe, macaddrNot, macaddrOr, makeDate, makeInterval, makeTime, makeTimestamp, makeTimestamptz, makeaclitem, masklen, max, md5, minScale, mod, mode, money, mulDInterval, multirange, multirangeAdjacentMultirange, multirangeAdjacentRange, multirangeAfterMultirange, multirangeAfterRange, multirangeBeforeMultirange, multirangeBeforeRange, multirangeCmp, multirangeContainedByMultirange, multirangeContainedByRange, multirangeContainsElem, multirangeContainsMultirange, multirangeContainsRange, multirangeEq, multirangeGe, multirangeGt, multirangeIntersect, multirangeIntersectAggTransfn, multirangeLe, multirangeLt, multirangeMinus, multirangeNe, multirangeOverlapsMultirange, multirangeOverlapsRange, multirangeOverleftMultirange, multirangeOverleftRange, multirangeOverrightMultirange, multirangeOverrightRange, multirangeUnion, mxidAge, name, nameconcatoid, nameeq, nameeqtext, namege, namegetext, namegt, namegttext, nameiclike, nameicnlike, nameicregexeq, nameicregexne, namele, nameletext, namelike, namelt, namelttext, namene, namenetext, namenlike, nameregexeq, nameregexne, netmask, network, networkCmp, networkEq, networkGe, networkGt, networkLarger, networkLe, networkLt, networkNe, networkOverlap, networkSmaller, networkSub, networkSubeq, networkSup, networkSupeq, nextval, normalize, notlike, now, npoints, nthValue, ntile, numNonnulls, numNulls, numeric, numericAbs, numericAdd, numericCmp, numericDiv, numericDivTrunc, numericEq, numericExp, numericGe, numericGt, numericInc, numericLarger, numericLe, numericLn, numericLog, numericLt, numericMod, numericMul, numericNe, numericPlPgLsn, numericPower, numericSmaller, numericSqrt, numericSub, numericUminus, numericUplus, nummultirange, numnode, numrange, numrangeSubdiff, objDescription, octetLength, oid, oideq, oidge, oidgt, oidlarger, oidle, oidlt, oidne, oidsmaller, oidvectoreq, oidvectorge, oidvectorgt, oidvectorle, oidvectorlt, oidvectorne, oidvectortypes, onPb, onPl, onPpath, onPs, onSb, onSl, overlaps, overlay, parseIdent, path, pathAdd, pathAddPt, pathContainPt, pathDistance, pathDivPt, pathInter, pathLength, pathMulPt, pathNEq, pathNGe, pathNGt, pathNLe, pathNLt, pathNpoints, pathSubPt, pclose, percentRank, percentileCont, percentileDisc, pgAdvisoryLock, pgAdvisoryLockShared, pgAdvisoryUnlock, pgAdvisoryUnlockAll, pgAdvisoryUnlockShared, pgAdvisoryXactLock, pgAdvisoryXactLockShared, pgAvailableExtensionVersions, pgAvailableExtensions, pgAvailableWalSummaries, pgBackendPid, pgBackupStart, pgBackupStop, pgBasetype, pgBlockingPids, pgCancelBackend, pgCharToEncoding, pgClientEncoding, pgCollationActualVersion, pgCollationFor, pgCollationIsVisible, pgColumnCompression, pgColumnIsUpdatable, pgColumnSize, pgColumnToastChunkId, pgConfLoadTime, pgConfig, pgControlCheckpoint, pgControlInit, pgControlRecovery, pgControlSystem, pgConversionIsVisible, pgCopyLogicalReplicationSlot, pgCopyPhysicalReplicationSlot, pgCreateLogicalReplicationSlot, pgCreatePhysicalReplicationSlot, pgCreateRestorePoint, pgCurrentLogfile, pgCurrentSnapshot, pgCurrentWalFlushLsn, pgCurrentWalInsertLsn, pgCurrentWalLsn, pgCurrentXactId, pgCurrentXactIdIfAssigned, pgCursor, pgDatabaseCollationActualVersion, pgDatabaseSize, pgDescribeObject, pgDropReplicationSlot, pgEncodingMaxLength, pgEncodingToChar, pgEventTriggerDdlCommands, pgEventTriggerDroppedObjects, pgEventTriggerTableRewriteOid, pgEventTriggerTableRewriteReason, pgExportSnapshot, pgExtensionConfigDump, pgExtensionUpdatePaths, pgFilenodeRelation, pgFunctionIsVisible, pgGetBackendMemoryContexts, pgGetCatalogForeignKeys, pgGetConstraintdef, pgGetExpr, pgGetFunctionArgDefault, pgGetFunctionArguments, pgGetFunctionIdentityArguments, pgGetFunctionResult, pgGetFunctionSqlbody, pgGetFunctiondef, pgGetIndexdef, pgGetKeywords, pgGetMultixactMembers, pgGetObjectAddress, pgGetPartitionConstraintdef, pgGetPartkeydef, pgGetPublicationTables, pgGetReplicaIdentityIndex, pgGetReplicationSlots, pgGetRuledef, pgGetSerialSequence, pgGetShmemAllocations, pgGetStatisticsobjdef, pgGetStatisticsobjdefColumns, pgGetStatisticsobjdefExpressions, pgGetTriggerdef, pgGetUserbyid, pgGetViewdef, pgGetWaitEvents, pgGetWalReplayPauseState, pgGetWalResourceManagers, pgGetWalSummarizerState, pgHasRole, pgHbaFileRules, pgIdentFileMappings, pgIdentifyObject, pgIdentifyObjectAsAddress, pgImportSystemCollations, pgIndexColumnHasProperty, pgIndexHasProperty, pgIndexamHasProperty, pgIndexamProgressPhasename, pgIndexesSize, pgInputErrorInfo, pgInputIsValid, pgIsInRecovery, pgIsOtherTempSchema, pgIsWalReplayPaused, pgIsolationTestSessionIsBlocked, pgJitAvailable, pgLastCommittedXact, pgLastWalReceiveLsn, pgLastWalReplayLsn, pgLastXactReplayTimestamp, pgListeningChannels, pgLockStatus, pgLogBackendMemoryContexts, pgLogStandbySnapshot, pgLogicalEmitMessage, pgLogicalSlotGetBinaryChanges, pgLogicalSlotGetChanges, pgLogicalSlotPeekBinaryChanges, pgLogicalSlotPeekChanges, pgLsArchiveStatusdir, pgLsDir, pgLsLogdir, pgLsLogicalmapdir, pgLsLogicalsnapdir, pgLsReplslotdir, pgLsTmpdir, pgLsWaldir, pgLsn, pgLsnCmp, pgLsnEq, pgLsnGe, pgLsnGt, pgLsnHash, pgLsnHashExtended, pgLsnLarger, pgLsnLe, pgLsnLt, pgLsnMi, pgLsnMii, pgLsnNe, pgLsnPli, pgLsnSmaller, pgMcvListItems, pgMyTempSchema, pgNextoid, pgNotificationQueueUsage, pgNotify, pgOpclassIsVisible, pgOperatorIsVisible, pgOpfamilyIsVisible, pgOptionsToTable, pgPartitionAncestors, pgPartitionRoot, pgPartitionTree, pgPostmasterStartTime, pgPreparedStatement, pgPreparedXact, pgPromote, pgReadBinaryFile, pgReadFile, pgRelationFilenode, pgRelationFilepath, pgRelationIsPublishable, pgRelationIsUpdatable, pgRelationSize, pgReloadConf, pgReplicationOriginAdvance, pgReplicationOriginCreate, pgReplicationOriginDrop, pgReplicationOriginOid, pgReplicationOriginProgress, pgReplicationOriginSessionIsSetup, pgReplicationOriginSessionProgress, pgReplicationOriginSessionReset, pgReplicationOriginSessionSetup, pgReplicationOriginXactReset, pgReplicationOriginXactSetup, pgReplicationSlotAdvance, pgRotateLogfile, pgSafeSnapshotBlockingPids, pgSequenceLastValue, pgSequenceParameters, pgSettingsGetFlags, pgShowAllFileSettings, pgShowAllSettings, pgShowReplicationOriginStatus, pgSizeBytes, pgSizePretty, pgSleep, pgSleepFor, pgSleepUntil, pgSnapshotXip, pgSnapshotXmax, pgSplitWalfileName, pgStatClearSnapshot, pgStatFile, pgStatForceNextFlush, pgStatGetActivity, pgStatGetAnalyzeCount, pgStatGetArchiver, pgStatGetAutoanalyzeCount, pgStatGetAutovacuumCount, pgStatGetBackendActivity, pgStatGetBackendActivityStart, pgStatGetBackendClientAddr, pgStatGetBackendClientPort, pgStatGetBackendDbid, pgStatGetBackendIdset, pgStatGetBackendPid, pgStatGetBackendStart, pgStatGetBackendSubxact, pgStatGetBackendUserid, pgStatGetBackendWaitEvent, pgStatGetBackendWaitEventType, pgStatGetBackendXactStart, pgStatGetBgwriterBufWrittenClean, pgStatGetBgwriterMaxwrittenClean, pgStatGetBgwriterStatResetTime, pgStatGetBlocksFetched, pgStatGetBlocksHit, pgStatGetBufAlloc, pgStatGetCheckpointerBuffersWritten, pgStatGetCheckpointerNumRequested, pgStatGetCheckpointerNumTimed, pgStatGetCheckpointerRestartpointsPerformed, pgStatGetCheckpointerRestartpointsRequested, pgStatGetCheckpointerRestartpointsTimed, pgStatGetCheckpointerStatResetTime, pgStatGetCheckpointerSyncTime, pgStatGetCheckpointerWriteTime, pgStatGetDbActiveTime, pgStatGetDbBlkReadTime, pgStatGetDbBlkWriteTime, pgStatGetDbBlocksFetched, pgStatGetDbBlocksHit, pgStatGetDbChecksumFailures, pgStatGetDbChecksumLastFailure, pgStatGetDbConflictAll, pgStatGetDbConflictLock, pgStatGetDbConflictLogicalslot, pgStatGetDbConflictSnapshot, pgStatGetDbConflictStartupDeadlock, pgStatGetDbConflictTablespace, pgStatGetDbDeadlocks, pgStatGetDbIdleInTransactionTime, pgStatGetDbNumbackends, pgStatGetDbSessionTime, pgStatGetDbSessions, pgStatGetDbSessionsAbandoned, pgStatGetDbSessionsFatal, pgStatGetDbSessionsKilled, pgStatGetDbStatResetTime, pgStatGetDbTempBytes, pgStatGetDbTempFiles, pgStatGetDbTuplesDeleted, pgStatGetDbTuplesFetched, pgStatGetDbTuplesInserted, pgStatGetDbTuplesReturned, pgStatGetDbTuplesUpdated, pgStatGetDbXactCommit, pgStatGetDbXactRollback, pgStatGetDeadTuples, pgStatGetFunctionCalls, pgStatGetFunctionSelfTime, pgStatGetFunctionTotalTime, pgStatGetInsSinceVacuum, pgStatGetIo, pgStatGetLastAnalyzeTime, pgStatGetLastAutoanalyzeTime, pgStatGetLastAutovacuumTime, pgStatGetLastVacuumTime, pgStatGetLastscan, pgStatGetLiveTuples, pgStatGetModSinceAnalyze, pgStatGetNumscans, pgStatGetProgressInfo, pgStatGetRecoveryPrefetch, pgStatGetReplicationSlot, pgStatGetSlru, pgStatGetSnapshotTimestamp, pgStatGetSubscription, pgStatGetSubscriptionStats, pgStatGetTuplesDeleted, pgStatGetTuplesFetched, pgStatGetTuplesHotUpdated, pgStatGetTuplesInserted, pgStatGetTuplesNewpageUpdated, pgStatGetTuplesReturned, pgStatGetTuplesUpdated, pgStatGetVacuumCount, pgStatGetWal, pgStatGetWalReceiver, pgStatGetWalSenders, pgStatGetXactBlocksFetched, pgStatGetXactBlocksHit, pgStatGetXactFunctionCalls, pgStatGetXactFunctionSelfTime, pgStatGetXactFunctionTotalTime, pgStatGetXactNumscans, pgStatGetXactTuplesDeleted, pgStatGetXactTuplesFetched, pgStatGetXactTuplesHotUpdated, pgStatGetXactTuplesInserted, pgStatGetXactTuplesNewpageUpdated, pgStatGetXactTuplesReturned, pgStatGetXactTuplesUpdated, pgStatHaveStats, pgStatReset, pgStatResetReplicationSlot, pgStatResetShared, pgStatResetSingleFunctionCounters, pgStatResetSingleTableCounters, pgStatResetSlru, pgStatResetSubscriptionStats, pgStatisticsObjIsVisible, pgStopMakingPinnedObjects, pgSwitchWal, pgSyncReplicationSlots, pgTableIsVisible, pgTableSize, pgTablespaceDatabases, pgTablespaceLocation, pgTablespaceSize, pgTerminateBackend, pgTimezoneAbbrevs, pgTimezoneNames, pgTotalRelationSize, pgTriggerDepth, pgTryAdvisoryLock, pgTryAdvisoryLockShared, pgTryAdvisoryXactLock, pgTryAdvisoryXactLockShared, pgTsConfigIsVisible, pgTsDictIsVisible, pgTsParserIsVisible, pgTsTemplateIsVisible, pgTypeIsVisible, pgTypeof, pgVisibleInSnapshot, pgWalLsnDiff, pgWalReplayPause, pgWalReplayResume, pgWalSummaryContents, pgWalfileName, pgWalfileNameOffset, pgXactCommitTimestamp, pgXactStatus, phrasetoTsquery, pi, plaintoTsquery, plpgsqlCallHandler, plpgsqlValidator, point, pointAbove, pointAdd, pointBelow, pointDistance, pointDiv, pointEq, pointHoriz, pointLeft, pointMul, pointNe, pointRight, pointSub, pointVert, polyAbove, polyBelow, polyCenter, polyContainPt, polyContained, polyDistance, polyLeft, polyNpoints, polyOverabove, polyOverbelow, polyOverlap, polyOverleft, polyOverright, polyRight, polySame, polygon, popen, position, postgresqlFdwValidator, pow, power, ptContainedCircle, ptContainedPoly, queryToXml, queryToXmlAndXmlschema, queryToXmlschema, querytree, quoteIdent, quoteLiteral, quoteNullable, radians, radius, random, randomNormal, rangeAdjacent, rangeAdjacentMultirange, rangeAfter, rangeAfterMultirange, rangeAgg, rangeBefore, rangeBeforeMultirange, rangeCmp, rangeContainedBy, rangeContainedByMultirange, rangeContains, rangeContainsElem, rangeContainsMultirange, rangeEq, rangeGe, rangeGt, rangeIntersect, rangeIntersectAgg, rangeIntersectAggTransfn, rangeLe, rangeLt, rangeMerge, rangeMinus, rangeNe, rangeOverlaps, rangeOverlapsMultirange, rangeOverleft, rangeOverleftMultirange, rangeOverright, rangeOverrightMultirange, rangeUnion, rank, recordEq, recordGe, recordGt, recordImageEq, recordImageGe, recordImageGt, recordImageLe, recordImageLt, recordImageNe, recordLe, recordLt, recordNe, regclass, regexpCount, regexpInstr, regexpLike, regexpMatch, regexpMatches, regexpReplace, regexpSplitToArray, regexpSplitToTable, regexpSubstr, regrAvgx, regrAvgy, regrCount, regrIntercept, regrR2, regrSlope, regrSxx, regrSxy, regrSyy, repeat, replace, resultType, reverse, riFKeyCascadeDel, riFKeyCascadeUpd, riFKeyCheckIns, riFKeyCheckUpd, riFKeyNoactionDel, riFKeyNoactionUpd, riFKeyRestrictDel, riFKeyRestrictUpd, riFKeySetdefaultDel, riFKeySetdefaultUpd, riFKeySetnullDel, riFKeySetnullUpd, right, round, rowNumber, rowSecurityActive, rowToJson, rpad, rtrim, satisfiesHashPartition, scale, schemaToXml, schemaToXmlAndXmlschema, schemaToXmlschema, sessionUser, setBit, setByte, setConfig, setMasklen, setseed, setval, setweight, sha224, sha256, sha384, sha512, shobjDescription, sign, similarEscape, similarToEscape, sind, sinh, slope, spgPolyQuadCompress, splitPart, sqlFunction, sqrt, startsWith, statementTimestamp, stddev, stddevPop, stddevSamp, stringAgg, stringToArray, stringToTable, strip, strpos, substr, substring, sum, suppressRedundantUpdatesTrigger, systemUser, tableToXml, tableToXmlAndXmlschema, tableToXmlschema, tan, tand, tanh, text, textGe, textGt, textLarger, textLe, textLt, textPatternGe, textPatternGt, textPatternLe, textPatternLt, textSmaller, textanycat, textcat, texteq, texteqname, textgename, textgtname, texticlike, texticnlike, texticregexeq, texticregexne, textlen, textlename, textlike, textltname, textne, textnename, textnlike, textregexeq, textregexne, tideq, tidge, tidgt, tidlarger, tidle, tidlt, tidne, tidsmaller, time, timeCmp, timeEq, timeGe, timeGt, timeHash, timeHashExtended, timeLarger, timeLe, timeLt, timeMiInterval, timeMiTime, timeNe, timePlInterval, timeSmaller, timedatePl, timeofday, timestamp, timestampCmp, timestampCmpDate, timestampCmpTimestamptz, timestampEq, timestampEqDate, timestampEqTimestamptz, timestampGe, timestampGeDate, timestampGeTimestamptz, timestampGt, timestampGtDate, timestampGtTimestamptz, timestampHash, timestampHashExtended, timestampLarger, timestampLe, timestampLeDate, timestampLeTimestamptz, timestampLt, timestampLtDate, timestampLtTimestamptz, timestampMi, timestampMiInterval, timestampNe, timestampNeDate, timestampNeTimestamptz, timestampPlInterval, timestampSmaller, timestamptz, timestamptzCmp, timestamptzCmpDate, timestamptzCmpTimestamp, timestamptzEq, timestamptzEqDate, timestamptzEqTimestamp, timestamptzGe, timestamptzGeDate, timestamptzGeTimestamp, timestamptzGt, timestamptzGtDate, timestamptzGtTimestamp, timestamptzLarger, timestamptzLe, timestamptzLeDate, timestamptzLeTimestamp, timestamptzLt, timestamptzLtDate, timestamptzLtTimestamp, timestamptzMi, timestamptzMiInterval, timestamptzNe, timestamptzNeDate, timestamptzNeTimestamp, timestamptzPlInterval, timestamptzSmaller, timetz, timetzCmp, timetzEq, timetzGe, timetzGt, timetzHash, timetzHashExtended, timetzLarger, timetzLe, timetzLt, timetzMiInterval, timetzNe, timetzPlInterval, timetzSmaller, timetzdatePl, timezone, toAscii, toChar, toDate, toHex, toJson, toJsonb, toNumber, toOct, toRegclass, toRegcollation, toRegnamespace, toRegoper, toRegoperator, toRegproc, toRegprocedure, toRegrole, toRegtype, toRegtypemod, toTimestamp, toTsquery, toTsvector, transactionTimestamp, translate, trimArray, trimScale, trunc, tsDebug, tsDelete, tsFilter, tsHeadline, tsLexize, tsMatchQv, tsMatchTq, tsMatchTt, tsMatchVq, tsParse, tsRank, tsRankCd, tsRewrite, tsStat, tsTokenType, tsmultirange, tsqMcontained, tsqMcontains, tsqueryAnd, tsqueryCmp, tsqueryEq, tsqueryGe, tsqueryGt, tsqueryLe, tsqueryLt, tsqueryNe, tsqueryNot, tsqueryOr, tsqueryPhrase, tsrange, tsrangeSubdiff, tstzmultirange, tstzrange, tstzrangeSubdiff, tsvectorCmp, tsvectorConcat, tsvectorEq, tsvectorGe, tsvectorGt, tsvectorLe, tsvectorLt, tsvectorNe, tsvectorToArray, tsvectorUpdateTrigger, tsvectorUpdateTriggerColumn, txidCurrent, txidCurrentIfAssigned, txidCurrentSnapshot, txidSnapshotXip, txidSnapshotXmax, txidStatus, txidVisibleInSnapshot, unicodeAssigned, unicodeVersion, uniqueKeyRecheck, unistr, unnest, upper, upperInc, upperInf, uuidCmp, uuidEq, uuidExtractTimestamp, uuidExtractVersion, uuidGe, uuidGt, uuidHash, uuidHashExtended, uuidLe, uuidLt, uuidNe, values, varPop, varSamp, varbit, varbitcmp, varbiteq, varbitge, varbitgt, varbitle, varbitlt, varbitne, varchar, variance, version, websearchToTsquery, width, widthBucket, xid, xid8Cmp, xid8Eq, xid8Ge, xid8Gt, xid8Larger, xid8Le, xid8Lt, xid8Ne, xid8Smaller, xideq, xideqint4, xidneq, xidneqint4, xml, xmlIsWellFormed, xmlIsWellFormedContent, xmlIsWellFormedDocument, xmlagg, xmlcomment, xmlconcat2, xmlexists, xmltext, xmlvalidate, xpath, xpathExists };
export type { Aggregate, AwaitedResultType, BindedSetof, Input, Query, ResultType, RowLike, RowLikeRelaxed, Scalar, ScalarRelaxed, SelectArgs };
